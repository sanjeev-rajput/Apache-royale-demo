/**
 * Generated by Apache Royale Compiler from org/apache/royale/html/MXMLBeadView.as
 * org.apache.royale.html.MXMLBeadView
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.html.MXMLBeadView');
/* Royale Dependency List: org.apache.royale.core.IBead,org.apache.royale.core.IParent,org.apache.royale.core.IStatesImpl,org.apache.royale.core.IStrandWithModel,org.apache.royale.core.ValuesManager,org.apache.royale.events.Event,org.apache.royale.events.ValueChangeEvent,org.apache.royale.states.State,org.apache.royale.utils.MXMLDataInterpreter,org.apache.royale.utils.loadBeadFromValuesManager,org.apache.royale.utils.removeBeadFromBeads,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.core.IStrand');
goog.require('org.apache.royale.html.beads.GroupView');
goog.require('org.apache.royale.core.ILayoutHost');



/**
 *  Constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.html.beads.GroupView}
 * @implements {org.apache.royale.core.IStrand}
 * @implements {org.apache.royale.core.ILayoutHost}
 */
org.apache.royale.html.MXMLBeadView = function() {
  org.apache.royale.html.MXMLBeadView.base(this, 'constructor');
};
goog.inherits(org.apache.royale.html.MXMLBeadView, org.apache.royale.html.beads.GroupView);


/**
 *  @copy org.apache.royale.core.Application#generateMXMLAttributes()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {Array} data
 */
org.apache.royale.html.MXMLBeadView.prototype.generateMXMLAttributes = function(data) {
  org.apache.royale.utils.MXMLDataInterpreter.generateMXMLProperties(this, data);
};


/**
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.mxmlContent;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.org_apache_royale_html_MXMLBeadView__states;


/**
 *  <code>true</code> if the array of states
 *  contains a state with this name.
 *
 *  @asparam state The state namem.
 *  @asreturn True if state in state array
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {string} state
 * @return {boolean}
 */
org.apache.royale.html.MXMLBeadView.prototype.hasState = function(state) {
  var foreachiter0_target = this.org_apache_royale_html_MXMLBeadView__states;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var s = foreachiter0_target[foreachiter0];
  {
    if (s.name == state)
      return true;
  }}
  
  return false;
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.html.MXMLBeadView.prototype.org_apache_royale_html_MXMLBeadView__currentState;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.org_apache_royale_html_MXMLBeadView__transitions;


/**
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.beads;


/**
 * @private
 * @type {Array.<org.apache.royale.core.IBead>}
 */
org.apache.royale.html.MXMLBeadView.prototype.org_apache_royale_html_MXMLBeadView__beads;


/**
 *  @copy org.apache.royale.core.IStrand#addBead()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {org.apache.royale.core.IBead} bead
 */
org.apache.royale.html.MXMLBeadView.prototype.addBead = function(bead) {
  if (!this.org_apache_royale_html_MXMLBeadView__beads)
    this.org_apache_royale_html_MXMLBeadView__beads = new (org.apache.royale.utils.Language.synthVector('org.apache.royale.core.IBead'))();
  this.org_apache_royale_html_MXMLBeadView__beads.push(bead);
  bead.strand = this;
};


/**
 *  @copy org.apache.royale.core.IStrand#getBeadByType()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {Object} classOrInterface
 * @return {org.apache.royale.core.IBead}
 */
org.apache.royale.html.MXMLBeadView.prototype.getBeadByType = function(classOrInterface) {
  var foreachiter1_target = this.org_apache_royale_html_MXMLBeadView__beads;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var bead = foreachiter1_target[foreachiter1];
  {
    if (org.apache.royale.utils.Language.is(bead, classOrInterface))
      return bead;
  }}
  
  return null;
};


/**
 *  @copy org.apache.royale.core.IStrand#removeBead()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {org.apache.royale.core.IBead} value
 * @return {org.apache.royale.core.IBead}
 */
org.apache.royale.html.MXMLBeadView.prototype.removeBead = function(value) {
  return org.apache.royale.utils.removeBeadFromBeads(this.org_apache_royale_html_MXMLBeadView__beads, value, false);
};


org.apache.royale.html.MXMLBeadView.prototype.set__strand = function(value) {
  org.apache.royale.html.MXMLBeadView.superClass_.set__strand.apply(this, [value]);
  org.apache.royale.core.ValuesManager.valuesImpl.init(this);
  this.dispatchEvent(new org.apache.royale.events.Event("strandChanged"));
  var foreachiter2_target = this.beads;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var bead = foreachiter2_target[foreachiter2];
  
    this.addBead(bead);}
  
  this.dispatchEvent(new org.apache.royale.events.Event("beadsAdded"));
  org.apache.royale.utils.MXMLDataInterpreter.generateMXMLInstances(this, value, this.MXMLDescriptor);
  this.dispatchEvent(new org.apache.royale.events.Event("childrenAdded"));
  this.dispatchEvent(new org.apache.royale.events.Event("initBindings"));
  this.dispatchEvent(new org.apache.royale.events.Event("initComplete"));
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.html.MXMLBeadView.prototype.model;


org.apache.royale.html.MXMLBeadView.prototype.get__model = function() {
  return this._strand.model;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.MXMLDescriptor;


org.apache.royale.html.MXMLBeadView.prototype.get__MXMLDescriptor = function() {
  return null;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.states;


org.apache.royale.html.MXMLBeadView.prototype.get__states = function() {
  return this.org_apache_royale_html_MXMLBeadView__states;
};


org.apache.royale.html.MXMLBeadView.prototype.set__states = function(value) {
  this.org_apache_royale_html_MXMLBeadView__states = value;
  this.org_apache_royale_html_MXMLBeadView__currentState = org.apache.royale.utils.Language.string(this.org_apache_royale_html_MXMLBeadView__states[0].name);
  try {
    org.apache.royale.utils.loadBeadFromValuesManager(org.apache.royale.core.IStatesImpl, "iStatesImpl", this);
  } catch (e) {
    
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.html.MXMLBeadView.prototype.currentState;


org.apache.royale.html.MXMLBeadView.prototype.get__currentState = function() {
  return this.org_apache_royale_html_MXMLBeadView__currentState;
};


org.apache.royale.html.MXMLBeadView.prototype.set__currentState = function(value) {
  if (value == this.org_apache_royale_html_MXMLBeadView__currentState)
    return;
  var /** @type {org.apache.royale.events.ValueChangeEvent} */ event = new org.apache.royale.events.ValueChangeEvent("currentStateChange", false, false, this.org_apache_royale_html_MXMLBeadView__currentState, value);
  this.org_apache_royale_html_MXMLBeadView__currentState = value;
  this.dispatchEvent(event);
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.html.MXMLBeadView.prototype.transitions;


org.apache.royale.html.MXMLBeadView.prototype.get__transitions = function() {
  return this.org_apache_royale_html_MXMLBeadView__transitions;
};


org.apache.royale.html.MXMLBeadView.prototype.set__transitions = function(value) {
  this.org_apache_royale_html_MXMLBeadView__transitions = value;
};


Object.defineProperties(org.apache.royale.html.MXMLBeadView.prototype, /** @lends {org.apache.royale.html.MXMLBeadView.prototype} */ {
/**
 * @type {org.apache.royale.core.IStrand}
 */
strand: {
set: org.apache.royale.html.MXMLBeadView.prototype.set__strand},
/**
 * @type {Object}
 */
model: {
get: org.apache.royale.html.MXMLBeadView.prototype.get__model},
/**
 * @type {Array}
 */
MXMLDescriptor: {
get: org.apache.royale.html.MXMLBeadView.prototype.get__MXMLDescriptor},
/**
 * @type {Array}
 */
states: {
get: org.apache.royale.html.MXMLBeadView.prototype.get__states,
set: org.apache.royale.html.MXMLBeadView.prototype.set__states},
/**
 * @type {string}
 */
currentState: {
get: org.apache.royale.html.MXMLBeadView.prototype.get__currentState,
set: org.apache.royale.html.MXMLBeadView.prototype.set__currentState},
/**
 * @type {Array}
 */
transitions: {
get: org.apache.royale.html.MXMLBeadView.prototype.get__transitions,
set: org.apache.royale.html.MXMLBeadView.prototype.set__transitions}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.html.MXMLBeadView.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MXMLBeadView', qName: 'org.apache.royale.html.MXMLBeadView', kind: 'class' }], interfaces: [org.apache.royale.core.IStrand, org.apache.royale.core.ILayoutHost] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.html.MXMLBeadView.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'mxmlContent': { type: 'Array', get_set: function (/** org.apache.royale.html.MXMLBeadView */ inst, /** * */ v) {return v !== undefined ? inst.mxmlContent = v : inst.mxmlContent;}},
        'beads': { type: 'Array', get_set: function (/** org.apache.royale.html.MXMLBeadView */ inst, /** * */ v) {return v !== undefined ? inst.beads = v : inst.beads;}}
      };
    },
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.html.MXMLBeadView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'strandChanged' } ] } ]; }},
        'model': { type: 'Object', access: 'readonly', declaredBy: 'org.apache.royale.html.MXMLBeadView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: '__NoChangeEvent__' } ] } ]; }},
        'MXMLDescriptor': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.html.MXMLBeadView'},
        'states': { type: 'Array', access: 'readwrite', declaredBy: 'org.apache.royale.html.MXMLBeadView'},
        'currentState': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.html.MXMLBeadView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'currentStateChange' } ] } ]; }},
        'transitions': { type: 'Array', access: 'readwrite', declaredBy: 'org.apache.royale.html.MXMLBeadView'}
      };
    },
    methods: function () {
      return {
        'MXMLBeadView': { type: '', declaredBy: 'org.apache.royale.html.MXMLBeadView'},
        'generateMXMLAttributes': { type: 'void', declaredBy: 'org.apache.royale.html.MXMLBeadView', parameters: function () { return [ 'Array', false ]; }},
        'hasState': { type: 'Boolean', declaredBy: 'org.apache.royale.html.MXMLBeadView', parameters: function () { return [ 'String', false ]; }},
        'addBead': { type: 'void', declaredBy: 'org.apache.royale.html.MXMLBeadView', parameters: function () { return [ 'org.apache.royale.core.IBead', false ]; }},
        'getBeadByType': { type: 'org.apache.royale.core.IBead', declaredBy: 'org.apache.royale.html.MXMLBeadView', parameters: function () { return [ 'Class', false ]; }},
        'removeBead': { type: 'org.apache.royale.core.IBead', declaredBy: 'org.apache.royale.html.MXMLBeadView', parameters: function () { return [ 'org.apache.royale.core.IBead', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.html.MXMLBeadView.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./MXMLBeadView.js.map
