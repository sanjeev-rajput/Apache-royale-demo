/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/events/ScrollEvent.as
 * org.apache.royale.textLayout.events.ScrollEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.events.ScrollEvent');
/* Royale Dependency List: org.apache.royale.events.IRoyaleEvent,XML*/

goog.require('org.apache.royale.textLayout.events.TextLayoutEvent');



/**
 *  Constructor.
 * 
 *  Scroll events are dispatched when a container has scrolled. 
 *
 *  @asparam type The event type; indicates the action that caused the event.
 *
 *  @asparam bubbles Specifies whether the event can bubble
 *  up the display list hierarchy.
 *
 *  @asparam cancelable Specifies whether the behavior associated with the event
 *  can be prevented.
 *
 *
 *  @asparam delta The change in scroll position, expressed in pixels.
 *  
 * @constructor
 * @extends {org.apache.royale.textLayout.events.TextLayoutEvent}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {string=} direction
 * @param {number=} delta
 */
org.apache.royale.textLayout.events.ScrollEvent = function(type, bubbles, cancelable, direction, delta) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  direction = typeof direction !== 'undefined' ? direction : null;
  delta = typeof delta !== 'undefined' ? delta : NaN;
  org.apache.royale.textLayout.events.ScrollEvent.base(this, 'constructor', type, bubbles, cancelable);
  this.direction = direction;
  this.delta = delta;
};
goog.inherits(org.apache.royale.textLayout.events.ScrollEvent, org.apache.royale.textLayout.events.TextLayoutEvent);


/**
 * @type {number}
 */
org.apache.royale.textLayout.events.ScrollEvent.prototype.delta;


/**
 * @type {string}
 */
org.apache.royale.textLayout.events.ScrollEvent.prototype.direction;


/**
 *  @asprivate
 * @override
 */
org.apache.royale.textLayout.events.ScrollEvent.prototype.cloneEvent = function() {
  return new org.apache.royale.textLayout.events.ScrollEvent(this.type, this.bubbles, this.cancelable, this.direction, this.delta);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.events.ScrollEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ScrollEvent', qName: 'org.apache.royale.textLayout.events.ScrollEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.events.ScrollEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'delta': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.events.ScrollEvent */ inst, /** * */ v) {return v !== undefined ? inst.delta = v : inst.delta;}},
        'direction': { type: 'String', get_set: function (/** org.apache.royale.textLayout.events.ScrollEvent */ inst, /** * */ v) {return v !== undefined ? inst.direction = v : inst.direction;}}
      };
    },
    methods: function () {
      return {
        'ScrollEvent': { type: '', declaredBy: 'org.apache.royale.textLayout.events.ScrollEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'String', true ,'Number', true ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'org.apache.royale.textLayout.events.ScrollEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.events.ScrollEvent.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ScrollEvent.js.map
