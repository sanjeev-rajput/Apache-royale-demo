/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/events/SelectionEvent.as
 * org.apache.royale.textLayout.events.SelectionEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.events.SelectionEvent');
/* Royale Dependency List: org.apache.royale.events.IRoyaleEvent,org.apache.royale.textLayout.edit.SelectionState,XML*/

goog.require('org.apache.royale.events.Event');



/** 
 * Creates an event object that contains information about a flow operation.
 * @asparam type		The type of the event. Event listeners can access this information through the
 * inherited <code>type</code> property. There is only one type of SelectionEvent: 
 * <code>SelectionEvent.SELECTION_CHANGE</code>; 
 * @asparam bubbles 	Indicates whether an event is a bubbling event.This event does not bubble.
 * @asparam cancelable 	Indicates whether the behavior associated with the event can be prevented.
 * @asparam range		An object of type ElementRange that describes the range of text selected.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0 
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {org.apache.royale.textLayout.edit.SelectionState=} selectionState
 */
org.apache.royale.textLayout.events.SelectionEvent = function(type, bubbles, cancelable, selectionState) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  selectionState = typeof selectionState !== 'undefined' ? selectionState : null;
  this.org_apache_royale_textLayout_events_SelectionEvent__selectionState = selectionState;
  org.apache.royale.textLayout.events.SelectionEvent.base(this, 'constructor', type, bubbles, cancelable);
};
goog.inherits(org.apache.royale.textLayout.events.SelectionEvent, org.apache.royale.events.Event);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.events.SelectionEvent.SELECTION_CHANGE = "selectionChange";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL = "selectAll";


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.events.SelectionEvent.prototype.org_apache_royale_textLayout_events_SelectionEvent__selectionState;


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.events.SelectionEvent.prototype.cloneEvent = function() {
  return new org.apache.royale.textLayout.events.SelectionEvent(this.type, this.bubbles, this.cancelable, this.org_apache_royale_textLayout_events_SelectionEvent__selectionState);
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.events.SelectionEvent.prototype.selectionState;


org.apache.royale.textLayout.events.SelectionEvent.prototype.get__selectionState = function() {
  return this.org_apache_royale_textLayout_events_SelectionEvent__selectionState;
};


org.apache.royale.textLayout.events.SelectionEvent.prototype.set__selectionState = function(value) {
  this.org_apache_royale_textLayout_events_SelectionEvent__selectionState = value;
};


Object.defineProperties(org.apache.royale.textLayout.events.SelectionEvent.prototype, /** @lends {org.apache.royale.textLayout.events.SelectionEvent.prototype} */ {
/**
 * @type {org.apache.royale.textLayout.edit.SelectionState}
 */
selectionState: {
get: org.apache.royale.textLayout.events.SelectionEvent.prototype.get__selectionState,
set: org.apache.royale.textLayout.events.SelectionEvent.prototype.set__selectionState}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.events.SelectionEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SelectionEvent', qName: 'org.apache.royale.textLayout.events.SelectionEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.events.SelectionEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'selectionState': { type: 'org.apache.royale.textLayout.edit.SelectionState', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.events.SelectionEvent'}
      };
    },
    methods: function () {
      return {
        'SelectionEvent': { type: '', declaredBy: 'org.apache.royale.textLayout.events.SelectionEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'org.apache.royale.textLayout.edit.SelectionState', true ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'org.apache.royale.textLayout.events.SelectionEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.events.SelectionEvent.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./SelectionEvent.js.map
