/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/utils/CharacterUtil.as
 * org.apache.royale.textLayout.utils.CharacterUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.utils.CharacterUtil');
/* Royale Dependency List: XML*/
/* Royale Static Dependency List: org.apache.royale.utils.Language*/
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 */
org.apache.royale.textLayout.utils.CharacterUtil = function() {
};


/** 
 * Returns <code>true</code> if the <code>charCode</code> argument is a high word in a surrogate pair. 
 * A surrogate pair represents a character with a code point that requires more
 * than sixteen bits to express and thus requires a combination
 * of two 16-bit words, a high surrogate and a low surrogate, to embody its code point.
 * <p>This method can be used when processing a series of characters to
 * ensure that you do not inadvertently divide a surrogate pair
 * into incomplete halves.</p>
 * 
 *
 * @asparam charCode An integer that represents a character code.
 * Character codes are usually represented in hexadecimal format.
 * For example, the space character's character code can be
 * represented by the number <code>0x0020</code>.
 * @asreturn <code>true</code> if <code>charCode</code> is the high surrogate in a surrogate pair.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @nocollapse
 * @param {number} charCode
 * @return {boolean}
 */
org.apache.royale.textLayout.utils.CharacterUtil.isHighSurrogate = function(charCode) {
  return (charCode >= 0xD800 && charCode <= 0xDBFF);
};


/** 
 * Returns <code>true</code> if the <code>charCode</code> argument is a low word in a surrogate pair. 
 * A surrogate pair represents a character with a code point that requires more
 * than sixteen bits to express and thus requires a combination
 * of two 16-bit words, a high surrogate and a low surrogate, to embody its code point.
 * <p>This method can be used when processing a series of characters to
 * ensure that you do not inadvertently divide a surrogate pair
 * into incomplete halves.</p>
 *
 * @asparam charCode An integer that represents a character code.
 * Character codes are usually represented in hexadecimal format.
 * For example, the space character's character code can be
 * represented by the number <code>0x0020</code>.
 * @asreturn <code>true</code> if <code>charCode</code> is the low surrogate in a surrogate pair.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @nocollapse
 * @param {number} charCode
 * @return {boolean}
 */
org.apache.royale.textLayout.utils.CharacterUtil.isLowSurrogate = function(charCode) {
  return (charCode >= 0xDC00 && charCode <= 0xDFFF);
};


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.utils.CharacterUtil.whiteSpaceObject;


/**
 * @private
 * @return {Object}
 */
org.apache.royale.textLayout.utils.CharacterUtil.createWhiteSpaceObject = function() {
  var /** @type {Object} */ rslt = {};
  rslt[0x0020] = true;
  rslt[0x1680] = true;
  rslt[0x180E] = true;
  rslt[0x2000] = true;
  rslt[0x2001] = true;
  rslt[0x2002] = true;
  rslt[0x2003] = true;
  rslt[0x2004] = true;
  rslt[0x2005] = true;
  rslt[0x2006] = true;
  rslt[0x2007] = true;
  rslt[0x2008] = true;
  rslt[0x2009] = true;
  rslt[0x200A] = true;
  rslt[0x202F] = true;
  rslt[0x205F] = true;
  rslt[0x3000] = true;
  rslt[0x2028] = true;
  rslt[0x2029] = true;
  rslt[0x0009] = true;
  rslt[0x000A] = true;
  rslt[0x000B] = true;
  rslt[0x000C] = true;
  rslt[0x000D] = true;
  rslt[0x0085] = true;
  rslt[0x00A0] = true;
  return rslt;
};


/** 
 * Returns <code>true</code> if <code>charCode</code> is a whitespace character. 
 * <p>The following table describes all characters that this
 * method considers a whitespace character.
 * </p>
 * <table class="innertable">
 *     <tr><th>Character Code</th><th>Unicode Character Name</th><th>Category</th></tr>
 *     <tr><td><code>0x0020</code></td><td>SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x1680</code></td><td>OGHAM SPACE MARK</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x180E</code></td><td>MONGOLIAN VOWEL SEPARATOR</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2000</code></td><td>EN QUAD</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2001</code></td><td>EM QUAD</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2002</code></td><td>EN SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2003</code></td><td>EM SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2004</code></td><td>THREE-PER-EM SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2005</code></td><td>FOUR-PER-EM SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2006</code></td><td>SIX-PER-EM SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2007</code></td><td>FIGURE SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2008</code></td><td>PUNCTUATION SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2009</code></td><td>THIN SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x200A</code></td><td>HAIR SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x202F</code></td><td>NARROW NO-BREAK SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x205F</code></td><td>MEDIUM MATHEMATICAL SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x3000</code></td><td>IDEOGRAPHIC SPACE</td><td>Space Separator</td></tr>
 *     <tr><td><code>0x2028</code></td><td>LINE SEPARATOR</td><td>Line Separator</td></tr>
 *     <tr><td><code>0x2029</code></td><td>PARAGRAPH SEPARATOR</td><td>Paragraph Separator</td></tr>
 *     <tr><td><code>0x0009</code></td><td>CHARACTER TABULATION</td><td>Other</td></tr>
 *     <tr><td><code>0x000A</code></td><td>LINE FEED</td><td>Other</td></tr>
 *     <tr><td><code>0x000B</code></td><td>LINE TABULATION</td><td>Other</td></tr>
 *     <tr><td><code>0x000C</code></td><td>FORM FEED</td><td>Other</td></tr>
 *     <tr><td><code>0x000D</code></td><td>CARRIAGE RETURN</td><td>Other</td></tr>
 *     <tr><td><code>0x0085</code></td><td>NEXT LINE</td><td>Other</td></tr>
 *     <tr><td><code>0x00A0</code></td><td>NO-BREAK SPACE</td><td>Other</td></tr>
 *  </table>
 
 *
 * @asparam charCode An integer that represents a character code.
 * Character codes are usually represented in hexadecimal format.
 * For example, the space character's character code can be
 * represented by the number <code>0x0020</code>.
 *
 * @asreturn <code>true</code> if <code>charCode</code> is a whitespace character. 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @nocollapse
 * @param {number} charCode
 * @return {boolean}
 */
org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace = function(charCode) {
  return !!(org.apache.royale.textLayout.utils.CharacterUtil.whiteSpaceObject[charCode]);
};

org.apache.royale.textLayout.utils.CharacterUtil.whiteSpaceObject = org.apache.royale.textLayout.utils.CharacterUtil.createWhiteSpaceObject();




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.utils.CharacterUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CharacterUtil', qName: 'org.apache.royale.textLayout.utils.CharacterUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.utils.CharacterUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|isHighSurrogate': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.utils.CharacterUtil', parameters: function () { return [ 'int', false ]; }},
        '|isLowSurrogate': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.utils.CharacterUtil', parameters: function () { return [ 'int', false ]; }},
        '|isWhitespace': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.utils.CharacterUtil', parameters: function () { return [ 'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.utils.CharacterUtil.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CharacterUtil.js.map
