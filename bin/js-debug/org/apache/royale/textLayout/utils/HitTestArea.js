/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/utils/HitTestArea.as
 * org.apache.royale.textLayout.utils.HitTestArea
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.utils.HitTestArea');
/* Royale Dependency List: org.apache.royale.geom.Rectangle,org.apache.royale.textLayout.elements.FlowElement,XML*/




/**
 * Create a HitTestArea with an object containing enumerable property objects as a rectangle
 * in a "rect" property, and a a FlowElement in its "owner" property. First, 
 * determine the bounding rectangle; then, determine the midpoint, and fill
 * in each quadrant with the intersecting rectangles.
 * @asparam obj    An object containing {rect:Rectangle, owner:FlowElement} objects as property values.
 * @constructor
 * @param {Object} objects
 */
org.apache.royale.textLayout.utils.HitTestArea = function(objects) {
  this.initialize(objects);
};


/**
 * @private
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.org_apache_royale_textLayout_utils_HitTestArea__rect;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.org_apache_royale_textLayout_utils_HitTestArea__xm;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.org_apache_royale_textLayout_utils_HitTestArea__ym;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.FlowElement}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.org_apache_royale_textLayout_utils_HitTestArea__owner = null;


/** @asprivate 
 * @param {Object} objects
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.initialize = function(objects) {
  var /** @type {Object} */ obj;
  var /** @type {number} */ count = 0;
  if (objects) {
    for (obj in objects) {
      if (++count > 1)
        break;
    }
  }
  if (count == 0) {
    this.org_apache_royale_textLayout_utils_HitTestArea__rect = new org.apache.royale.geom.Rectangle();
    this.org_apache_royale_textLayout_utils_HitTestArea__xm = this.org_apache_royale_textLayout_utils_HitTestArea__ym = 0;
    return;
  }
  if (count == 1) {
    var foreachiter0_target = objects;
    for (var foreachiter0 in foreachiter0_target) 
    {
    obj = foreachiter0_target[foreachiter0];
    {
      this.org_apache_royale_textLayout_utils_HitTestArea__rect = obj.rect;
      this.org_apache_royale_textLayout_utils_HitTestArea__xm = this.org_apache_royale_textLayout_utils_HitTestArea__rect.left;
      this.org_apache_royale_textLayout_utils_HitTestArea__ym = this.org_apache_royale_textLayout_utils_HitTestArea__rect.top;
      this.org_apache_royale_textLayout_utils_HitTestArea__owner = obj.owner;
      
      return;
    }}
    
  }
  var /** @type {org.apache.royale.geom.Rectangle} */ r;
  var foreachiter1_target = objects;
  for (var foreachiter1 in foreachiter1_target) 
  {
  obj = foreachiter1_target[foreachiter1];
  {
    r = obj.rect;
    if (!this.org_apache_royale_textLayout_utils_HitTestArea__rect)
      this.org_apache_royale_textLayout_utils_HitTestArea__rect = r;
    else
      this.org_apache_royale_textLayout_utils_HitTestArea__rect = this.org_apache_royale_textLayout_utils_HitTestArea__rect.union(r);
  }}
  
  this.org_apache_royale_textLayout_utils_HitTestArea__xm = Math.ceil(this.org_apache_royale_textLayout_utils_HitTestArea__rect.left + this.org_apache_royale_textLayout_utils_HitTestArea__rect.width / 2);
  this.org_apache_royale_textLayout_utils_HitTestArea__ym = Math.ceil(this.org_apache_royale_textLayout_utils_HitTestArea__rect.top + this.org_apache_royale_textLayout_utils_HitTestArea__rect.height / 2);
  if (this.org_apache_royale_textLayout_utils_HitTestArea__rect.width <= 3 || this.org_apache_royale_textLayout_utils_HitTestArea__rect.height <= 3) {
    var foreachiter2_target = objects;
    for (var foreachiter2 in foreachiter2_target) 
    {
    obj = foreachiter2_target[foreachiter2];
    {
      this.org_apache_royale_textLayout_utils_HitTestArea__owner = obj.owner;
      
      return;
    }}
    
  }
  var foreachiter3_target = objects;
  for (var foreachiter3 in foreachiter3_target) 
  {
  obj = foreachiter3_target[foreachiter3];
  {
    r = obj.rect;
    if (r.equals(this.org_apache_royale_textLayout_utils_HitTestArea__rect))
      continue;
    if (r.contains(this.org_apache_royale_textLayout_utils_HitTestArea__xm, this.org_apache_royale_textLayout_utils_HitTestArea__ym)) {
      var /** @type {number} */ dxLower = this.org_apache_royale_textLayout_utils_HitTestArea__xm - r.left;
      var /** @type {number} */ dxUpper = r.right - this.org_apache_royale_textLayout_utils_HitTestArea__xm;
      var /** @type {number} */ dyLower = this.org_apache_royale_textLayout_utils_HitTestArea__ym - r.top;
      var /** @type {number} */ dyUpper = r.bottom - this.org_apache_royale_textLayout_utils_HitTestArea__ym;
      this.org_apache_royale_textLayout_utils_HitTestArea__xm = (dxLower > dxUpper) ? this.org_apache_royale_textLayout_utils_HitTestArea__xm + dxUpper : this.org_apache_royale_textLayout_utils_HitTestArea__xm - dxLower;
      this.org_apache_royale_textLayout_utils_HitTestArea__ym = (dyLower > dyUpper) ? this.org_apache_royale_textLayout_utils_HitTestArea__ym + dyUpper : this.org_apache_royale_textLayout_utils_HitTestArea__ym - dyLower;
      break;
    }
  }}
  
  var /** @type {org.apache.royale.geom.Rectangle} */ quadrant = new org.apache.royale.geom.Rectangle(this.org_apache_royale_textLayout_utils_HitTestArea__rect.left, this.org_apache_royale_textLayout_utils_HitTestArea__rect.top, this.org_apache_royale_textLayout_utils_HitTestArea__xm - this.org_apache_royale_textLayout_utils_HitTestArea__rect.left, this.org_apache_royale_textLayout_utils_HitTestArea__ym - this.org_apache_royale_textLayout_utils_HitTestArea__rect.top);
  this.org_apache_royale_textLayout_utils_HitTestArea_addQuadrant(objects, "tl", quadrant);
  quadrant.left = this.org_apache_royale_textLayout_utils_HitTestArea__xm;
  quadrant.right = this.org_apache_royale_textLayout_utils_HitTestArea__rect.right;
  this.org_apache_royale_textLayout_utils_HitTestArea_addQuadrant(objects, "tr", quadrant);
  quadrant.left = this.org_apache_royale_textLayout_utils_HitTestArea__rect.left;
  quadrant.top = this.org_apache_royale_textLayout_utils_HitTestArea__ym;
  quadrant.right = this.org_apache_royale_textLayout_utils_HitTestArea__xm;
  quadrant.bottom = this.org_apache_royale_textLayout_utils_HitTestArea__rect.bottom;
  this.org_apache_royale_textLayout_utils_HitTestArea_addQuadrant(objects, "bl", quadrant);
  quadrant.left = this.org_apache_royale_textLayout_utils_HitTestArea__xm;
  quadrant.right = this.org_apache_royale_textLayout_utils_HitTestArea__rect.right;
  this.org_apache_royale_textLayout_utils_HitTestArea_addQuadrant(objects, "br", quadrant);
};


/**
 * Do a hit test. If the point is within this rectangle, determine
 * the quadrant of the point. If the quadrant is empty, the hit test
 * is true. If not, recurse into that quadrant.
 * @asparam x    the X coordinate
 * @asparam y    the Y coordinate
 * @asreturn     the owner if the hit test succeeds, null otherwise
 * @param {number} x
 * @param {number} y
 * @return {org.apache.royale.textLayout.elements.FlowElement}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.hitTest = function(x, y) {
  if (!this.org_apache_royale_textLayout_utils_HitTestArea__rect.contains(x, y))
    return null;
  if (this.org_apache_royale_textLayout_utils_HitTestArea__owner)
    return this.org_apache_royale_textLayout_utils_HitTestArea__owner;
  var /** @type {string} */ quadrantName = (y < this.org_apache_royale_textLayout_utils_HitTestArea__ym) ? "t" : "b";
  quadrantName += (x < this.org_apache_royale_textLayout_utils_HitTestArea__xm) ? "l" : "r";
  var /** @type {org.apache.royale.textLayout.utils.HitTestArea} */ quadrant = this[quadrantName];
  if (quadrant == null)
    return null;
  return quadrant.hitTest(x, y);
};


/** @asprivate
 * Add the given objects of rectangles to the given quadrant. Create an array of
 * intersecting rectangles, and, if that array if not empty, create a new
 * HitTestArea covering these rectangles, and store it into the quadrant
 * property. Note that this method is recursive.
 * @asparam arr        An object of rectangle objects.
 * @asparam propName   The name of the quadrant property (tl, tr, bl, br).
 * @asparam quadrant   The bounding rectangle for this quadrant.
 * @private
 * @param {Object} objects
 * @param {string} propName
 * @param {org.apache.royale.geom.Rectangle} quadrant
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.org_apache_royale_textLayout_utils_HitTestArea_addQuadrant = function(objects, propName, quadrant) {
  if (quadrant.isEmpty())
    return;
  var /** @type {Object} */ qrects = {};
  var /** @type {number} */ i = 0;
  var foreachiter4_target = objects;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var obj = foreachiter4_target[foreachiter4];
  {
    var /** @type {org.apache.royale.geom.Rectangle} */ intersect = obj.rect.intersection(quadrant);
    if (!intersect.isEmpty())
      qrects[i++] = {owner:obj.owner, rect:intersect};
  }}
  
  if (i > 0)
    this[propName] = new org.apache.royale.textLayout.utils.HitTestArea(qrects);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'HitTestArea', qName: 'org.apache.royale.textLayout.utils.HitTestArea', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'HitTestArea': { type: '', declaredBy: 'org.apache.royale.textLayout.utils.HitTestArea', parameters: function () { return [ 'Object', false ]; }},
        'initialize': { type: 'void', declaredBy: 'org.apache.royale.textLayout.utils.HitTestArea', parameters: function () { return [ 'Object', false ]; }},
        'hitTest': { type: 'org.apache.royale.textLayout.elements.FlowElement', declaredBy: 'org.apache.royale.textLayout.utils.HitTestArea', parameters: function () { return [ 'Number', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.utils.HitTestArea.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./HitTestArea.js.map
