/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/utils/BackgroundUtil.as
 * org.apache.royale.textLayout.utils.BackgroundUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.utils.BackgroundUtil');
/* Royale Dependency List: org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.IFactoryComposer,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.compose.ParcelList,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.container.ITextContainerManager,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITableRowElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.formats.BackgroundColor,org.apache.royale.textLayout.formats.BorderColor,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
org.apache.royale.textLayout.utils.BackgroundUtil = function() {
};


/**
 * @nocollapse
 * @param {org.apache.royale.textLayout.elements.ITextFlow} _textFlow
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock} block
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.utils.BackgroundUtil.collectTableBlock = function(_textFlow, block, controller) {
  var /** @type {org.apache.royale.textLayout.elements.IBackgroundManager} */ bb;
  var /** @type {org.apache.royale.geom.Rectangle} */ r;
  var /** @type {Array} */ cells = block.getTableCells();
  var foreachiter0_target = cells;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var cell = foreachiter0_target[foreachiter0];
  {
    if (org.apache.royale.textLayout.utils.BackgroundUtil.hasBorderOrBackground(cell)) {
      if (!_textFlow.backgroundManager)
        _textFlow.getBackgroundManager();
      bb = _textFlow.backgroundManager;
      bb.addBlockElement(cell);
      var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = cell.getRow();
      r = new org.apache.royale.geom.Rectangle(cell.x, cell.y + block.y, cell.width, row.composedHeight);
      bb.addBlockRect(cell, r, controller);
    }
  }}
  
};


/**
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableElement
 * @nocollapse
 * @param {org.apache.royale.textLayout.elements.ITextFlow} _textFlow
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} elem
 * @param {org.apache.royale.textLayout.compose.ParcelList=} _parcelList
 * @param {boolean=} tableComposeNotFromBeginning
 * @param {boolean=} tableOutOfView
 */
org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock = function(_textFlow, elem, _parcelList, tableComposeNotFromBeginning, tableOutOfView) {
  _parcelList = typeof _parcelList !== 'undefined' ? _parcelList : null;
  tableComposeNotFromBeginning = typeof tableComposeNotFromBeginning !== 'undefined' ? tableComposeNotFromBeginning : false;
  tableOutOfView = typeof tableOutOfView !== 'undefined' ? tableOutOfView : false;
  var /** @type {org.apache.royale.textLayout.elements.IBackgroundManager} */ bb;
  var /** @type {org.apache.royale.geom.Rectangle} */ r;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ composer;
  if (elem) {
    if (org.apache.royale.textLayout.utils.BackgroundUtil.hasBorderOrBackground(elem)) {
      if (!_textFlow.backgroundManager)
        _textFlow.getBackgroundManager();
      bb = _textFlow.backgroundManager;
      
      bb.addBlockElement(elem);
      composer = _textFlow.flowComposer;
      if (composer && elem.textLength > 1) {
        if (org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableElement)) {
          var /** @type {Object} */ tab = elem;
        } else {
          var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb = null;
          var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ p = elem.getFirstLeaf().getParagraph();
          if (p)
            tb = p.getTextBlock();
          while (!tb && p) {
            p = p.getNextParagraph();
            tb = p.getTextBlock();
          }
          if (org.apache.royale.utils.Language.is(composer, org.apache.royale.textLayout.compose.IFlowComposer) && composer.numLines > 0) {
            var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ firstLine = null;
            var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ lastLine = null;
            if (tb && tb.firstLine) {
              firstLine = tb.firstLine.userData;
              do {
                tb = p.getTextBlock();
                if (tb && tb.lastLine)
                  lastLine = tb.lastLine.userData;
                var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = p.getLastLeaf().getNextLeaf(elem);
                if (leaf)
                  p = leaf.getParagraph();
                else
                  p = null;
              } while (p);
            }
            if (firstLine && lastLine) {
              var /** @type {number} */ startColumnIndex = firstLine.columnIndex;
              var /** @type {org.apache.royale.textLayout.container.IContainerController} */ startController = firstLine.controller;
              var /** @type {number} */ endColumnIndex = lastLine.columnIndex;
              var /** @type {org.apache.royale.textLayout.container.IContainerController} */ endController = lastLine.controller;
              if (startController && endController) {
                if (startController == endController && endColumnIndex == startColumnIndex) {
                  r = startController.columnState.getColumnAt(startColumnIndex);
                  r.top = firstLine.y;
                  r.bottom = lastLine.y + lastLine.height;
                  bb.addBlockRect(elem, r, startController);
                } else {
                  if (startController != endController) {
                    for (var /** @type {number} */ sIdx = (startController.columnCount - 1) >> 0; sIdx > startColumnIndex; sIdx--) {
                      r = startController.columnState.getColumnAt(sIdx);
                      bb.addBlockRect(elem, r, startController);
                    }
                  }
                  if (endColumnIndex != startColumnIndex) {
                    r = startController.columnState.getColumnAt(startColumnIndex);
                    r.top = firstLine.y;
                    bb.addBlockRect(elem, r, startController);
                  }
                  var /** @type {boolean} */ passFirstController = false;
                  for (var /** @type {number} */ aidx = 0; aidx < composer.numControllers; aidx++) {
                    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ cc = composer.getControllerAt((aidx) >> 0);
                    if (passFirstController) {
                      for (var /** @type {number} */ cidx = 0; cidx < cc.columnCount; cidx++) {
                        r = cc.columnState.getColumnAt(cidx);
                        bb.addBlockRect(elem, r, cc);
                      }
                    }
                    if (cc == endController)
                      break;
                    if (cc == startController)
                      passFirstController = true;
                  }
                  if (startController != endController) {
                    for (var /** @type {number} */ eIdx = 0; eIdx < endColumnIndex; eIdx++) {
                      r = endController.columnState.getColumnAt(eIdx);
                      bb.addBlockRect(elem, r, endController);
                    }
                  }
                  r = endController.columnState.getColumnAt(endColumnIndex);
                  r.bottom = lastLine.y + lastLine.height;
                  bb.addBlockRect(elem, r, endController);
                }
              }
            }
          } else if (org.apache.royale.utils.Language.is(composer, org.apache.royale.textLayout.compose.IFactoryComposer)) {
            var /** @type {org.apache.royale.text.engine.ITextLine} */ fLine = null;
            var /** @type {org.apache.royale.text.engine.ITextLine} */ lLine = null;
            if (tb && tb.firstLine) {
              fLine = tb.firstLine;
              do {
                tb = p.getTextBlock();
                if (tb && tb.lastLine)
                  lLine = tb.lastLine;
                var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leafF = p.getLastLeaf().getNextLeaf(elem);
                if (leafF)
                  p = leafF.getParagraph();
                else
                  p = null;
              } while (p);
            }
            if (fLine && lLine) {
              if (composer.hasOwnProperty("tcm")) {
                var /** @type {org.apache.royale.textLayout.container.ITextContainerManager} */ tcm = composer.tcm;
                if (tcm) {
                  r = new org.apache.royale.geom.Rectangle(0, fLine.y - fLine.height, tcm.compositionWidth, lLine.y - fLine.y + fLine.height);
                  bb.addBlockRect(elem, r, composer.getControllerAt(0));
                }
              }
            }
          }
        }
      }
    }
  }
};


/**
 * @nocollapse
 * @param {org.apache.royale.textLayout.elements.IFlowElement} elem
 * @return {boolean}
 */
org.apache.royale.textLayout.utils.BackgroundUtil.hasBorderOrBackground = function(elem) {
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ format = elem.computedFormat;
  if (format.backgroundColor != org.apache.royale.textLayout.formats.BackgroundColor.TRANSPARENT)
    return true;
  if (format.borderLeftWidth != 0 || format.borderRightWidth != 0 || format.borderTopWidth != 0 || format.borderBottomWidth != 0)
    if (format.borderLeftColor != org.apache.royale.textLayout.formats.BorderColor.TRANSPARENT || format.borderRightColor != org.apache.royale.textLayout.formats.BorderColor.TRANSPARENT || format.borderTopColor != org.apache.royale.textLayout.formats.BorderColor.TRANSPARENT || format.borderBottomColor != org.apache.royale.textLayout.formats.BorderColor.TRANSPARENT)
      return true;
  return false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.utils.BackgroundUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BackgroundUtil', qName: 'org.apache.royale.textLayout.utils.BackgroundUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.utils.BackgroundUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|collectTableBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.utils.BackgroundUtil', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', false ,'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        '|collectBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.utils.BackgroundUtil', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.compose.ParcelList', true ,'Boolean', true ,'Boolean', true ]; }},
        '|hasBorderOrBackground': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.utils.BackgroundUtil', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.utils.BackgroundUtil.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./BackgroundUtil.js.map
