/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/utils/CreateTLFUtil.as
 * org.apache.royale.textLayout.utils.CreateTLFUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.utils.CreateTLFUtil');
/* Royale Dependency List: org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.property.Property,org.apache.royale.textLayout.property.PropertyUtil,org.apache.royale.utils.ObjectUtil,XML*/




/**
 * @constructor
 */
org.apache.royale.textLayout.utils.CreateTLFUtil = function() {
};


/**
 * @nocollapse
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} localStyles
 * @param {org.apache.royale.textLayout.formats.TextLayoutFormat} parentPrototype
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.utils.CreateTLFUtil.createTLF = function(localStyles, parentPrototype) {
  var /** @type {boolean} */ parentPrototypeUsable = true;
  var /** @type {boolean} */ hasStylesSet = false;
  var /** @type {Object} */ parentStylesPrototype;
  if (parentPrototype) {
    parentStylesPrototype = parentPrototype.getStyles();
    if (parentStylesPrototype.hasNonInheritedStyles !== undefined) {
      if (parentStylesPrototype.hasNonInheritedStyles === true) {
        var /** @type {Object} */ noInheritParentStylesPrototype = org.apache.royale.textLayout.property.PropertyUtil.createObjectWithPrototype(parentStylesPrototype);
        org.apache.royale.textLayout.formats.TextLayoutFormat.resetModifiedNoninheritedStyles(noInheritParentStylesPrototype);
        parentStylesPrototype.hasNonInheritedStyles = noInheritParentStylesPrototype;
        parentStylesPrototype = noInheritParentStylesPrototype;
      } else {
        parentStylesPrototype = parentStylesPrototype.hasNonInheritedStyles;
      }
      parentPrototypeUsable = false;
    }
  } else {
    parentPrototype = org.apache.royale.textLayout.formats.TextLayoutFormat.defaultFormat;
    parentStylesPrototype = parentPrototype.getStyles();
  }
  var /** @type {Object} */ stylesObject = org.apache.royale.textLayout.property.PropertyUtil.createObjectWithPrototype(parentStylesPrototype);
  var /** @type {string} */ key;
  var /** @type {*} */ val;
  var /** @type {org.apache.royale.textLayout.property.Property} */ prop;
  var /** @type {boolean} */ hasNonInheritedStyles = false;
  if (localStyles != null) {
    var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ lvh = localStyles;
    if (lvh) {
      var /** @type {Object} */ coreStyles = lvh.getStyles();
      for (key in coreStyles) {
        val = coreStyles[key];
        if (val == org.apache.royale.textLayout.formats.FormatValue.INHERIT) {
          if (parentPrototype) {
            prop = org.apache.royale.textLayout.formats.TextLayoutFormat.description[key];
            if (prop && !prop.inherited) {
              val = parentPrototype[key];
              if (stylesObject[key] != val) {
                stylesObject[key] = val;
                hasNonInheritedStyles = true;
                hasStylesSet = true;
              }
            }
          }
        } else {
          if (stylesObject[key] != val) {
            prop = org.apache.royale.textLayout.formats.TextLayoutFormat.description[key];
            if (prop && !prop.inherited) {
              hasNonInheritedStyles = true;
            }
            stylesObject[key] = val;
            hasStylesSet = true;
          }
        }
      }
    } else {
      var foreachiter0_target = org.apache.royale.textLayout.formats.TextLayoutFormat.description;
      for (var foreachiter0 in foreachiter0_target) 
      {
      prop = foreachiter0_target[foreachiter0];
      {
        key = prop.name;
        val = localStyles[key];
        if (val !== undefined) {
          if (val == org.apache.royale.textLayout.formats.FormatValue.INHERIT) {
            if (parentPrototype) {
              if (!prop.inherited) {
                val = parentPrototype[key];
                if (stylesObject[key] != val) {
                  stylesObject[key] = val;
                  hasNonInheritedStyles = true;
                  hasStylesSet = true;
                }
              }
            }
          } else {
            if (stylesObject[key] != val) {
              if (!prop.inherited) {
                hasNonInheritedStyles = true;
              }
              stylesObject[key] = val;
              hasStylesSet = true;
            }
          }
        }
      }}
      
    }
  }
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ rslt;
  if (!hasStylesSet) {
    
    if (parentPrototypeUsable)
      return parentPrototype;
    rslt = new org.apache.royale.textLayout.formats.TextLayoutFormat();
    rslt.setStyles(stylesObject, true);
    return rslt;
  }
  if (hasNonInheritedStyles) {
    
    stylesObject.hasNonInheritedStyles = true;
    org.apache.royale.utils.ObjectUtil.addNonEnumerableProperty(stylesObject, "hasNonInheritedStyles", true);
  } else if (stylesObject.hasNonInheritedStyles !== undefined) {
    org.apache.royale.utils.ObjectUtil.addNonEnumerableProperty(stylesObject, "hasNonInheritedStyles", undefined);
  }
  rslt = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  rslt.setStyles(stylesObject, false);
  return rslt;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.utils.CreateTLFUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CreateTLFUtil', qName: 'org.apache.royale.textLayout.utils.CreateTLFUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.utils.CreateTLFUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|createTLF': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.utils.CreateTLFUtil', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.formats.TextLayoutFormat', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.utils.CreateTLFUtil.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CreateTLFUtil.js.map
