/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/container/ColumnState.as
 * org.apache.royale.textLayout.container.ColumnState
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.container.ColumnState');
/* Royale Dependency List: org.apache.royale.geom.Rectangle,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.elements.TableCellElement,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.LineBreak,org.apache.royale.textLayout.utils.Twips,XML*/




/**
 * Constructor function - creates a ColumnState object.
 *
 * If the values of <code>controller.compositionWidth</code> and <code>controller.compositionHeight</code> equal
 * <code>NaN</code> (not a number), the constructor measures the container's contents to determine the actual 
 * composition width and height that feed into ColumnState.
 *
 * Use the constants defined by the <code>org.apache.royale.textLayout.formats.BlockProgression</code> class to 
 * specify the value of the <code>blockProgression</code> parameter. Use the constants defined by
 * <code>org.apache.royale.textLayout.formats.Direction</code> to specify the value of the <code>columnDirection</code> 
 * parameter.
 *
 * @asparam blockProgression The direction of lines for the textflow, either BlockProgression.TB (top-to-bottom) or 
 * 		BlockProgression.RL (right-to-left).
 * @asparam columnDirection The direction of column layout for the text flow, either Direction.RTL (right-to-left) or 
 * 		Direction.LTR (left-to-right).
 * @asparam controller A ContainerController instance whose attributes are used to calculate the column values.
 * @asparam compositionWidth The horizontal extent, in pixels, allowed for text inside the container.
 * @asparam compositionHeight The vertical extent, in pixels, allowed for text inside the container.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.textLayout.formats.BlockProgression BlockProgression
 * @see org.apache.royale.textLayout.formats.Direction Direction
 * @constructor
 * @param {string} blockProgression
 * @param {string} columnDirection
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} compositionWidth
 * @param {number} compositionHeight
 */
org.apache.royale.textLayout.container.ColumnState = function(blockProgression, columnDirection, controller, compositionWidth, compositionHeight) {
  this.org_apache_royale_textLayout_container_ColumnState__inputsChanged = true;
  this.org_apache_royale_textLayout_container_ColumnState__columnCount = 0;
  if (blockProgression != null) {
    this.updateInputs(blockProgression, columnDirection, controller, compositionWidth, compositionHeight);
    this.computeColumns();
  }
};


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__inputsChanged;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__blockProgression;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__columnDirection;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__paddingTop;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__paddingBottom;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__paddingLeft;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__paddingRight;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__compositionWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__compositionHeight;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__forceSingleColumn;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__inputColumnWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__inputColumnGap;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__inputColumnCount;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__columnWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__columnCount = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__columnGap;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__inset;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__columnArray;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__tableCellArray;


/**
 * @private
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.org_apache_royale_textLayout_container_ColumnState__singleColumn;


/** 
 * Returns the area that a column takes within the container. Allows you to access the area for a 
 * specific column.
 *
 * @asparam index The relative position of the column among all columns in the container, with the first
 * 	column at position 0.
 *
 * @asreturn The area of the specified column.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.getColumnAt = function(index) {
  return this.org_apache_royale_textLayout_container_ColumnState__columnCount == 1 ? this.org_apache_royale_textLayout_container_ColumnState__singleColumn : this.org_apache_royale_textLayout_container_ColumnState__columnArray[index];
};


/**
 * @param {number} index
 * @return {org.apache.royale.textLayout.elements.TableCellElement}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.getCellAt = function(index) {
  return this.org_apache_royale_textLayout_container_ColumnState__tableCellArray[index];
};


/**
 * @param {org.apache.royale.textLayout.elements.TableCellElement} cell
 */
org.apache.royale.textLayout.container.ColumnState.prototype.pushTableCell = function(cell) {
  if (this.org_apache_royale_textLayout_container_ColumnState__tableCellArray == null)
    this.org_apache_royale_textLayout_container_ColumnState__tableCellArray = new Array();
  this.org_apache_royale_textLayout_container_ColumnState__tableCellArray.push(cell);
};


/**
 */
org.apache.royale.textLayout.container.ColumnState.prototype.clearCellList = function() {
  this.org_apache_royale_textLayout_container_ColumnState__tableCellArray = null;
};


/** Recalculate actual column settings based on attributes and width
 * from the container. Call this after either the attributes or the
 * width has been changed to get the new values.
 *
 * @asparam newBlockProgression block progression for the textflow
 * @asparam newColumnDirection column layout direction for the textflow
 * @asparam containerAttr		Formatting attributes from the container
 * @asparam containerWidth		Width of the container
 * @asreturn Boolean			true if the actual column settings have changed
 * @asprivate 
 * @param {string} newBlockProgression
 * @param {string} newColumnDirection
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} newCompositionWidth
 * @param {number} newCompositionHeight
 */
org.apache.royale.textLayout.container.ColumnState.prototype.updateInputs = function(newBlockProgression, newColumnDirection, controller, newCompositionWidth, newCompositionHeight) {
  var /** @type {number} */ newPaddingTop = controller.getTotalPaddingTop();
  var /** @type {number} */ newPaddingBottom = controller.getTotalPaddingBottom();
  var /** @type {number} */ newPaddingLeft = controller.getTotalPaddingLeft();
  var /** @type {number} */ newPaddingRight = controller.getTotalPaddingRight();
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ containerAttr = controller.computedFormat;
  var /** @type {Object} */ newColumnWidth = containerAttr.columnWidth;
  var /** @type {number} */ newColumnGap = Number(containerAttr.columnGap);
  var /** @type {Object} */ newColumnCount = containerAttr.columnCount;
  var /** @type {boolean} */ newForceSingleColumn = ((containerAttr.columnCount == org.apache.royale.textLayout.formats.FormatValue.AUTO && (containerAttr.columnWidth == org.apache.royale.textLayout.formats.FormatValue.AUTO || Number(containerAttr.columnWidth) == 0)) || controller.rootElement.computedFormat.lineBreak == org.apache.royale.textLayout.formats.LineBreak.EXPLICIT) || isNaN(newBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? newCompositionHeight : newCompositionWidth);
  if (this.org_apache_royale_textLayout_container_ColumnState__inputsChanged == false)
    this.org_apache_royale_textLayout_container_ColumnState__inputsChanged = newCompositionWidth != this.org_apache_royale_textLayout_container_ColumnState__compositionHeight || newCompositionHeight != this.org_apache_royale_textLayout_container_ColumnState__compositionHeight || this.org_apache_royale_textLayout_container_ColumnState__paddingTop != newPaddingTop || this.org_apache_royale_textLayout_container_ColumnState__paddingBottom != newPaddingBottom || this.org_apache_royale_textLayout_container_ColumnState__paddingLeft != newPaddingLeft || this.org_apache_royale_textLayout_container_ColumnState__paddingRight != newPaddingRight || this.org_apache_royale_textLayout_container_ColumnState__blockProgression != this.org_apache_royale_textLayout_container_ColumnState__blockProgression || this.org_apache_royale_textLayout_container_ColumnState__columnDirection != newColumnDirection || this.org_apache_royale_textLayout_container_ColumnState__forceSingleColumn != newForceSingleColumn || this.org_apache_royale_textLayout_container_ColumnState__inputColumnWidth != newColumnWidth || this.org_apache_royale_textLayout_container_ColumnState__inputColumnGap != newColumnGap || this.org_apache_royale_textLayout_container_ColumnState__inputColumnCount != newColumnCount;
  if (this.org_apache_royale_textLayout_container_ColumnState__inputsChanged) {
    this.org_apache_royale_textLayout_container_ColumnState__blockProgression = newBlockProgression;
    this.org_apache_royale_textLayout_container_ColumnState__columnDirection = newColumnDirection;
    this.org_apache_royale_textLayout_container_ColumnState__paddingTop = newPaddingTop;
    this.org_apache_royale_textLayout_container_ColumnState__paddingBottom = newPaddingBottom;
    this.org_apache_royale_textLayout_container_ColumnState__paddingLeft = newPaddingLeft;
    this.org_apache_royale_textLayout_container_ColumnState__paddingRight = newPaddingRight;
    this.org_apache_royale_textLayout_container_ColumnState__compositionWidth = newCompositionWidth;
    this.org_apache_royale_textLayout_container_ColumnState__compositionHeight = newCompositionHeight;
    this.org_apache_royale_textLayout_container_ColumnState__forceSingleColumn = newForceSingleColumn;
    this.org_apache_royale_textLayout_container_ColumnState__inputColumnWidth = newColumnWidth;
    this.org_apache_royale_textLayout_container_ColumnState__inputColumnGap = newColumnGap;
    this.org_apache_royale_textLayout_container_ColumnState__inputColumnCount = newColumnCount;
  }
};


/** Compute the actual columns based on the input values @asprivate 
 */
org.apache.royale.textLayout.container.ColumnState.prototype.computeColumns = function() {
  var /** @type {number} */ newColumnCount = 0;
  if (!this.org_apache_royale_textLayout_container_ColumnState__inputsChanged)
    return;
  var /** @type {number} */ newColumnGap;
  //var /** @type {number} */ newColumnCount = 0;
  var /** @type {number} */ newColumnWidth;
  var /** @type {number} */ totalColumnWidth = this.org_apache_royale_textLayout_container_ColumnState__blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? this.org_apache_royale_textLayout_container_ColumnState__compositionHeight : this.org_apache_royale_textLayout_container_ColumnState__compositionWidth;
  var /** @type {number} */ newColumnInset = this.org_apache_royale_textLayout_container_ColumnState__blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? this.org_apache_royale_textLayout_container_ColumnState__paddingTop + this.org_apache_royale_textLayout_container_ColumnState__paddingBottom : this.org_apache_royale_textLayout_container_ColumnState__paddingLeft + this.org_apache_royale_textLayout_container_ColumnState__paddingRight;
  totalColumnWidth = (totalColumnWidth > newColumnInset && !isNaN(totalColumnWidth)) ? totalColumnWidth - newColumnInset : 0;
  if (this.org_apache_royale_textLayout_container_ColumnState__forceSingleColumn) {
    newColumnCount = 1;
    newColumnWidth = totalColumnWidth;
    newColumnGap = 0;
  } else {
    newColumnGap = this.org_apache_royale_textLayout_container_ColumnState__inputColumnGap;
    if (this.org_apache_royale_textLayout_container_ColumnState__inputColumnWidth == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
      newColumnCount = (Number(this.org_apache_royale_textLayout_container_ColumnState__inputColumnCount)) >> 0;
      if ((newColumnCount - 1) * newColumnGap < totalColumnWidth) {
        newColumnWidth = (totalColumnWidth - (newColumnCount - 1) * newColumnGap) / newColumnCount;
      } else if (newColumnGap > totalColumnWidth) {
        newColumnCount = 1;
        newColumnWidth = totalColumnWidth;
        newColumnGap = 0;
      } else {
        newColumnCount = (Math.floor(totalColumnWidth / newColumnGap)) >> 0;
        newColumnWidth = (totalColumnWidth - (newColumnCount - 1) * newColumnGap) / newColumnCount;
      }
    } else if (this.org_apache_royale_textLayout_container_ColumnState__inputColumnCount == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
      newColumnWidth = Number(this.org_apache_royale_textLayout_container_ColumnState__inputColumnWidth);
      if (newColumnWidth >= totalColumnWidth) {
        newColumnCount = 1;
        newColumnWidth = totalColumnWidth;
        newColumnGap = 0;
      } else {
        newColumnCount = (Math.floor((totalColumnWidth + newColumnGap) / (newColumnWidth + newColumnGap))) >> 0;
        newColumnWidth = ((totalColumnWidth + newColumnGap) / newColumnCount) - newColumnGap;
      }
    } else {
      newColumnCount = (Number(this.org_apache_royale_textLayout_container_ColumnState__inputColumnCount)) >> 0;
      newColumnWidth = Number(this.org_apache_royale_textLayout_container_ColumnState__inputColumnWidth);
      if (newColumnCount * newColumnWidth + (newColumnCount - 1) * newColumnGap <= totalColumnWidth) {
      } else if (newColumnWidth >= totalColumnWidth) {
        newColumnCount = 1;
        newColumnGap = 0;
      } else {
        newColumnCount = (Math.floor((totalColumnWidth + newColumnGap) / (newColumnWidth + newColumnGap))) >> 0;
        newColumnWidth = ((totalColumnWidth + newColumnGap) / newColumnCount) - newColumnGap;
      }
    }
  }
  this.org_apache_royale_textLayout_container_ColumnState__columnWidth = newColumnWidth;
  this.org_apache_royale_textLayout_container_ColumnState__columnCount = newColumnCount;
  this.org_apache_royale_textLayout_container_ColumnState__columnGap = newColumnGap;
  this.org_apache_royale_textLayout_container_ColumnState__inset = newColumnInset;
  var /** @type {number} */ xPos;
  var /** @type {number} */ yPos;
  var /** @type {number} */ delX;
  var /** @type {number} */ delY;
  var /** @type {number} */ colH;
  var /** @type {number} */ colW;
  var /** @type {number} */ insetHeight;
  if (this.org_apache_royale_textLayout_container_ColumnState__blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    if (this.org_apache_royale_textLayout_container_ColumnState__columnDirection == org.apache.royale.textLayout.formats.Direction.LTR) {
      xPos = this.org_apache_royale_textLayout_container_ColumnState__paddingLeft;
      delX = this.org_apache_royale_textLayout_container_ColumnState__columnWidth + this.org_apache_royale_textLayout_container_ColumnState__columnGap;
      colW = this.org_apache_royale_textLayout_container_ColumnState__columnWidth;
    } else {
      
      xPos = isNaN(this.org_apache_royale_textLayout_container_ColumnState__compositionWidth) ? this.org_apache_royale_textLayout_container_ColumnState__paddingLeft : this.org_apache_royale_textLayout_container_ColumnState__compositionWidth - this.org_apache_royale_textLayout_container_ColumnState__paddingRight - this.org_apache_royale_textLayout_container_ColumnState__columnWidth;
      delX = -(this.org_apache_royale_textLayout_container_ColumnState__columnWidth + this.org_apache_royale_textLayout_container_ColumnState__columnGap);
      colW = this.org_apache_royale_textLayout_container_ColumnState__columnWidth;
    }
    yPos = this.org_apache_royale_textLayout_container_ColumnState__paddingTop;
    delY = 0;
    insetHeight = this.org_apache_royale_textLayout_container_ColumnState__paddingTop + this.org_apache_royale_textLayout_container_ColumnState__paddingBottom;
    colH = (this.org_apache_royale_textLayout_container_ColumnState__compositionHeight > insetHeight && !isNaN(this.org_apache_royale_textLayout_container_ColumnState__compositionHeight)) ? (this.org_apache_royale_textLayout_container_ColumnState__compositionHeight - insetHeight) : 0;
  } else if (this.org_apache_royale_textLayout_container_ColumnState__blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    xPos = isNaN(this.org_apache_royale_textLayout_container_ColumnState__compositionWidth) ? -this.org_apache_royale_textLayout_container_ColumnState__paddingRight : this.org_apache_royale_textLayout_container_ColumnState__paddingLeft - this.org_apache_royale_textLayout_container_ColumnState__compositionWidth;
    yPos = this.org_apache_royale_textLayout_container_ColumnState__paddingTop;
    delX = 0;
    delY = this.org_apache_royale_textLayout_container_ColumnState__columnWidth + this.org_apache_royale_textLayout_container_ColumnState__columnGap;
    insetHeight = this.org_apache_royale_textLayout_container_ColumnState__paddingLeft + this.org_apache_royale_textLayout_container_ColumnState__paddingRight;
    colW = (this.org_apache_royale_textLayout_container_ColumnState__compositionWidth > insetHeight) ? (this.org_apache_royale_textLayout_container_ColumnState__compositionWidth - insetHeight) : 0;
    colH = this.org_apache_royale_textLayout_container_ColumnState__columnWidth;
  }
  if (colW == 0) {
    colW = org.apache.royale.textLayout.utils.Twips.ONE_TWIP;
    if (this.org_apache_royale_textLayout_container_ColumnState__blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL)
      xPos -= colW;
  }
  if (colH == 0)
    colH = org.apache.royale.textLayout.utils.Twips.ONE_TWIP;
  if (this.org_apache_royale_textLayout_container_ColumnState__columnCount == 1) {
    this.org_apache_royale_textLayout_container_ColumnState__singleColumn = new org.apache.royale.geom.Rectangle(xPos, yPos, colW, colH);
    this.org_apache_royale_textLayout_container_ColumnState__columnArray = null;
  } else if (this.org_apache_royale_textLayout_container_ColumnState__columnCount == 0) {
    this.org_apache_royale_textLayout_container_ColumnState__singleColumn = null;
    this.org_apache_royale_textLayout_container_ColumnState__columnArray = null;
  } else {
    if (this.org_apache_royale_textLayout_container_ColumnState__columnArray)
      this.org_apache_royale_textLayout_container_ColumnState__columnArray.splice(0);
    else
      this.org_apache_royale_textLayout_container_ColumnState__columnArray = new Array();
    for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_container_ColumnState__columnCount; ++i) {
      this.org_apache_royale_textLayout_container_ColumnState__columnArray.push(new org.apache.royale.geom.Rectangle(xPos, yPos, colW, colH));
      xPos += delX;
      yPos += delY;
    }
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.columnWidth;


org.apache.royale.textLayout.container.ColumnState.prototype.get__columnWidth = function() {
  return this.org_apache_royale_textLayout_container_ColumnState__columnWidth;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.columnCount;


org.apache.royale.textLayout.container.ColumnState.prototype.get__columnCount = function() {
  return this.org_apache_royale_textLayout_container_ColumnState__columnCount;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.cellCount;


org.apache.royale.textLayout.container.ColumnState.prototype.get__cellCount = function() {
  if (this.org_apache_royale_textLayout_container_ColumnState__tableCellArray)
    return (this.org_apache_royale_textLayout_container_ColumnState__tableCellArray.length) >> 0;
  return -1;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.columnGap;


org.apache.royale.textLayout.container.ColumnState.prototype.get__columnGap = function() {
  return this.org_apache_royale_textLayout_container_ColumnState__columnGap;
};


Object.defineProperties(org.apache.royale.textLayout.container.ColumnState.prototype, /** @lends {org.apache.royale.textLayout.container.ColumnState.prototype} */ {
/**
 * @type {number}
 */
columnWidth: {
get: org.apache.royale.textLayout.container.ColumnState.prototype.get__columnWidth},
/**
 * @type {number}
 */
columnCount: {
get: org.apache.royale.textLayout.container.ColumnState.prototype.get__columnCount},
/**
 * @type {number}
 */
cellCount: {
get: org.apache.royale.textLayout.container.ColumnState.prototype.get__cellCount},
/**
 * @type {number}
 */
columnGap: {
get: org.apache.royale.textLayout.container.ColumnState.prototype.get__columnGap}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ColumnState', qName: 'org.apache.royale.textLayout.container.ColumnState', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'columnWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ColumnState'},
        'columnCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ColumnState'},
        'cellCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ColumnState'},
        'columnGap': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ColumnState'}
      };
    },
    methods: function () {
      return {
        'ColumnState': { type: '', declaredBy: 'org.apache.royale.textLayout.container.ColumnState', parameters: function () { return [ 'String', false ,'String', false ,'org.apache.royale.textLayout.container.IContainerController', false ,'Number', false ,'Number', false ]; }},
        'getColumnAt': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.container.ColumnState', parameters: function () { return [ 'int', false ]; }},
        'getCellAt': { type: 'org.apache.royale.textLayout.elements.TableCellElement', declaredBy: 'org.apache.royale.textLayout.container.ColumnState', parameters: function () { return [ 'int', false ]; }},
        'pushTableCell': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ColumnState', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TableCellElement', false ]; }},
        'clearCellList': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ColumnState'},
        'updateInputs': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ColumnState', parameters: function () { return [ 'String', false ,'String', false ,'org.apache.royale.textLayout.container.IContainerController', false ,'Number', false ,'Number', false ]; }},
        'computeColumns': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ColumnState'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.ColumnState.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ColumnState.js.map
