/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/container/ContainerController.as
 * org.apache.royale.textLayout.container.ContainerController
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.container.ContainerController');
/* Royale Dependency List: org.apache.royale.core.IChild,org.apache.royale.core.IParentIUIBase,org.apache.royale.core.IUIBase,org.apache.royale.events.Event,org.apache.royale.events.IEventDispatcher,org.apache.royale.events.KeyboardEvent,org.apache.royale.geom.Matrix,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.graphics.ICompoundGraphic,org.apache.royale.graphics.IDrawable,org.apache.royale.graphics.IRect,org.apache.royale.graphics.SolidColor,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.events.IMEEvent,org.apache.royale.text.events.TextEvent,org.apache.royale.textLayout.compose.FloatCompositionData,org.apache.royale.textLayout.compose.FlowDamageType,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.compose.TextLineRecycler,org.apache.royale.textLayout.container.ColumnState,org.apache.royale.textLayout.container.ScrollPolicy,org.apache.royale.textLayout.dummy.BoundsUtil,org.apache.royale.textLayout.dummy.ContextMenu,org.apache.royale.textLayout.edit.EditingMode,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.edit.SelectionFormat,org.apache.royale.textLayout.elements.CellCoordinates,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IContainerFormattedElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IInlineGraphicElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableRowElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TableBlockContainer,org.apache.royale.textLayout.events.ActivateEvent,org.apache.royale.textLayout.events.ContextMenuEvent,org.apache.royale.textLayout.events.EditEvent,org.apache.royale.textLayout.events.FlowElementMouseEventManager,org.apache.royale.textLayout.events.FocusEvent,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.events.ScrollEvent,org.apache.royale.textLayout.events.ScrollEventDirection,org.apache.royale.textLayout.events.SelectionEvent,org.apache.royale.textLayout.events.TextLayoutEvent,org.apache.royale.textLayout.events.UpdateCompleteEvent,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Float,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.utils.CreateTLFUtil,org.apache.royale.textLayout.utils.Twips,org.apache.royale.utils.DisplayUtils,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.PointUtils,org.apache.royale.utils.Timer,org.apache.royale.utils.Language,XML*/
goog.provide('org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent');

goog.require('org.apache.royale.events.MouseEvent');
goog.require('org.apache.royale.textLayout.container.IContainerController');
goog.require('org.apache.royale.textLayout.container.ISandboxSupport');
goog.require('org.apache.royale.textLayout.edit.IInteractionEventHandler');
goog.require('org.apache.royale.textLayout.formats.TextLayoutFormatBase');



/** 
 * Constructor - creates a ContainerController instance. The ContainerController has a default <code>compositionWidth</code>
 * and <code>compositionHeight</code> so that some text appears in the container if you don't specify its width
 * height.
 *
 * @asparam container The DisplayObjectContainer in which to manage the text lines.
 * @asparam compositionWidth The initial width for composing text in the container.
 * @asparam compositionHeight The initial height for composing text in the container.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.formats.TextLayoutFormatBase}
 * @implements {org.apache.royale.textLayout.edit.IInteractionEventHandler}
 * @implements {org.apache.royale.textLayout.container.ISandboxSupport}
 * @implements {org.apache.royale.textLayout.container.IContainerController}
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {number=} compositionWidth
 * @param {number=} compositionHeight
 */
org.apache.royale.textLayout.container.ContainerController = function(container, compositionWidth, compositionHeight) {
  org.apache.royale.textLayout.container.ContainerController.base(this, 'constructor');
  compositionWidth = typeof compositionWidth !== 'undefined' ? compositionWidth : 100;
  compositionHeight = typeof compositionHeight !== 'undefined' ? compositionHeight : 100;
  
  this.org_apache_royale_textLayout_container_ContainerController__interactiveObjects = new org.apache.royale.utils.ObjectMap(true);
  this.org_apache_royale_textLayout_container_ContainerController__oldInteractiveObjects = new Array();
  this.org_apache_royale_textLayout_container_ContainerController_initialize(container, compositionWidth, compositionHeight);
};
goog.inherits(org.apache.royale.textLayout.container.ContainerController, org.apache.royale.textLayout.formats.TextLayoutFormatBase);


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__textFlowCache;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__rootElement;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__absoluteStart = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__textLength = 0;


/**
 * @private
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__container;


/**
 * @private
 * @type {org.apache.royale.textLayout.events.FlowElementMouseEventManager}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__mouseEventManager;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_buttonDown;


/**
 * @protected
 * @type {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.container.ContainerController.prototype._computedFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.container.ColumnState}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__columnState;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__compositionWidth = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__compositionHeight = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__measureWidth;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__measureHeight;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__contentLeft;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__contentTop;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__contentWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__contentHeight;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__finalParcelStart = 0;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__xScroll;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__yScroll;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__minListenersAttached = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__allListenersAttached = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__selectListenersAttached = false;


/**
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype._mouseWheelListenerAttached = false;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__shapesInvalid = false;


/**
 * @private
 * @type {org.apache.royale.core.IUIBase}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__backgroundShape;


/**
 * @private
 * @type {org.apache.royale.utils.Timer}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__scrollTimer = null;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype._hasScrollRect;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__linesInView;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__updateStart = 0;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__composedFloats;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__floatsInContainer;


/**
 * @private
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__interactiveObjects;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__oldInteractiveObjects;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__shapeChildren;


/**
 * @private
 * @type {org.apache.royale.events.IEventDispatcher}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__containerRoot;


/**
 * @private
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {number} compositionWidth
 * @param {number} compositionHeight
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_initialize = function(container, compositionWidth, compositionHeight) {
  this.org_apache_royale_textLayout_container_ContainerController__container = container;
  this.org_apache_royale_textLayout_container_ContainerController__containerRoot = null;
  this.org_apache_royale_textLayout_container_ContainerController__textLength = 0;
  this.org_apache_royale_textLayout_container_ContainerController__absoluteStart = -1;
  this.org_apache_royale_textLayout_container_ContainerController__columnState = new org.apache.royale.textLayout.container.ColumnState(null, null, null, 0, 0);
  this.org_apache_royale_textLayout_container_ContainerController__xScroll = this.org_apache_royale_textLayout_container_ContainerController__yScroll = 0;
  this.org_apache_royale_textLayout_container_ContainerController__contentWidth = this.org_apache_royale_textLayout_container_ContainerController__contentHeight = 0;
  this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength = 0;
  this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy = this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy = String(org.apache.royale.textLayout.container.ScrollPolicy.scrollPolicyPropertyDefinition.defaultValue);
  this._hasScrollRect = false;
  
  this.org_apache_royale_textLayout_container_ContainerController__shapeChildren = [];
  this.org_apache_royale_textLayout_container_ContainerController__linesInView = [];
  this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView = [];
  this.setCompositionSize(compositionWidth, compositionHeight);
  this.format = org.apache.royale.textLayout.container.ContainerController.containerControllerInitialFormat;
};


/** @asprivate  Determine containerRoot in case the stage is not accessible. Normally the root is the stage. 
 * @return {org.apache.royale.events.IEventDispatcher}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getContainerRoot = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__containerRoot == null && this.org_apache_royale_textLayout_container_ContainerController__container) {
    this.org_apache_royale_textLayout_container_ContainerController__containerRoot = this.org_apache_royale_textLayout_container_ContainerController__container.topMostEventDispatcher;
  }
  return this.org_apache_royale_textLayout_container_ContainerController__containerRoot;
};


/** 
 * Sets the width and height allowed for text in the container. Width and height can be specified in pixels or <code>NaN</code> can be used for either value.  <code>NaN</code> indicates measure that value. 
 * This can be used to find the widest line and/or the total height of all the content.  When NaN is specified as the width lines are broken with a maximum width of <code>ITextLine.MAX_LINE_WIDTH</code>. 
 * When <code>NaN</code> is specified as the height the container is assumed to have unlimited height.  The actual measured values can be read back in <code>getContentBounds</code>.  
 * When the computed <code>blockProgression</code> property of <code>TextFlow</code>
 * is <code>BlockProgression.RL</code> the meanings of width and height are exchanged.
 *
 * @asparam w The width in pixels that's available for text in the container.  <code>NaN</code> indicates no specified width.  
 * @asparam h The height in pixels that's available for text in the container.   <code>NaN</code> indicates no specified height.  
 *
 * 
 * @see org.apache.royale.text.engine.ITextLine#MAX_LINE_WIDTH
 * @see org.apache.royale.textLayout.formats.BlockProgression
 * @see #getContentBounds()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} w
 * @param {number} h
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setCompositionSize = function(w, h) {
  var /** @type {boolean} */ widthChanged = !(this.org_apache_royale_textLayout_container_ContainerController__compositionWidth == w || (isNaN(this.org_apache_royale_textLayout_container_ContainerController__compositionWidth) && isNaN(w)));
  var /** @type {boolean} */ heightChanged = !(this.org_apache_royale_textLayout_container_ContainerController__compositionHeight == h || (isNaN(this.org_apache_royale_textLayout_container_ContainerController__compositionHeight) && isNaN(h)));
  if (widthChanged || heightChanged) {
    this.org_apache_royale_textLayout_container_ContainerController__compositionHeight = h;
    this.org_apache_royale_textLayout_container_ContainerController__measureHeight = isNaN(this.org_apache_royale_textLayout_container_ContainerController__compositionHeight);
    this.org_apache_royale_textLayout_container_ContainerController__compositionWidth = w;
    this.org_apache_royale_textLayout_container_ContainerController__measureWidth = isNaN(this.org_apache_royale_textLayout_container_ContainerController__compositionWidth);
    if (this._computedFormat)
      this.resetColumnState();
    if (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB ? widthChanged : heightChanged) {
      if (this.textFlow && this.org_apache_royale_textLayout_container_ContainerController__textLength)
        this.textFlow.damage(this.absoluteStart, this.org_apache_royale_textLayout_container_ContainerController__textLength, "invalid", false);
    }
    else
      this.invalidateContents();
    this.attachTransparentBackgroundForHit(false);
  }
};


/** Protected method used when updating the rootElement. 
 * @asparam value new container to be controlled
 * 
 * @asprivate
 * @param {org.apache.royale.textLayout.elements.IContainerFormattedElement} value
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setRootElement = function(value) {
  if (this.org_apache_royale_textLayout_container_ContainerController__rootElement != value) {
    if (this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager)
      this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager.stopHitTests();
    if (!value)
      this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager = null; else if (!this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager) {
      this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager = new org.apache.royale.textLayout.events.FlowElementMouseEventManager(this.container, null);
    }
    this.clearCompositionResults();
    this.org_apache_royale_textLayout_container_ContainerController_detachContainer();
    this.org_apache_royale_textLayout_container_ContainerController__rootElement = value;
    this.org_apache_royale_textLayout_container_ContainerController__textFlowCache = null;
    this.org_apache_royale_textLayout_container_ContainerController__textLength = 0;
    this.org_apache_royale_textLayout_container_ContainerController__absoluteStart = -1;
    this.attachContainer();
    if (this.org_apache_royale_textLayout_container_ContainerController__rootElement)
      this.formatChanged();
    if (org.apache.royale.textLayout.elements.GlobalSettings.playerEnablesSpicyFeatures)
      this.org_apache_royale_textLayout_container_ContainerController__container["needsSoftKeyboard"] = (this.interactionManager && this.interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE);
  }
};


/**
 *  @asprivate
 * @royaleignorecoercion org.apache.royale.textLayout.container.ContainerController
 * @param {number} numChars
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setTextLengthOnly = function(numChars) {
  if (this.org_apache_royale_textLayout_container_ContainerController__textLength != numChars) {
    this.org_apache_royale_textLayout_container_ContainerController__textLength = numChars;
    this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength = 0;
    if (this.org_apache_royale_textLayout_container_ContainerController__absoluteStart != -1) {
      var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ composer = this.flowComposer;
      if (composer) {
        var /** @type {number} */ idx = (composer.getControllerIndex(this) + 1) >> 0;
        while (idx < this.flowComposer.numControllers) {
          var /** @type {Object} */ controller = composer.getControllerAt(idx++);
          if (controller.org_apache_royale_textLayout_container_ContainerController__absoluteStart == -1)
            break;
          controller.org_apache_royale_textLayout_container_ContainerController__absoluteStart = -1;
          controller.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength = 0;
        }
      }
    }
  }
};


/** @asprivate 
 * @param {number} numChars
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setTextLength = function(numChars) {
  
  var /** @type {number} */ uncomposedTextLength = 0;
  if (this.textFlow) {
    var /** @type {boolean} */ verticalText = this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
    var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.textFlow.flowComposer;
    if (numChars != 0 && flowComposer.getControllerIndex(this) == flowComposer.numControllers - 1 && ((!verticalText && this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF) || (verticalText && this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF))) {
      var /** @type {number} */ containerAbsoluteStart = this.absoluteStart;
      
      uncomposedTextLength = (this.textFlow.textLength - (numChars + containerAbsoluteStart)) >> 0;
      numChars = (this.textFlow.textLength - containerAbsoluteStart) >> 0;
    }
  }
  this.setTextLengthOnly(numChars);
  this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength = uncomposedTextLength;
  
};


/** 
 * Determines whether the container has text that requires composing. 
 *
 * @asreturn 	true if the container requires composing.
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.isDamaged = function() {
  return this.flowComposer.isPotentiallyDamaged((this.absoluteStart + this.org_apache_royale_textLayout_container_ContainerController__textLength) >> 0);
};


/** called whenever the container attributes are changed.  Mark computed attributes and columnstate as out of date. 
 * @asprivate
 * @override
 */
org.apache.royale.textLayout.container.ContainerController.prototype.formatChanged = function(notifyModelChanged) {
  notifyModelChanged = typeof notifyModelChanged !== 'undefined' ? notifyModelChanged : true;
  this._computedFormat = null;
  this.invalidateContents();
};


/** This gets called when an element has changed its style selection related attributes. This may happen because an
 * ancestor element changed it attributes.
 * @asprivate 
 * @override
 */
org.apache.royale.textLayout.container.ContainerController.prototype.styleSelectorChanged = function() {
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.STYLE_SELECTOR_CHANGED, this, 0, this.org_apache_royale_textLayout_container_ContainerController__textLength);
  this._computedFormat = null;
};


/** @asprivate 
 * @param {string} changeType
 * @param {org.apache.royale.textLayout.container.ContainerController} element
 * @param {number} changeStart
 * @param {number} changeLen
 * @param {boolean=} needNormalize
 * @param {boolean=} bumpGeneration
 */
org.apache.royale.textLayout.container.ContainerController.prototype.modelChanged = function(changeType, element, changeStart, changeLen, needNormalize, bumpGeneration) {
  needNormalize = typeof needNormalize !== 'undefined' ? needNormalize : true;
  bumpGeneration = typeof bumpGeneration !== 'undefined' ? bumpGeneration : true;
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.org_apache_royale_textLayout_container_ContainerController__rootElement.getTextFlow();
  if (tf)
    tf.processModelChanged(changeType, element, (this.absoluteStart + changeStart) >> 0, changeLen, needNormalize, bumpGeneration);
};


/** @asprivate 
 * @param {string} wmode
 * @param {boolean} createShape
 */
org.apache.royale.textLayout.container.ContainerController.prototype.gatherVisibleLines = function(wmode, createShape) {
  var /** @type {number} */ lineIndex = 0;
  
  if (this.org_apache_royale_textLayout_container_ContainerController__textLength != 0) {
    var /** @type {number} */ width = this.org_apache_royale_textLayout_container_ContainerController__measureWidth ? this.org_apache_royale_textLayout_container_ContainerController__contentWidth : this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
    var /** @type {number} */ height = this.org_apache_royale_textLayout_container_ContainerController__measureHeight ? this.org_apache_royale_textLayout_container_ContainerController__contentHeight : this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
    var /** @type {number} */ adjustX = (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL) ? this.org_apache_royale_textLayout_container_ContainerController__xScroll - width : this.org_apache_royale_textLayout_container_ContainerController__xScroll;
    var /** @type {number} */ adjustY = this.org_apache_royale_textLayout_container_ContainerController__yScroll;
    var /** @type {number} */ scrollAdjustXTW = org.apache.royale.textLayout.utils.Twips.roundTo(adjustX);
    var /** @type {number} */ scrollAdjustYTW = org.apache.royale.textLayout.utils.Twips.roundTo(adjustY);
    var /** @type {number} */ scrollAdjustWidthTW = org.apache.royale.textLayout.utils.Twips.to(width);
    var /** @type {number} */ scrollAdjustHeightTW = org.apache.royale.textLayout.utils.Twips.to(height);
    var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.flowComposer;
    var /** @type {number} */ firstLine = flowComposer.findLineIndexAtPosition(this.absoluteStart);
    var /** @type {number} */ lastLine = flowComposer.findLineIndexAtPosition((this.absoluteStart + this.org_apache_royale_textLayout_container_ContainerController__textLength - 1) >> 0);
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ curLine;
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
    //var /** @type {number} */ lineIndex = 0;
    var /** @type {*} */ testRslt;
    if (this.columnCount == 1) {
      var /** @type {number} */ testPos = firstLine;
      curLine = flowComposer.getLineAt(testPos++);
      while (curLine && org.apache.royale.utils.Language.is(curLine, org.apache.royale.textLayout.compose.ITextFlowTableBlock))
        curLine = flowComposer.getLineAt(testPos++);
      testRslt = this.testLineVisible(wmode, scrollAdjustXTW, scrollAdjustYTW, scrollAdjustWidthTW, scrollAdjustHeightTW, curLine, null);
      textLine = testRslt;
      firstLine++;
      if (textLine) {
        if (createShape)
          curLine.createShape(wmode, textLine);
        this.org_apache_royale_textLayout_container_ContainerController__linesInView.push(textLine);
      } else {
        var /** @type {number} */ hi = lastLine;
        while (firstLine <= hi) {
          var /** @type {number} */ mid = ((firstLine + hi) / 2) >> 0;
          
          curLine = flowComposer.getLineAt(mid);
          testRslt = this.testLineVisible(wmode, scrollAdjustXTW, scrollAdjustYTW, scrollAdjustWidthTW, scrollAdjustHeightTW, curLine, null);
          if (testRslt && org.apache.royale.utils.Language.is(testRslt, org.apache.royale.text.engine.ITextLine)) {
            textLine = testRslt;
            var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tempLine = flowComposer.getLineAt((mid - 1) >> 0);
            if (!org.apache.royale.utils.Language.is(this.testLineVisible(wmode, scrollAdjustXTW, scrollAdjustYTW, scrollAdjustWidthTW, scrollAdjustHeightTW, tempLine, null), org.apache.royale.text.engine.ITextLine)) {
              if (createShape)
                curLine.createShape(wmode, textLine);
              this.org_apache_royale_textLayout_container_ContainerController__linesInView.push(textLine);
              firstLine = (mid + 1) >> 0;
              break;
            }
            testRslt = -1;
          }
          if (testRslt < 0 || testRslt == 2)
            hi = (mid - 1) >> 0;
          else
            firstLine = (mid + 1) >> 0;
        }
      }
      for (lineIndex = firstLine; lineIndex <= lastLine; lineIndex++) {
        curLine = flowComposer.getLineAt(lineIndex);
        testRslt = this.testLineVisible(wmode, scrollAdjustXTW, scrollAdjustYTW, scrollAdjustWidthTW, scrollAdjustHeightTW, curLine, null);
        if (org.apache.royale.utils.Language.is(testRslt, org.apache.royale.textLayout.elements.TableBlockContainer))
          continue;
        textLine = testRslt;
        if (!textLine)
          break;
        if (createShape)
          curLine.createShape(wmode, textLine);
        this.org_apache_royale_textLayout_container_ContainerController__linesInView.push(textLine);
      }
    } else {
      for (lineIndex = firstLine; lineIndex <= lastLine; lineIndex++) {
        curLine = flowComposer.getLineAt(lineIndex);
        if (curLine == null || curLine.controller != this)
          continue;
        textLine = this.oldTestLineVisible(wmode, scrollAdjustXTW, scrollAdjustYTW, scrollAdjustWidthTW, scrollAdjustHeightTW, curLine, null);
        if (textLine) {
          if (createShape)
            curLine.createShape(wmode, textLine);
          this.org_apache_royale_textLayout_container_ContainerController__linesInView.push(textLine);
        }
      }
    }
  }
  this.org_apache_royale_textLayout_container_ContainerController__updateStart = this.absoluteStart;
};


/** determines the shapechildren in the container and applies VJ. @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.fillShapeChildren = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__textLength == 0)
    return;
  var /** @type {string} */ wmode = this.effectiveBlockProgression;
  if (this.org_apache_royale_textLayout_container_ContainerController__linesInView.length == 0)
    this.gatherVisibleLines(wmode, true);
  var /** @type {boolean} */ adjustLines = (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL) && (this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF && this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF);
  if (adjustLines) {
    var /** @type {number} */ width = this.org_apache_royale_textLayout_container_ContainerController__measureWidth ? this.org_apache_royale_textLayout_container_ContainerController__contentWidth : this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
    var /** @type {number} */ adjustX = this.org_apache_royale_textLayout_container_ContainerController__xScroll - width;
    var /** @type {number} */ adjustY = this.org_apache_royale_textLayout_container_ContainerController__yScroll;
    if (adjustX != 0 || adjustY != 0) {
      var foreachiter0_target = this.org_apache_royale_textLayout_container_ContainerController__linesInView;
      for (var foreachiter0 in foreachiter0_target) 
      {
      var textLine = foreachiter0_target[foreachiter0];
      {
        if (!textLine)
          continue;
        if (adjustLines) {
          textLine.x -= adjustX;
          textLine.y -= adjustY;
        }
      }}
      
      this.org_apache_royale_textLayout_container_ContainerController__contentLeft -= adjustX;
      this.org_apache_royale_textLayout_container_ContainerController__contentTop -= adjustY;
    }
  }
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.checkScrollBounds = function() {
  var /** @type {number} */ newHeight;
  var /** @type {number} */ visibleHeight;
  var /** @type {boolean} */ measuring;
  if (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    newHeight = this.org_apache_royale_textLayout_container_ContainerController__contentWidth;
    visibleHeight = this.compositionWidth;
    measuring = this.org_apache_royale_textLayout_container_ContainerController__measureWidth;
  } else {
    newHeight = this.org_apache_royale_textLayout_container_ContainerController__contentHeight;
    visibleHeight = this.compositionHeight;
    measuring = this.org_apache_royale_textLayout_container_ContainerController__measureHeight;
  }
  if (this.textFlow && !this.org_apache_royale_textLayout_container_ContainerController__minListenersAttached) {
    var /** @type {boolean} */ needToScroll = !measuring && newHeight > visibleHeight;
    if (needToScroll != this._mouseWheelListenerAttached) {
      if (this._mouseWheelListenerAttached)
        this.removeMouseWheelListener();
      else
        this.addMouseWheelListener();
    }
  }
};


/**
 * @private
 * @param {number} value
 * @param {number} minimum
 * @param {number} maximum
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.pinValue = function(value, minimum, maximum) {
  return Math.min(Math.max(value, minimum), maximum);
};


/**
 * @private
 * @param {number} x
 * @param {boolean} okToCompose
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_computeHorizontalScrollPosition = function(x, okToCompose) {
  var /** @type {string} */ wmode = this.effectiveBlockProgression;
  var /** @type {number} */ curEstimatedWidth = this.contentWidth;
  var /** @type {number} */ newScroll = 0;
  if (curEstimatedWidth > this.org_apache_royale_textLayout_container_ContainerController__compositionWidth && !this.org_apache_royale_textLayout_container_ContainerController__measureWidth) {
    if (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL) {
      newScroll = org.apache.royale.textLayout.container.ContainerController.pinValue(x, this.org_apache_royale_textLayout_container_ContainerController__contentLeft + this.org_apache_royale_textLayout_container_ContainerController__compositionWidth, this.org_apache_royale_textLayout_container_ContainerController__contentLeft + curEstimatedWidth);
      if (okToCompose && this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength != 0 && newScroll != this.org_apache_royale_textLayout_container_ContainerController__xScroll) {
        this.org_apache_royale_textLayout_container_ContainerController__xScroll = x;
        if (this.org_apache_royale_textLayout_container_ContainerController__xScroll > this.org_apache_royale_textLayout_container_ContainerController__contentLeft + this.org_apache_royale_textLayout_container_ContainerController__contentWidth)
          this.org_apache_royale_textLayout_container_ContainerController__xScroll = this.org_apache_royale_textLayout_container_ContainerController__contentLeft + this.org_apache_royale_textLayout_container_ContainerController__contentWidth;
        this.flowComposer.composeToController(this.flowComposer.getControllerIndex(this));
        newScroll = org.apache.royale.textLayout.container.ContainerController.pinValue(x, this.org_apache_royale_textLayout_container_ContainerController__contentLeft + this.org_apache_royale_textLayout_container_ContainerController__compositionWidth, this.org_apache_royale_textLayout_container_ContainerController__contentLeft + this.org_apache_royale_textLayout_container_ContainerController__contentWidth);
      }
    }
    else
      newScroll = org.apache.royale.textLayout.container.ContainerController.pinValue(x, this.org_apache_royale_textLayout_container_ContainerController__contentLeft, (this.org_apache_royale_textLayout_container_ContainerController__contentLeft + curEstimatedWidth) - this.org_apache_royale_textLayout_container_ContainerController__compositionWidth);
  }
  return newScroll;
};


/**
 * @private
 * @param {number} y
 * @param {boolean} okToCompose
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_computeVerticalScrollPosition = function(y, okToCompose) {
  var /** @type {number} */ newScroll = 0;
  var /** @type {number} */ curcontentHeight = this.contentHeight;
  var /** @type {string} */ wmode = this.effectiveBlockProgression;
  if (curcontentHeight > this.org_apache_royale_textLayout_container_ContainerController__compositionHeight) {
    newScroll = org.apache.royale.textLayout.container.ContainerController.pinValue(y, this.org_apache_royale_textLayout_container_ContainerController__contentTop, this.org_apache_royale_textLayout_container_ContainerController__contentTop + (curcontentHeight - this.org_apache_royale_textLayout_container_ContainerController__compositionHeight));
    if (okToCompose && this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength != 0 && wmode == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      this.org_apache_royale_textLayout_container_ContainerController__yScroll = y;
      if (this.org_apache_royale_textLayout_container_ContainerController__yScroll < this.org_apache_royale_textLayout_container_ContainerController__contentTop)
        this.org_apache_royale_textLayout_container_ContainerController__yScroll = this.org_apache_royale_textLayout_container_ContainerController__contentTop;
      this.flowComposer.composeToController(this.flowComposer.getControllerIndex(this));
      newScroll = org.apache.royale.textLayout.container.ContainerController.pinValue(y, this.org_apache_royale_textLayout_container_ContainerController__contentTop, this.org_apache_royale_textLayout_container_ContainerController__contentTop + (curcontentHeight - this.org_apache_royale_textLayout_container_ContainerController__compositionHeight));
    }
  }
  return newScroll;
};


/** 
 * Returns the area that the text occupies, as reflected by the last compose or update operation. 
 * The width and the height might be estimated, if the container is scrollable and the text exceeds the 
 * visible area.
 * 
 * @asreturn describes the area that the text occupies.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 *
 * @see org.apache.royale.geom.Rectangle Rectangle
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getContentBounds = function() {
  return new org.apache.royale.geom.Rectangle(this.org_apache_royale_textLayout_container_ContainerController__contentLeft, this.org_apache_royale_textLayout_container_ContainerController__contentTop, this.contentWidth, this.contentHeight);
};


/** @asprivate 
 * @param {number} measure
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.computeScaledContentMeasure = function(measure) {
  
  var /** @type {number} */ charsInFinalParcel = (this.textFlow.textLength - this.org_apache_royale_textLayout_container_ContainerController__finalParcelStart) >> 0;
  var /** @type {number} */ composeCompleteRatio = charsInFinalParcel / (charsInFinalParcel - this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength);
  return measure * composeCompleteRatio;
};


/** @asprivate 
 * @param {number} contentLeft
 * @param {number} contentTop
 * @param {number} contentWidth
 * @param {number} contentHeight
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setContentBounds = function(contentLeft, contentTop, contentWidth, contentHeight) {
  this.org_apache_royale_textLayout_container_ContainerController__contentWidth = contentWidth;
  this.org_apache_royale_textLayout_container_ContainerController__contentHeight = contentHeight;
  this.org_apache_royale_textLayout_container_ContainerController__contentLeft = contentLeft;
  this.org_apache_royale_textLayout_container_ContainerController__contentTop = contentTop;
  this.checkScrollBounds();
};


/**
 * @private
 * @param {string} direction
 * @param {number} delta
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_updateForScroll = function(direction, delta) {
  this.org_apache_royale_textLayout_container_ContainerController__linesInView.length = 0;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.textFlow.flowComposer;
  flowComposer.updateToController(flowComposer.getControllerIndex(this));
  this.attachTransparentBackgroundForHit(false);
  if (this.textFlow.hasEventListener(org.apache.royale.textLayout.events.TextLayoutEvent.SCROLL))
    this.textFlow.dispatchEvent(new org.apache.royale.textLayout.events.ScrollEvent(org.apache.royale.textLayout.events.TextLayoutEvent.SCROLL, false, false, direction, delta));
};


/** 
 * Scrolls so that the text range is visible in the container.
 *
 * @asparam activePosition	The end of the selection that is changed when you extend the selection. It can be
 * 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
 * @asparam anchorPosition   	The stable end of the selection when you extend the selection. It can be either 
 * 	the start or the end of the selection.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} activePosition
 * @param {number} anchorPosition
 */
org.apache.royale.textLayout.container.ContainerController.prototype.scrollToRange = function(activePosition, anchorPosition) {
  if (!this._hasScrollRect || !this.flowComposer || this.flowComposer.getControllerAt((this.flowComposer.numControllers - 1) >> 0) != this)
    return;
  var /** @type {number} */ controllerStart = this.absoluteStart;
  var /** @type {number} */ lastPosition = (Math.min(controllerStart + this.org_apache_royale_textLayout_container_ContainerController__textLength, this.textFlow.textLength - 1)) >> 0;
  activePosition = (Math.max(controllerStart, Math.min(activePosition, lastPosition))) >> 0;
  anchorPosition = (Math.max(controllerStart, Math.min(anchorPosition, lastPosition))) >> 0;
  var /** @type {boolean} */ verticalText = this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
  var /** @type {number} */ begPos = (Math.min(activePosition, anchorPosition)) >> 0;
  var /** @type {number} */ endPos = (Math.max(activePosition, anchorPosition)) >> 0;
  var /** @type {number} */ begLineIndex = this.flowComposer.findLineIndexAtPosition(begPos, (begPos == this.textFlow.textLength));
  var /** @type {number} */ endLineIndex = this.flowComposer.findLineIndexAtPosition(endPos, (endPos == this.textFlow.textLength));
  var /** @type {number} */ scrollRectLeft = this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft;
  var /** @type {number} */ scrollRectTop = this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop;
  var /** @type {number} */ scrollRectRight = this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight;
  var /** @type {number} */ scrollRectBottom = this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom;
  if (this.flowComposer.damageAbsoluteStart <= endPos) {
    endPos = (Math.min(begPos + 100, endPos + 1)) >> 0;
    this.flowComposer.composeToPosition(endPos);
    begLineIndex = this.flowComposer.findLineIndexAtPosition(begPos, (begPos == this.textFlow.textLength));
    endLineIndex = this.flowComposer.findLineIndexAtPosition(endPos, (endPos == this.textFlow.textLength));
  }
  var /** @type {org.apache.royale.geom.Rectangle} */ rect = this.org_apache_royale_textLayout_container_ContainerController_rangeToRectangle(begPos, endPos, begLineIndex, endLineIndex);
  if (rect) {
    var /** @type {boolean} */ horizontalScrollOK;
    var /** @type {boolean} */ verticalScrollOK;
    if (verticalText) {
      horizontalScrollOK = (rect.left < scrollRectLeft || rect.right > scrollRectLeft);
      if (horizontalScrollOK) {
        if (rect.left < scrollRectLeft)
          this.horizontalScrollPosition = rect.left + this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
        if (rect.right > scrollRectRight)
          this.horizontalScrollPosition = rect.right;
      }
      if (rect.top < scrollRectTop)
        this.verticalScrollPosition = rect.top;
      if (activePosition == anchorPosition)
        rect.bottom += 2;
      if (rect.bottom > scrollRectBottom)
        this.verticalScrollPosition = rect.bottom - this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
    } else {
      verticalScrollOK = (rect.top > scrollRectTop || rect.bottom < scrollRectBottom);
      if (verticalScrollOK) {
        if (rect.top < scrollRectTop)
          this.verticalScrollPosition = rect.top;
        if (rect.bottom > scrollRectBottom)
          this.verticalScrollPosition = rect.bottom - this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
      }
      if (activePosition == anchorPosition)
        rect.right += 2;
      horizontalScrollOK = (rect.left > scrollRectLeft || rect.right < scrollRectRight);
      if (horizontalScrollOK && rect.left < scrollRectLeft)
        this.horizontalScrollPosition = rect.left - this.org_apache_royale_textLayout_container_ContainerController__compositionWidth / 2;
      if (horizontalScrollOK && rect.right > scrollRectRight)
        this.horizontalScrollPosition = rect.right - this.org_apache_royale_textLayout_container_ContainerController__compositionWidth / 2;
    }
  }
};


/**
 * @private
 * @param {number} start
 * @param {number} end
 * @param {number} startLineIndex
 * @param {number} endLineIndex
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_rangeToRectangle = function(start, end, startLineIndex, endLineIndex) {
  var /** @type {number} */ atomIndex = 0;
  var /** @type {org.apache.royale.geom.Rectangle} */ bbox;
  var /** @type {string} */ blockProgression = this.effectiveBlockProgression;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.textFlow.flowComposer;
  if (!this.container || !flowComposer)
    return null;
  if (startLineIndex == endLineIndex) {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = flowComposer.getLineAt(startLineIndex);
    if (line.isDamaged())
      return null;
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = line.getTextLine(true);
    var /** @type {number} */ paragraphStart = line.paragraph.getAbsoluteStart();
    var /** @type {boolean} */ isTCY = false;
    if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
      var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leafElement = this.org_apache_royale_textLayout_container_ContainerController__rootElement.getTextFlow().findLeaf(start);
      isTCY = leafElement.getParentByType("TCYElement") != null;
    }
    var /** @type {number} */ minAtomIndex = textLine.atomCount;
    var /** @type {number} */ maxAtomIndex = 0;
    if (start == end) {
      minAtomIndex = textLine.getAtomIndexAtCharIndex((start - paragraphStart) >> 0);
      maxAtomIndex = minAtomIndex;
    } else {
      //var /** @type {number} */ atomIndex = 0;
      var /** @type {number} */ lastPosition = (end - paragraphStart) >> 0;
      for (var /** @type {number} */ pos = (start - paragraphStart) >> 0; pos < lastPosition; ++pos) {
        atomIndex = textLine.getAtomIndexAtCharIndex(pos);
        if (atomIndex < minAtomIndex)
          minAtomIndex = atomIndex;
        if (atomIndex > maxAtomIndex)
          maxAtomIndex = atomIndex;
      }
    }
    bbox = this.org_apache_royale_textLayout_container_ContainerController_atomToRectangle(minAtomIndex, line, textLine, blockProgression, isTCY);
    if (minAtomIndex != maxAtomIndex)
      bbox = bbox.union(this.org_apache_royale_textLayout_container_ContainerController_atomToRectangle(maxAtomIndex, line, textLine, blockProgression, isTCY));
  } else {
    bbox = new org.apache.royale.geom.Rectangle(this.org_apache_royale_textLayout_container_ContainerController__contentLeft, this.org_apache_royale_textLayout_container_ContainerController__contentTop, this.org_apache_royale_textLayout_container_ContainerController__contentWidth, this.org_apache_royale_textLayout_container_ContainerController__contentHeight);
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ startLine = flowComposer.getLineAt(startLineIndex);
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ endLine = flowComposer.getLineAt(endLineIndex);
    if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      bbox.top = startLine.y;
      bbox.bottom = endLine.y + endLine.textHeight;
    } else {
      bbox.right = startLine.x + startLine.textHeight;
      bbox.left = endLine.x;
    }
  }
  return bbox;
};


/**
 * @private
 * @param {number} atomIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} line
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {string} blockProgression
 * @param {boolean} isTCY
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_atomToRectangle = function(atomIdx, line, textLine, blockProgression, isTCY) {
  var /** @type {org.apache.royale.geom.Rectangle} */ atomBounds;
  
  if (atomIdx > -1)
    atomBounds = textLine.getAtomBounds(atomIdx);
  if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (isTCY)
      return new org.apache.royale.geom.Rectangle(line.x + atomBounds.x, line.y + atomBounds.y, atomBounds.width, atomBounds.height);
    return new org.apache.royale.geom.Rectangle(line.x, line.y + atomBounds.y, line.height, atomBounds.height);
  }
  return new org.apache.royale.geom.Rectangle(line.x + atomBounds.x, line.y - line.height + line.ascent, atomBounds.width, line.height + textLine.descent);
};


/**
 * @asprivate
 */
org.apache.royale.textLayout.container.ContainerController.prototype.resetColumnState = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__rootElement)
    this.org_apache_royale_textLayout_container_ContainerController__columnState.updateInputs(this.effectiveBlockProgression, org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_container_ContainerController__rootElement.computedFormat.direction), this, this.org_apache_royale_textLayout_container_ContainerController__compositionWidth, this.org_apache_royale_textLayout_container_ContainerController__compositionHeight);
};


/** 
 * Marks all the text in this container as needing composing. 
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 */
org.apache.royale.textLayout.container.ContainerController.prototype.invalidateContents = function() {
  if (this.textFlow)
    this.textFlow.damage(this.absoluteStart, (Math.min(this.org_apache_royale_textLayout_container_ContainerController__textLength, 1)) >> 0, org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY, false);
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__transparentBGX;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__transparentBGY;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__transparentBGWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__transparentBGHeight;


/** No mouse clicks or moves will be generated for the container unless it has a background covering its area.  Text Layout Framework
 * wants those events so that clicking on a container will select the text in it.  This code
 * adds or updates (on size change) that background for Sprite containers only. This may cause clients problems 
 * - definitely no hits is a problem - add this code to explore the issues - expect feedback.  
 * @param {boolean} justClear
 */
org.apache.royale.textLayout.container.ContainerController.prototype.attachTransparentBackgroundForHit = function(justClear) {
  if ((this.org_apache_royale_textLayout_container_ContainerController__minListenersAttached || this._mouseWheelListenerAttached) && this.attachTransparentBackground) {
    var /** @type {org.apache.royale.core.IParentIUIBase} */ s = this.org_apache_royale_textLayout_container_ContainerController__container;
    if (justClear) {
      
      this.org_apache_royale_textLayout_container_ContainerController__transparentBGX = this.org_apache_royale_textLayout_container_ContainerController__transparentBGY = this.org_apache_royale_textLayout_container_ContainerController__transparentBGWidth = this.org_apache_royale_textLayout_container_ContainerController__transparentBGHeight = NaN;
    } else {
      var /** @type {number} */ bgwidth = this.org_apache_royale_textLayout_container_ContainerController__measureWidth ? this.org_apache_royale_textLayout_container_ContainerController__contentWidth : this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
      var /** @type {number} */ bgheight = this.org_apache_royale_textLayout_container_ContainerController__measureHeight ? this.org_apache_royale_textLayout_container_ContainerController__contentHeight : this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
      var /** @type {boolean} */ adjustHorizontalScroll = this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL && this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF;
      var /** @type {number} */ bgx = adjustHorizontalScroll ? this.org_apache_royale_textLayout_container_ContainerController__xScroll - bgwidth : this.org_apache_royale_textLayout_container_ContainerController__xScroll;
      var /** @type {number} */ bgy = this.org_apache_royale_textLayout_container_ContainerController__yScroll;
      
      if (bgx != this.org_apache_royale_textLayout_container_ContainerController__transparentBGX || bgy != this.org_apache_royale_textLayout_container_ContainerController__transparentBGY || bgwidth != this.org_apache_royale_textLayout_container_ContainerController__transparentBGWidth || bgheight != this.org_apache_royale_textLayout_container_ContainerController__transparentBGHeight) {
        this.org_apache_royale_textLayout_container_ContainerController__transparentBGX = bgx;
        this.org_apache_royale_textLayout_container_ContainerController__transparentBGY = bgy;
        this.org_apache_royale_textLayout_container_ContainerController__transparentBGWidth = bgwidth;
        this.org_apache_royale_textLayout_container_ContainerController__transparentBGHeight = bgheight;
      }
    }
  }
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.edit.ISelectionManager} newInteractionManager
 */
org.apache.royale.textLayout.container.ContainerController.prototype.interactionManagerChanged = function(newInteractionManager) {
  if (!newInteractionManager)
    this.org_apache_royale_textLayout_container_ContainerController_detachContainer();
  this.attachContainer();
  this.checkScrollBounds();
  if (this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager)
    this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager.needsCtrlKey = (this.interactionManager != null && this.interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE);
  if (org.apache.royale.textLayout.elements.GlobalSettings.playerEnablesSpicyFeatures)
    this.org_apache_royale_textLayout_container_ContainerController__container["needsSoftKeyboard"] = (this.interactionManager && this.interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE);
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.attachContainer = function() {
  if (!this.org_apache_royale_textLayout_container_ContainerController__minListenersAttached && this.textFlow && this.textFlow.interactionManager) {
    this.org_apache_royale_textLayout_container_ContainerController__minListenersAttached = true;
    this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_IN, org.apache.royale.utils.Language.closure(this.requiredFocusInHandler, this, 'requiredFocusInHandler'));
    this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.utils.Language.closure(this.requiredMouseOverHandler, this, 'requiredMouseOverHandler'));
    this.attachTransparentBackgroundForHit(false);
  }
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.attachInteractionHandlers = function() {
  var /** @type {org.apache.royale.textLayout.edit.IInteractionEventHandler} */ receiver = this.getInteractionHandler();
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.requiredMouseDownHandler, this, 'requiredMouseDownHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_OUT, org.apache.royale.utils.Language.closure(this.requiredFocusOutHandler, this, 'requiredFocusOutHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.MouseEvent.DOUBLE_CLICK, org.apache.royale.utils.Language.closure(receiver.mouseDoubleClickHandler, receiver, 'mouseDoubleClickHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.ActivateEvent.ACTIVATE, org.apache.royale.utils.Language.closure(receiver.activateHandler, receiver, 'activateHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.MOUSE_FOCUS_CHANGE, org.apache.royale.utils.Language.closure(receiver.focusChangeHandler, receiver, 'focusChangeHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.KEY_FOCUS_CHANGE, org.apache.royale.utils.Language.closure(receiver.focusChangeHandler, receiver, 'focusChangeHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.text.events.TextEvent.TEXT_INPUT, org.apache.royale.utils.Language.closure(receiver.textInputHandler, receiver, 'textInputHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_OUT, org.apache.royale.utils.Language.closure(receiver.mouseOutHandler, receiver, 'mouseOutHandler'));
  this.addMouseWheelListener();
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.ActivateEvent.DEACTIVATE, org.apache.royale.utils.Language.closure(receiver.deactivateHandler, receiver, 'deactivateHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener("imeStartComposition", org.apache.royale.utils.Language.closure(receiver.imeStartCompositionHandler, receiver, 'imeStartCompositionHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.EditEvent.COPY, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.EditEvent.CUT, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.EditEvent.PASTE, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.EditEvent.CLEAR, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeInteractionHandlers = function() {
  var /** @type {org.apache.royale.textLayout.edit.IInteractionEventHandler} */ receiver = this.getInteractionHandler();
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.requiredMouseDownHandler, this, 'requiredMouseDownHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_OUT, org.apache.royale.utils.Language.closure(this.requiredFocusOutHandler, this, 'requiredFocusOutHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.MouseEvent.DOUBLE_CLICK, org.apache.royale.utils.Language.closure(receiver.mouseDoubleClickHandler, receiver, 'mouseDoubleClickHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.ActivateEvent.ACTIVATE, org.apache.royale.utils.Language.closure(receiver.activateHandler, receiver, 'activateHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.MOUSE_FOCUS_CHANGE, org.apache.royale.utils.Language.closure(receiver.focusChangeHandler, receiver, 'focusChangeHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.KEY_FOCUS_CHANGE, org.apache.royale.utils.Language.closure(receiver.focusChangeHandler, receiver, 'focusChangeHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.text.events.TextEvent.TEXT_INPUT, org.apache.royale.utils.Language.closure(receiver.textInputHandler, receiver, 'textInputHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_OUT, org.apache.royale.utils.Language.closure(receiver.mouseOutHandler, receiver, 'mouseOutHandler'));
  this.removeMouseWheelListener();
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.ActivateEvent.DEACTIVATE, org.apache.royale.utils.Language.closure(receiver.deactivateHandler, receiver, 'deactivateHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener("imeStartComposition", org.apache.royale.utils.Language.closure(receiver.imeStartCompositionHandler, receiver, 'imeStartCompositionHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.EditEvent.COPY, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.SelectionEvent.SELECT_ALL, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.EditEvent.CUT, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.EditEvent.PASTE, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.EditEvent.CLEAR, org.apache.royale.utils.Language.closure(receiver.editHandler, receiver, 'editHandler'));
  this.org_apache_royale_textLayout_container_ContainerController_clearSelectHandlers();
};


/** @asprivate 
 * @private
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_detachContainer = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__minListenersAttached) {
    this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.FOCUS_IN, org.apache.royale.utils.Language.closure(this.requiredFocusInHandler, this, 'requiredFocusInHandler'));
    this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_OVER, org.apache.royale.utils.Language.closure(this.requiredMouseOverHandler, this, 'requiredMouseOverHandler'));
    if (this.org_apache_royale_textLayout_container_ContainerController__allListenersAttached) {
      this.removeInteractionHandlers();
      this.removeContextMenu();
      this.attachTransparentBackgroundForHit(true);
      this.org_apache_royale_textLayout_container_ContainerController__allListenersAttached = false;
    }
    this.org_apache_royale_textLayout_container_ContainerController__minListenersAttached = false;
  }
  this.removeMouseWheelListener();
};


/**
 * @private
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_attachAllListeners = function() {
  if (!this.org_apache_royale_textLayout_container_ContainerController__allListenersAttached && this.textFlow && this.textFlow.interactionManager) {
    
    this.org_apache_royale_textLayout_container_ContainerController__allListenersAttached = true;
    this.attachContextMenu();
    this.attachInteractionHandlers();
  }
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addMouseWheelListener = function() {
  if (!this._mouseWheelListenerAttached) {
    this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.MouseEvent.WHEEL, org.apache.royale.utils.Language.closure(this.getInteractionHandler().mouseWheelHandler, this.getInteractionHandler(), 'mouseWheelHandler'));
    this._mouseWheelListenerAttached = true;
  }
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeMouseWheelListener = function() {
  if (this._mouseWheelListenerAttached) {
    this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.MouseEvent.WHEEL, org.apache.royale.utils.Language.closure(this.getInteractionHandler().mouseWheelHandler, this.getInteractionHandler(), 'mouseWheelHandler'));
    this._mouseWheelListenerAttached = false;
  }
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.attachContextMenu = function() {
};


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeContextMenu = function() {
};


/** @asprivate  
 *
 * Shared so that TextContainerManager can create the same ContextMenu. 
 * @nocollapse
 * @return {org.apache.royale.textLayout.dummy.ContextMenu}
 */
org.apache.royale.textLayout.container.ContainerController.createDefaultContextMenu = function() {
  var /** @type {org.apache.royale.textLayout.dummy.ContextMenu} */ contextMenu = new org.apache.royale.textLayout.dummy.ContextMenu();
  contextMenu.clipboardMenu = true;
  contextMenu.clipboardItems.clear = true;
  contextMenu.clipboardItems.copy = true;
  contextMenu.clipboardItems.cut = true;
  contextMenu.clipboardItems.paste = true;
  contextMenu.clipboardItems.selectAll = true;
  return contextMenu;
};


/** 
 * Creates a context menu for the ContainerController. Use the methods of the ContextMenu class to 
 * add items to the menu.
 * <p>You can override this method to define a custom context menu.</p>
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see flash.ui.ContextMenu ContextMenu
 * @protected
 * @return {org.apache.royale.textLayout.dummy.ContextMenu}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.createContextMenu = function() {
  return org.apache.royale.textLayout.container.ContainerController.createDefaultContextMenu();
};


/**
 */
org.apache.royale.textLayout.container.ContainerController.prototype.dispose = function() {
  this.org_apache_royale_textLayout_container_ContainerController_stopMouseSelectionScrolling();
  this.clearSelectionShapes();
  this.setRootElement(null);
};


/**
 * @private
 * @param {org.apache.royale.events.IEventDispatcher=} containerRoot
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_stopMouseSelectionScrolling = function(containerRoot) {
  containerRoot = typeof containerRoot !== 'undefined' ? containerRoot : null;
  if (this.org_apache_royale_textLayout_container_ContainerController__scrollTimer) {
    this.org_apache_royale_textLayout_container_ContainerController__scrollTimer.stop();
    this.org_apache_royale_textLayout_container_ContainerController__scrollTimer.removeEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.scrollTimerHandler, this, 'scrollTimerHandler'));
    if (!containerRoot) {
      containerRoot = this.getContainerRoot();
    }
    if (containerRoot) {
      containerRoot.removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.scrollTimerHandler, this, 'scrollTimerHandler'));
    }
    this.org_apache_royale_textLayout_container_ContainerController__scrollTimer = null;
  }
};


/** @asprivate 
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.scrollTimerHandler = function(event) {
  if (!this.org_apache_royale_textLayout_container_ContainerController__scrollTimer)
    return;
  if (this.textFlow.interactionManager == null || this.textFlow.interactionManager.activePosition < this.absoluteStart || this.textFlow.interactionManager.activePosition > this.absoluteStart + this.textLength)
    event = null;
  if (org.apache.royale.utils.Language.is(event, org.apache.royale.events.MouseEvent)) {
    this.org_apache_royale_textLayout_container_ContainerController_stopMouseSelectionScrolling(event.currentTarget);
  } else if (!event) {
    this.org_apache_royale_textLayout_container_ContainerController_stopMouseSelectionScrolling();
  }
};


/** 
 * Handle a scroll event during a "drag" selection. 
 *
 * @asparam mouseX	The horizontal position of the mouse cursor on the stage.
 * @asparam mouseY	The vertical position of the mouse cursor  on the stage.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} mouseX
 * @param {number} mouseY
 */
org.apache.royale.textLayout.container.ContainerController.prototype.autoScrollIfNecessary = function(mouseX, mouseY) {
  if (this.flowComposer.getControllerAt((this.flowComposer.numControllers - 1) >> 0) != this) {
    var /** @type {boolean} */ verticalText = (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL);
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ lastController = this.flowComposer.getControllerAt((this.flowComposer.numControllers - 1) >> 0);
    if ((verticalText && this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF) || (!verticalText && this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF))
      return;
    var /** @type {org.apache.royale.geom.Rectangle} */ r = org.apache.royale.utils.DisplayUtils.getScreenBoundingRect(lastController.container);
    if (verticalText) {
      if (mouseY >= r.top && mouseY <= r.bottom)
        lastController.autoScrollIfNecessary(mouseX, mouseY);
    } else {
      if (mouseX >= r.left && mouseX <= r.right)
        lastController.autoScrollIfNecessary(mouseX, mouseY);
    }
  }
  if (!this._hasScrollRect)
    return;
  var /** @type {org.apache.royale.geom.Point} */ containerPoint = new org.apache.royale.geom.Point(mouseX, mouseY);
  containerPoint = org.apache.royale.utils.PointUtils.globalToLocal(containerPoint, this.org_apache_royale_textLayout_container_ContainerController__container);
  this.org_apache_royale_textLayout_container_ContainerController_autoScrollIfNecessaryInternal(containerPoint);
};


/** 
 * Handle a scroll event during a "drag" selection. 
 *
 * @asparam mouseX	The horizontal position of the mouse cursor on the stage.
 * @asparam mouseY	The vertical position of the mouse cursor  on the stage.
 * @asreturns positive number if scroll went forward in reading order, negative number if it went backwards, and 0 if no scroll
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @private
 * @param {org.apache.royale.geom.Point} extreme
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_autoScrollIfNecessaryInternal = function(extreme) {
  
  var /** @type {number} */ scrollDirection = 0;
  if (extreme.y - this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom > 0) {
    this.verticalScrollPosition += this.textFlow.configuration.scrollDragPixels;
    scrollDirection = 1;
  } else if (extreme.y - this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop < 0) {
    this.verticalScrollPosition -= this.textFlow.configuration.scrollDragPixels;
    scrollDirection = -1;
  }
  if (extreme.x - this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight > 0) {
    this.horizontalScrollPosition += this.textFlow.configuration.scrollDragPixels;
    scrollDirection = -1;
  } else if (extreme.x - this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft < 0) {
    this.horizontalScrollPosition -= this.textFlow.configuration.scrollDragPixels;
    scrollDirection = 1;
  }
  if (scrollDirection != 0 && !this.org_apache_royale_textLayout_container_ContainerController__scrollTimer) {
    this.org_apache_royale_textLayout_container_ContainerController__scrollTimer = new org.apache.royale.utils.Timer(this.textFlow.configuration.scrollDragDelay);
    this.org_apache_royale_textLayout_container_ContainerController__scrollTimer.addEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.scrollTimerHandler, this, 'scrollTimerHandler'));
    if (this.getContainerRoot()) {
      this.getContainerRoot().addEventListener(org.apache.royale.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.scrollTimerHandler, this, 'scrollTimerHandler'));
    }
    this.org_apache_royale_textLayout_container_ContainerController__scrollTimer.start();
  }
  return scrollDirection;
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getFirstVisibleLine = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length ? this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[0].userData : null;
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getLastVisibleLine = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length ? this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length - 1].userData : null;
};


/** 
 * Figure out the scroll distance required to scroll up or down by the specified number of lines.
 * Negative numbers scroll upward, bringing more of the top of the TextFlow into view. Positive numbers 
 * scroll downward, bringing the next line from the bottom into full view.
 * 
 * <p>When scrolling up, for example, the method makes the next line fully visible. If the next line is partially
 * obscured and the number of lines specified is 1, the partially obscured line becomes fully visible.</p>
 *
 * @asparam nLines	The number of lines to scroll.
 *
 * @asreturn 	the delta amount of space to scroll
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} numLines
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getScrollDelta = function(numLines) {
  var /** @type {number} */ newLineIndex = 0;
  var /** @type {number} */ lineIndex = 0;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.textFlow.flowComposer;
  if (flowComposer.numLines == 0)
    return 0;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ firstVisibleLine = this.getFirstVisibleLine();
  if (!firstVisibleLine)
    return 0;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ lastVisibleLine = this.getLastVisibleLine();
  
  //var /** @type {number} */ newLineIndex = 0;
  //var /** @type {number} */ lineIndex = 0;
  if (numLines > 0) {
    lineIndex = flowComposer.findLineIndexAtPosition(lastVisibleLine.absoluteStart);
    var /** @type {org.apache.royale.text.engine.ITextLine} */ lastTextLine = lastVisibleLine.getTextLine(true);
    if (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      if ((lastTextLine.y + lastTextLine.descent) - this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom > 2)
        --lineIndex;
    }
    else if (this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft - (lastTextLine.x - lastTextLine.descent) > 2)
      --lineIndex;
    while (lineIndex + numLines > flowComposer.numLines - 1 && flowComposer.damageAbsoluteStart < this.textFlow.textLength) {
      var /** @type {number} */ previousDamageStart = flowComposer.damageAbsoluteStart;
      flowComposer.composeToPosition((flowComposer.damageAbsoluteStart + 1000) >> 0);
      if (flowComposer.damageAbsoluteStart == previousDamageStart)
        return 0;
    }
    newLineIndex = (Math.min(flowComposer.numLines - 1, lineIndex + numLines)) >> 0;
  }
  if (numLines < 0) {
    lineIndex = flowComposer.findLineIndexAtPosition(firstVisibleLine.absoluteStart);
    if (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      if (firstVisibleLine.y + 2 < this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop)
        ++lineIndex;
    }
    else if (firstVisibleLine.x + firstVisibleLine.ascent > this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight + 2)
      ++lineIndex;
    newLineIndex = (Math.max(0, lineIndex + numLines)) >> 0;
  }
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = flowComposer.getLineAt(newLineIndex);
  if (line.absoluteStart < this.absoluteStart)
    return 0;
  if (line.validity != "valid") {
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.textFlow.findLeaf(line.absoluteStart);
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ paragraph = leaf.getParagraph();
    this.textFlow.flowComposer.composeToPosition((paragraph.getAbsoluteStart() + paragraph.textLength) >> 0);
    line = flowComposer.getLineAt(newLineIndex);
    
  }
  var /** @type {boolean} */ verticalText = this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
  var /** @type {number} */ newScrollPosition;
  if (verticalText) {
    newScrollPosition = numLines < 0 ? line.x + line.textHeight : line.x - line.descent + this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
    return newScrollPosition - this.horizontalScrollPosition;
  }
  newScrollPosition = numLines < 0 ? line.y : line.y + line.textHeight - this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
  return newScrollPosition - this.verticalScrollPosition;
};


/** 
 * Processes the <code>MouseEvent.MOUSE_OVER</code> event when the client manages events. 
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_OVER MouseEvent.MOUSE_OVER
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseOverHandler = function(event) {
  if (!event.buttonDown)
    event.buttonDown = this.org_apache_royale_textLayout_container_ContainerController_buttonDown;
  if (this.interactionManager && !event.defaultPrevented)
    this.interactionManager.mouseOverHandler(event);
};


/** @asprivate Does required mouseOver handling.  Calls mouseOverHandler.  @see #mouseOverHandler 
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.requiredMouseOverHandler = function(event) {
  if (!event.buttonDown)
    event.buttonDown = this.org_apache_royale_textLayout_container_ContainerController_buttonDown;
  this.org_apache_royale_textLayout_container_ContainerController_attachAllListeners();
  this.getInteractionHandler().mouseOverHandler(event);
};


/** Processes the <code>MouseEvent.MOUSE_OUT</code> event when the client manages events.
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_OUT MouseEvent.MOUSE_OUT
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseOutHandler = function(event) {
  if (!event.buttonDown)
    event.buttonDown = this.org_apache_royale_textLayout_container_ContainerController_buttonDown;
  if (this.interactionManager && !event.defaultPrevented)
    this.interactionManager.mouseOutHandler(event);
};


/** Processes the <code>MouseEvent.MOUSE_WHEEL</code> event when the client manages events.
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_WHEEL MouseEvent.MOUSE_WHEEL
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseWheelHandler = function(event) {
  if (event.defaultPrevented)
    return;
  var /** @type {boolean} */ verticalText = this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
  if (verticalText) {
    if (this.contentWidth > this.org_apache_royale_textLayout_container_ContainerController__compositionWidth && !this.org_apache_royale_textLayout_container_ContainerController__measureWidth) {
      this.horizontalScrollPosition += event.delta * this.textFlow.configuration.scrollMouseWheelMultiplier;
      event.preventDefault();
    }
  } else if (this.contentHeight > this.org_apache_royale_textLayout_container_ContainerController__compositionHeight && !this.org_apache_royale_textLayout_container_ContainerController__measureHeight) {
    this.verticalScrollPosition -= event.delta * this.textFlow.configuration.scrollMouseWheelMultiplier;
    event.preventDefault();
  }
};


/** Processes the <code>MouseEvent.MOUSE_DOWN</code> event when the client manages events. 
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_DOWN MouseEvent.MOUSE_DOWN
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseDownHandler = function(event) {
  this.org_apache_royale_textLayout_container_ContainerController_buttonDown = true;
  if (this.interactionManager && !event.defaultPrevented) {
    this.interactionManager.mouseDownHandler(event);
    if (this.interactionManager.hasSelection())
      this.setFocus();
  }
};


/** @asprivate Does required mouseDown handling.  Calls mouseDownHandler.  @see #mouseDownHandler 
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.requiredMouseDownHandler = function(event) {
  this.org_apache_royale_textLayout_container_ContainerController_buttonDown = true;
  if (!this.org_apache_royale_textLayout_container_ContainerController__selectListenersAttached) {
    var /** @type {org.apache.royale.events.IEventDispatcher} */ containerRoot = this.getContainerRoot();
    if (containerRoot) {
      containerRoot.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.rootMouseMoveHandler, this, 'rootMouseMoveHandler'));
      containerRoot.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.rootMouseUpHandler, this, 'rootMouseUpHandler'));
      this.org_apache_royale_textLayout_container_ContainerController__selectListenersAttached = true;
    }
  }
  this.getInteractionHandler().mouseDownHandler(event);
};


/** 
 * Processes the <code>MouseEvent.MOUSE_UP</code> event when the client manages events.
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_UP MouseEvent.MOUSE_UP
 *
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseUpHandler = function(event) {
  this.org_apache_royale_textLayout_container_ContainerController_buttonDown = false;
  if (this.interactionManager && event && !event.defaultPrevented) {
    this.interactionManager.mouseUpHandler(event);
  }
};


/** @asprivate 
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.rootMouseUpHandler = function(event) {
  this.org_apache_royale_textLayout_container_ContainerController_buttonDown = false;
  this.org_apache_royale_textLayout_container_ContainerController_clearSelectHandlers();
  this.getInteractionHandler().mouseUpHandler(event);
};


/**
 * @private
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_clearSelectHandlers = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__selectListenersAttached) {
    
    this.getContainerRoot().removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.rootMouseMoveHandler, this, 'rootMouseMoveHandler'));
    this.getContainerRoot().removeEventListener(org.apache.royale.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.rootMouseUpHandler, this, 'rootMouseUpHandler'));
    this.org_apache_royale_textLayout_container_ContainerController__selectListenersAttached = false;
  }
};


/** 
 * Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 */
org.apache.royale.textLayout.container.ContainerController.prototype.beginMouseCapture = function() {
  var /** @type {org.apache.royale.textLayout.container.ISandboxSupport} */ sandboxManager = this.getInteractionHandler();
  if (sandboxManager && sandboxManager != this)
    sandboxManager.beginMouseCapture();
};


/** 
 * Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 */
org.apache.royale.textLayout.container.ContainerController.prototype.endMouseCapture = function() {
  var /** @type {org.apache.royale.textLayout.container.ISandboxSupport} */ sandboxManager = this.getInteractionHandler();
  if (sandboxManager && sandboxManager != this)
    sandboxManager.endMouseCapture();
};


/** Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseUpSomewhere = function(event) {
  this.rootMouseUpHandler(null);
  this.scrollTimerHandler(null);
};


/** Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseMoveSomewhere = function(event) {
  return;
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} event
 * @return {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_hitOnMyFlowExceptLastContainer = function(event) {
  if (org.apache.royale.utils.Language.is(event.target, org.apache.royale.text.engine.ITextLine)) {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = org.apache.royale.utils.Language.as(event.target, org.apache.royale.text.engine.ITextLine, true).userData;
    if (tfl) {
      var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = tfl.paragraph;
      if (para.getTextFlow() == this.textFlow)
        return true;
    }
  }
  return false;
};


/** 
 * Processes the <code>MouseEvent.MOUSE_MOVE</code> event when the client manages events.
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.MouseEvent#MOUSE_MOVE MouseEvent.MOUSE_MOVE
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseMoveHandler = function(event) {
  if (!event.buttonDown)
    event.buttonDown = this.org_apache_royale_textLayout_container_ContainerController_buttonDown;
  if (this.interactionManager && !event.defaultPrevented) {
    if (event.buttonDown && !this.org_apache_royale_textLayout_container_ContainerController_hitOnMyFlowExceptLastContainer(event))
      this.interactionManager.mouseMoveHandler(event);
  }
};


/** @asprivate 
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.rootMouseMoveHandler = function(event) {
  if (!event.buttonDown)
    event.buttonDown = this.org_apache_royale_textLayout_container_ContainerController_buttonDown;
  this.getInteractionHandler().mouseMoveHandler(event);
};


/** Processes the <code>MouseEvent.DOUBLE_CLICK</code> event when the client manages events.
 *
 * @asparam event The MouseEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 *
 * @see org.apache.royale.events.MouseEvent#DOUBLE_CLICK MouseEvent.DOUBLE_CLICK
 * @param {org.apache.royale.events.MouseEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.mouseDoubleClickHandler = function(event) {
  if (this.interactionManager && !event.defaultPrevented) {
    this.interactionManager.mouseDoubleClickHandler(event);
    if (this.interactionManager.hasSelection())
      this.setFocus();
  }
};


/** Give focus to the text container. @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setFocus = function() {
};


/**
 *  @asprivate
 *  @royaleignorecoercion org.apache.royale.core.IParentIUIBase
 * @param {Object} container
 * @return {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getContainerController = function(container) {
  try {
    while (container) {
      var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = flowComposer;
      for (var /** @type {number} */ i = 0; i < flowComposer.numControllers; i++) {
        var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = flowComposer.getControllerAt(i);
        if (controller.container == container)
          return controller;
      }
      container = container.parent;
    }
  } catch (e) {
  }
  return null;
};


/** 
 * Processes the <code>FocusEvent.KEY_FOCUS_CHANGE</code> and <code>FocusEvent.MOUSE_FOCUS_CHANGE</code> events
 * when the client manages events.
 *
 * @asparam event The FocusEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.FocusEvent#KEY_FOCUS_CHANGE FocusEvent.KEY_FOCUS_CHANGE
 * @see org.apache.royale.events.FocusEvent#MOUSE_FOCUS_CHANGE FocusEvent.MOUSE_FOCUS_CHANGE
 *  @royaleignorecoercion org.apache.royale.core.IParentIUIBase
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.focusChangeHandler = function(event) {
};


/** Processes the <code>FocusEvent.FOCUS_IN</code> event when the client manages events.
 *
 * @asparam event The FocusEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 *
 * @see org.apache.royale.events.FocusEvent#FOCUS_IN FocusEvent.FOCUS_IN
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.focusInHandler = function(event) {
  var /** @type {number} */ blinkRate = 0;
  if (this.interactionManager) {
    this.interactionManager.focusInHandler(event);
    if (this.interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE)
      blinkRate = (this.interactionManager.focusedSelectionFormat.pointBlinkRate) >> 0;
  }
  this.setBlinkInterval(blinkRate);
};


/** @asprivate - does whatever focusIn handling is required and cannot be overridden 
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.requiredFocusInHandler = function(event) {
  this.org_apache_royale_textLayout_container_ContainerController_attachAllListeners();
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.KeyboardEvent.KEY_DOWN, org.apache.royale.utils.Language.closure(this.getInteractionHandler().keyDownHandler, this.getInteractionHandler(), 'keyDownHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.events.KeyboardEvent.KEY_UP, org.apache.royale.utils.Language.closure(this.getInteractionHandler().keyUpHandler, this.getInteractionHandler(), 'keyUpHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener(org.apache.royale.textLayout.events.FocusEvent.KEY_FOCUS_CHANGE, org.apache.royale.utils.Language.closure(this.getInteractionHandler().keyFocusChangeHandler, this.getInteractionHandler(), 'keyFocusChangeHandler'));
  if (org.apache.royale.textLayout.elements.GlobalSettings.playerEnablesSpicyFeatures && org.apache.royale.textLayout.elements.GlobalSettings.hasTouchScreen)
    this.org_apache_royale_textLayout_container_ContainerController__container.addEventListener("softKeyboardActivating", org.apache.royale.utils.Language.closure(this.getInteractionHandler().softKeyboardActivatingHandler, this.getInteractionHandler(), 'softKeyboardActivatingHandler'));
  this.getInteractionHandler().focusInHandler(event);
};


/** Processes the <code>FocusEvent.FOCUS_OUT</code> event when the client manages events.
 *
 * @asparam event The FocusEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.FocusEvent#FOCUS_OUT FocusEvent.FOCUS_OUT
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.focusOutHandler = function(event) {
  if (this.interactionManager) {
    this.interactionManager.focusOutHandler(event);
    this.setBlinkInterval((this.interactionManager.unfocusedSelectionFormat.pointBlinkRate) >> 0);
  }
  else
    this.setBlinkInterval(0);
};


/** @asprivate Does required focusOut handling.  Calls focusOutHandler.  @see #focusOutHandler 
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.requiredFocusOutHandler = function(event) {
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.KeyboardEvent.KEY_DOWN, org.apache.royale.utils.Language.closure(this.getInteractionHandler().keyDownHandler, this.getInteractionHandler(), 'keyDownHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.events.KeyboardEvent.KEY_UP, org.apache.royale.utils.Language.closure(this.getInteractionHandler().keyUpHandler, this.getInteractionHandler(), 'keyUpHandler'));
  this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener(org.apache.royale.textLayout.events.FocusEvent.KEY_FOCUS_CHANGE, org.apache.royale.utils.Language.closure(this.getInteractionHandler().keyFocusChangeHandler, this.getInteractionHandler(), 'keyFocusChangeHandler'));
  if (org.apache.royale.textLayout.elements.GlobalSettings.playerEnablesSpicyFeatures && org.apache.royale.textLayout.elements.GlobalSettings.hasTouchScreen)
    this.org_apache_royale_textLayout_container_ContainerController__container.removeEventListener("softKeyboardActivating", org.apache.royale.utils.Language.closure(this.getInteractionHandler().softKeyboardActivatingHandler, this.getInteractionHandler(), 'softKeyboardActivatingHandler'));
  this.getInteractionHandler().focusOutHandler(event);
};


/** Processes the <code>Event.ACTIVATE</code> event when the client manages events.
 *
 * @asparam event The Event object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 *
 * @see org.apache.royale.events.Event#ACTIVATE Event.ACTIVATE
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.activateHandler = function(event) {
  if (this.interactionManager)
    this.interactionManager.activateHandler(event);
};


/** Processes the <code>Event.DEACTIVATE</code> event when the client manages events. 
 *
 * @asparam event The Event object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.events.Event#DEACTIVATE Event.DEACTIVATE
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.deactivateHandler = function(event) {
  if (this.interactionManager)
    this.interactionManager.deactivateHandler(event);
};


/** Processes the <code>KeyboardEvent.KEY_DOWN</code> event when the client manages events.
 *
 * @asparam The KeyboardEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.KeyboardEvent#KEY_DOWN KeyboardEvent.KEY_DOWN
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.keyDownHandler = function(event) {
  if (this.interactionManager && !event.defaultPrevented)
    this.interactionManager.keyDownHandler(event);
};


/** Processes the <code>Keyboard.KEY_UP</code> event when the client manages events.
 *
 * @asparam event The KeyboardEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 *
 * @see org.apache.royale.events.KeyboardEvent#KEY_UP KeyboardEvent.KEY_UP
 * @param {org.apache.royale.events.KeyboardEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.keyUpHandler = function(event) {
  if (this.interactionManager && !event.defaultPrevented)
    this.interactionManager.keyUpHandler(event);
};


/** Processes the <code>FocusEvent.KEY_FOCUS_CHANGE</code> event when the client manages events.
 *
 * @asparam event The FocusEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.FocusEvent#KEY_FOCUS_CHANGE FocusEvent.KEY_FOCUS_CHANGE
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.keyFocusChangeHandler = function(event) {
  if (this.interactionManager)
    this.interactionManager.keyFocusChangeHandler(event);
};


/** Processes the <code>TextEvent.TEXT_INPUT</code> event when the client manages events.
 *
 * @asparam event  The TextEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 *
 * @see org.apache.royale.events.TextEvent#TEXT_INPUT TextEvent.TEXT_INPUT
 * @param {org.apache.royale.text.events.TextEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.textInputHandler = function(event) {
  if (this.interactionManager && !event.defaultPrevented)
    this.interactionManager.textInputHandler(event);
};


/** Processes the <code>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</code> event when the client manages events.
 *
 * @asparam event  The SoftKeyboardEvent object.
 *
 * @playerversion Flash 10.2
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.events.SoftKeyboardEvent#SOFT_KEYBOARD_ACTIVATING SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.softKeyboardActivatingHandler = function(event) {
  if (this.interactionManager)
    this.interactionManager.softKeyboardActivatingHandler(event);
};


/** Processes the <code>IMEEvent.IME_START_COMPOSITION</code> event when the client manages events.
 *
 * @asparam event  The IMEEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.events.IMEEvent.IME_START_COMPOSITION
 * @param {org.apache.royale.text.events.IMEEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.imeStartCompositionHandler = function(event) {
  if (this.interactionManager)
    this.interactionManager.imeStartCompositionHandler(event);
};


/** 
 * Processes the <code>ContextMenuEvent.MENU_SELECT</code> event when the client manages events.
 * 
 * @asparam The ContextMenuEvent object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * 
 * @see org.apache.royale.events.ContextMenuEvent#MENU_SELECT ContextMenuEvent.MENU_SELECT
 * @param {org.apache.royale.textLayout.events.ContextMenuEvent} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.menuSelectHandler = function(event) {
  if (this.interactionManager) {
    this.interactionManager.menuSelectHandler(event);
  } else {
  }
};


/**
 * Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.
 * 
 * @asparam The Event object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * 
 * @see org.apache.royale.events.Event Event
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.editHandler = function(event) {
  if (this.interactionManager && !event.defaultPrevented)
    this.interactionManager.editHandler(event);
};


/** 
 * Sets the range of selected text in a component implementing ITextSupport.
 * If either of the arguments is out of bounds the selection should not be changed.
 * Components which wish to support inline IME should call into this method.
 * 
 * @asparam anchorIndex The zero-based index value of the character at the anchor end of the selection
 *
 * @asparam activeIndex The zero-based index value of the character at the active end of the selection.
 * 
 * @playerversion Flash 10.0
 * @langversion 3.0
 * @param {number} anchorIndex
 * @param {number} activeIndex
 */
org.apache.royale.textLayout.container.ContainerController.prototype.selectRange = function(anchorIndex, activeIndex) {
  if (this.interactionManager && this.interactionManager.editingMode != org.apache.royale.textLayout.edit.EditingMode.READ_ONLY) {
    this.interactionManager.selectRange(anchorIndex, activeIndex);
  }
};


/**
 * @private
 * @type {org.apache.royale.utils.Timer}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_blinkTimer;


/**
 * @private
 * @type {org.apache.royale.graphics.IRect}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_blinkObject;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_blinkState;


/**
 * @private
 * @param {org.apache.royale.graphics.IRect} obj
 * @param {number} blinkInterval
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_startBlinkingCursor = function(obj, blinkInterval) {
  if (!this.org_apache_royale_textLayout_container_ContainerController_blinkTimer)
    this.org_apache_royale_textLayout_container_ContainerController_blinkTimer = new org.apache.royale.utils.Timer(blinkInterval, 0);
  this.org_apache_royale_textLayout_container_ContainerController_blinkObject = obj;
  this.org_apache_royale_textLayout_container_ContainerController_blinkTimer.addEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.org_apache_royale_textLayout_container_ContainerController_blinkTimerHandler, this, 'org_apache_royale_textLayout_container_ContainerController_blinkTimerHandler'));
  this.org_apache_royale_textLayout_container_ContainerController_blinkTimer.start();
};


/**
 * Stops cursor from blinking
 * @asprivate
 * @protected
 */
org.apache.royale.textLayout.container.ContainerController.prototype.stopBlinkingCursor = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController_blinkTimer)
    this.org_apache_royale_textLayout_container_ContainerController_blinkTimer.stop();
  if (this.org_apache_royale_textLayout_container_ContainerController_blinkObject) {
    var /** @type {org.apache.royale.textLayout.edit.SelectionFormat} */ selFormat = this.interactionManager.currentSelectionFormat;
    var /** @type {org.apache.royale.graphics.SolidColor} */ fill = this.org_apache_royale_textLayout_container_ContainerController_blinkObject.fill;
    fill.alpha = selFormat.pointAlpha;
    fill.color = selFormat.pointColor;
    this.org_apache_royale_textLayout_container_ContainerController_blinkObject.draw();
    this.org_apache_royale_textLayout_container_ContainerController_blinkObject.alpha = 1;
    this.org_apache_royale_textLayout_container_ContainerController_blinkState = false;
  }
  this.org_apache_royale_textLayout_container_ContainerController_blinkObject = null;
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_blinkTimerHandler = function(event) {
  var /** @type {org.apache.royale.textLayout.edit.SelectionFormat} */ selFormat = this.interactionManager.currentSelectionFormat;
  if (selFormat) {
    var /** @type {org.apache.royale.graphics.SolidColor} */ fill = this.org_apache_royale_textLayout_container_ContainerController_blinkObject.fill;
    if (this.org_apache_royale_textLayout_container_ContainerController_blinkState) {
      fill.alpha = selFormat.pointBlinkAlpha;
      fill.color = selFormat.pointBlinkColor;
    } else {
      fill.alpha = selFormat.pointAlpha;
      fill.color = selFormat.pointColor;
    }
    this.org_apache_royale_textLayout_container_ContainerController_blinkObject.draw();
    this.org_apache_royale_textLayout_container_ContainerController_blinkState = !this.org_apache_royale_textLayout_container_ContainerController_blinkState;
  }
  else
    this.org_apache_royale_textLayout_container_ContainerController_blinkObject.alpha = (this.org_apache_royale_textLayout_container_ContainerController_blinkObject.alpha == 1.0) ? 0.0 : 1.0;
};


/** 
 * Set the blink interval.
 * 
 * @asparam intervalMS - number of microseconds between blinks
 * @asprivate
 * @protected
 * @param {number} intervalMS
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setBlinkInterval = function(intervalMS) {
  var /** @type {number} */ blinkInterval = intervalMS;
  if (blinkInterval == 0) {
    if (this.org_apache_royale_textLayout_container_ContainerController_blinkTimer)
      this.org_apache_royale_textLayout_container_ContainerController_blinkTimer.stop();
    if (this.org_apache_royale_textLayout_container_ContainerController_blinkObject)
      this.org_apache_royale_textLayout_container_ContainerController_blinkObject.alpha = 1.0;
  } else if (this.org_apache_royale_textLayout_container_ContainerController_blinkTimer) {
    this.org_apache_royale_textLayout_container_ContainerController_blinkTimer.delay = blinkInterval;
    if (this.org_apache_royale_textLayout_container_ContainerController_blinkObject)
      this.org_apache_royale_textLayout_container_ContainerController_blinkTimer.start();
  }
};


/** Draw the caret for a selection 
 * @asparam x	x-location where caret is drawn
 * @asparam y y-location where caret is drawn
 * @asparam w	width of caret
 * @asparam h	height of caret
 * @asprivate
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 */
org.apache.royale.textLayout.container.ContainerController.prototype.drawPointSelection = function(selFormat, x, y, w, h) {
  var /** @type {org.apache.royale.graphics.IRect} */ selObj = this.textFlow.tlfFactory.getRect(selFormat.pointBlendMode);
  if (this._hasScrollRect) {
    if (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      if (x >= this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight)
        x -= w;
    }
    else if (y >= this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom)
      y -= h;
  }
  
  selObj.fill = new org.apache.royale.graphics.SolidColor(selFormat.pointColor);
  selObj.drawRect(0, 0, w, h);
  selObj.width = w;
  selObj.height = h;
  selObj.x = x;
  selObj.y = y;
  if (selFormat.pointBlinkRate != 0 && this.interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE)
    this.org_apache_royale_textLayout_container_ContainerController_startBlinkingCursor(selObj, (selFormat.pointBlinkRate) >> 0);
  this.addSelectionChild(selObj);
};


/** Add cell selection shapes to the displaylist. @asprivate 
 * @param {number} color
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock} tableBlock
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} startCoords
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} endCoords
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addCellSelectionShapes = function(color, tableBlock, startCoords, endCoords) {
  if (!tableBlock)
    return;
  if (!startCoords.isValid() || !endCoords.isValid())
    return;
  var /** @type {Array} */ cells = tableBlock.getCellsInRange(startCoords, endCoords);
  var /** @type {org.apache.royale.graphics.IRect} */ selObj = this.textFlow.tlfFactory.getRect();
  selObj.fill = new org.apache.royale.graphics.SolidColor(color);
  var foreachiter1_target = cells;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var cell = foreachiter1_target[foreachiter1];
  {
    var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = cell.getRow();
    var /** @type {org.apache.royale.geom.Rectangle} */ r = new org.apache.royale.geom.Rectangle(cell.x, cell.y + tableBlock.y, cell.width, row.composedHeight);
    selObj.drawRect(r.x, r.y, r.width, r.height);
  }}
  
  this.addSelectionChild(selObj);
};


/** 
 * Add cell selection shapes to the displaylist.
 * @param {Array} cells
 * @param {number} color
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock} tableBlock
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addCellSelections = function(cells, color, tableBlock) {
  var /** @type {org.apache.royale.graphics.ICompoundGraphic} */ shape = this.textFlow.tlfFactory.getCompoundGraphic();
  shape.fill = new org.apache.royale.graphics.SolidColor(color);
  var foreachiter2_target = cells;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var cell = foreachiter2_target[foreachiter2];
  {
    var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ row = cell.getRow();
    var /** @type {org.apache.royale.geom.Rectangle} */ rectangle = new org.apache.royale.geom.Rectangle(cell.x, cell.y + tableBlock.y, cell.width, row.composedHeight);
    shape.drawRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  }}
  
  this.addSelectionChild(shape);
};


/** Add selection shapes to the displaylist. @asprivate 
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {number} selectionAbsoluteStart
 * @param {number} selectionAbsoluteEnd
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addSelectionShapes = function(selFormat, selectionAbsoluteStart, selectionAbsoluteEnd) {
  if (!this.interactionManager || this.org_apache_royale_textLayout_container_ContainerController__textLength == 0 || selectionAbsoluteStart == -1 || selectionAbsoluteEnd == -1)
    return;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ prevLine;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ nextLine;
  if (selectionAbsoluteStart != selectionAbsoluteEnd) {
    var /** @type {number} */ absoluteControllerStart = this.absoluteStart;
    var /** @type {number} */ absoluteControllerEnd = (this.absoluteStart + this.textLength) >> 0;
    if (selectionAbsoluteStart < absoluteControllerStart)
      selectionAbsoluteStart = absoluteControllerStart;
    else if (selectionAbsoluteStart >= absoluteControllerEnd)
      return;
    if (selectionAbsoluteEnd > absoluteControllerEnd)
      selectionAbsoluteEnd = absoluteControllerEnd;
    else if (selectionAbsoluteEnd < absoluteControllerStart)
      return;
    
    
    
    var /** @type {number} */ begLine = this.flowComposer.findLineIndexAtPosition(selectionAbsoluteStart);
    var /** @type {number} */ endLine = selectionAbsoluteStart == selectionAbsoluteEnd ? begLine : this.flowComposer.findLineIndexAtPosition(selectionAbsoluteEnd);
    if (endLine >= this.flowComposer.numLines)
      endLine = (this.flowComposer.numLines - 1) >> 0;
    var /** @type {org.apache.royale.graphics.ICompoundGraphic} */ selObj = this.textFlow.tlfFactory.getCompoundGraphic(selFormat.rangeBlendMode);
    prevLine = begLine ? this.flowComposer.getLineAt((begLine - 1) >> 0) : null;
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = this.flowComposer.getLineAt(begLine);
    for (var /** @type {number} */ idx = begLine; idx <= endLine; idx++) {
      nextLine = idx != this.flowComposer.numLines - 1 ? this.flowComposer.getLineAt((idx + 1) >> 0) : null;
      line.hiliteBlockSelection(selObj, selFormat, this.org_apache_royale_textLayout_container_ContainerController__container, selectionAbsoluteStart < line.absoluteStart ? line.absoluteStart : selectionAbsoluteStart, (selectionAbsoluteEnd > line.absoluteStart + line.textLength ? line.absoluteStart + line.textLength : selectionAbsoluteEnd) >> 0, prevLine, nextLine);
      var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ temp = line;
      line = nextLine;
      prevLine = temp;
    }
    this.addSelectionChild(selObj);
  } else {
    var /** @type {number} */ lineIdx = this.flowComposer.findLineIndexAtPosition(selectionAbsoluteStart);
    if (lineIdx == this.flowComposer.numLines)
      lineIdx--;
    if (this.flowComposer.getLineAt(lineIdx).controller == this) {
      prevLine = lineIdx != 0 ? this.flowComposer.getLineAt((lineIdx - 1) >> 0) : null;
      nextLine = lineIdx != this.flowComposer.numLines - 1 ? this.flowComposer.getLineAt((lineIdx + 1) >> 0) : null;
      this.flowComposer.getLineAt(lineIdx).hilitePointSelection(selFormat, selectionAbsoluteStart, this.org_apache_royale_textLayout_container_ContainerController__container, prevLine, nextLine);
    }
  }
};


/** Remove all selection shapes. @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.clearSelectionShapes = function() {
  this.stopBlinkingCursor();
  var /** @type {org.apache.royale.core.IParentIUIBase} */ selectionSprite = this.getSelectionSprite(false);
  if (selectionSprite != null) {
    if (selectionSprite.parent)
      this.removeSelectionContainer(selectionSprite);
    while (selectionSprite.numElements > 0)
      selectionSprite.removeElement(selectionSprite.getElementAt(0));
    return;
  }
};


/** Add a selection child. @asprivate 
 * @param {org.apache.royale.core.IChild} child
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addSelectionChild = function(child) {
  var /** @type {org.apache.royale.core.IParentIUIBase} */ selectionSprite = this.getSelectionSprite(true);
  if (selectionSprite == null) {
    return;
  }
  var /** @type {org.apache.royale.textLayout.edit.SelectionFormat} */ selFormat = this.interactionManager.currentSelectionFormat;
  var /** @type {string} */ curBlendMode = (this.interactionManager.activePosition == this.interactionManager.anchorPosition) ? selFormat.pointBlendMode : selFormat.rangeBlendMode;
  if (this.textFlow.tlfFactory.getBlendMode(selectionSprite) != curBlendMode)
    this.textFlow.tlfFactory.setBlendMode(selectionSprite, curBlendMode);
  var /** @type {number} */ curAlpha = (this.interactionManager.activePosition == this.interactionManager.anchorPosition) ? selFormat.pointAlpha : selFormat.rangeAlpha;
  if (selectionSprite.alpha != curAlpha)
    selectionSprite.alpha = curAlpha;
  if (selectionSprite.numElements == 0)
    this.addSelectionContainer(selectionSprite);
  selectionSprite.addElement(child);
};


/** Test for a selection child. @asprivate 
 * @param {org.apache.royale.core.IChild} child
 * @return {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.containsSelectionChild = function(child) {
  var /** @type {org.apache.royale.core.IParentIUIBase} */ selectionSprite = this.getSelectionSprite(false);
  if (selectionSprite == null) {
    return false;
  }
  return selectionSprite.getElementIndex(child) > -1;
};


/** @asprivate 
 * @return {org.apache.royale.core.IUIBase}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getBackgroundShape = function() {
  if (!this.org_apache_royale_textLayout_container_ContainerController__backgroundShape) {
    this.org_apache_royale_textLayout_container_ContainerController__backgroundShape = this.textFlow.tlfFactory.getCompoundGraphic();
    this.addBackgroundShape(this.org_apache_royale_textLayout_container_ContainerController__backgroundShape);
  }
  return this.org_apache_royale_textLayout_container_ContainerController__backgroundShape;
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getEffectivePaddingLeft = function() {
  return Number(this.computedFormat.paddingLeft == org.apache.royale.textLayout.formats.FormatValue.AUTO ? this.computedFormat.borderLeftWidth + this.computedFormat.marginLeft : this.computedFormat.paddingLeft + this.computedFormat.borderLeftWidth + this.computedFormat.marginLeft);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getEffectivePaddingRight = function() {
  return Number(this.computedFormat.paddingRight == org.apache.royale.textLayout.formats.FormatValue.AUTO ? this.computedFormat.borderRightWidth + this.computedFormat.marginRight : this.computedFormat.paddingRight + this.computedFormat.borderRightWidth + this.computedFormat.marginRight);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getEffectivePaddingTop = function() {
  return Number(this.computedFormat.paddingTop == org.apache.royale.textLayout.formats.FormatValue.AUTO ? this.computedFormat.borderTopWidth + this.computedFormat.marginTop : this.computedFormat.paddingTop + this.computedFormat.borderTopWidth + this.computedFormat.marginTop);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getEffectivePaddingBottom = function() {
  return Number(this.computedFormat.paddingBottom == org.apache.royale.textLayout.formats.FormatValue.AUTO ? this.computedFormat.borderBottomWidth + this.computedFormat.marginBottom : this.computedFormat.paddingBottom + this.computedFormat.borderBottomWidth + this.computedFormat.marginBottom);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getTotalPaddingLeft = function() {
  return this.getEffectivePaddingLeft() + (this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.getEffectivePaddingLeft() : 0);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getTotalPaddingRight = function() {
  return this.getEffectivePaddingRight() + (this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.getEffectivePaddingRight() : 0);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getTotalPaddingTop = function() {
  return this.getEffectivePaddingTop() + (this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.getEffectivePaddingTop() : 0);
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getTotalPaddingBottom = function() {
  return this.getEffectivePaddingBottom() + (this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.getEffectivePaddingBottom() : 0);
};


/**
 * @private
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController__selectionSprite;


/** @asprivate 
 * @param {boolean} createForDrawing
 * @return {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getSelectionSprite = function(createForDrawing) {
  if (createForDrawing) {
    if (this.org_apache_royale_textLayout_container_ContainerController__selectionSprite == null) {
      this.org_apache_royale_textLayout_container_ContainerController__selectionSprite = this.textFlow.tlfFactory.getContainer();
    }
  }
  return this.org_apache_royale_textLayout_container_ContainerController__selectionSprite;
};


/**
 * @private
 * @return {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.ContainerController.createContainerControllerInitialFormat = function() {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ ccif = new org.apache.royale.textLayout.formats.TextLayoutFormat();
  ccif.columnCount = org.apache.royale.textLayout.formats.FormatValue.INHERIT;
  ccif.columnGap = org.apache.royale.textLayout.formats.FormatValue.INHERIT;
  ccif.columnWidth = org.apache.royale.textLayout.formats.FormatValue.INHERIT;
  ccif.verticalAlign = org.apache.royale.textLayout.formats.FormatValue.INHERIT;
  return ccif;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.ContainerController._containerControllerInitialFormat;


/** @asprivate 
 */
org.apache.royale.textLayout.container.ContainerController.prototype.clearCompositionResults = function() {
  this.setTextLength(0);
  var foreachiter3_target = this.org_apache_royale_textLayout_container_ContainerController__shapeChildren;
  for (var foreachiter3 in foreachiter3_target) 
  {
  var line = foreachiter3_target[foreachiter3];
  {
    if (org.apache.royale.utils.Language.is(line, org.apache.royale.text.engine.ITextLine))
      this.removeTextLine(line);
    else
      this.removeTableBlock(line);
    
  }}
  
  this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length = 0;
  this.org_apache_royale_textLayout_container_ContainerController__linesInView.length = 0;
  if (this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer)
    this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.length = 0;
  if (this.org_apache_royale_textLayout_container_ContainerController__composedFloats)
    this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length = 0;
};


/**
 * @private
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController._scratchRectangle;


/**
 * @private
 * @param {Array} targetArray
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_intersperseTableBlocks = function(targetArray) {
  if (this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.length == 0)
    return;
  var /** @type {number} */ blockIdx = 0;
  var /** @type {number} */ startLoc = this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView[0].userData.parentTable.getAbsoluteStart();
  for (var /** @type {number} */ i = 0; i < targetArray.length; i++) {
    if (targetArray[i].userData.absoluteStart < startLoc)
      continue;
    targetArray.splice(i, 0, this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView[blockIdx++]);
    if (blockIdx == this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.length)
      break;
  }
  while (blockIdx < this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.length)
    targetArray.push(this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView[blockIdx++]);
};


/**
 *  Add DisplayObjects that were created by composition to the container.
 *  @asprivate 
 * @royaleignorecoercion org.apache.royale.textLayout.compose.ITextFlowTableBlock
 */
org.apache.royale.textLayout.container.ContainerController.prototype.updateCompositionShapes = function() {
  if (!this.shapesInvalid) {
    return;
  }
  var /** @type {number} */ originalYScroll = this.org_apache_royale_textLayout_container_ContainerController__yScroll;
  if (this.verticalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF && !this.org_apache_royale_textLayout_container_ContainerController__measureHeight)
    this.org_apache_royale_textLayout_container_ContainerController__yScroll = this.org_apache_royale_textLayout_container_ContainerController_computeVerticalScrollPosition(this.org_apache_royale_textLayout_container_ContainerController__yScroll, false);
  var /** @type {number} */ originalXScroll = this.org_apache_royale_textLayout_container_ContainerController__xScroll;
  if (this.horizontalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF && !this.org_apache_royale_textLayout_container_ContainerController__measureWidth)
    this.org_apache_royale_textLayout_container_ContainerController__xScroll = this.org_apache_royale_textLayout_container_ContainerController_computeHorizontalScrollPosition(this.org_apache_royale_textLayout_container_ContainerController__xScroll, false);
  var /** @type {boolean} */ scrolled = (originalYScroll != this.org_apache_royale_textLayout_container_ContainerController__yScroll || originalXScroll != this.org_apache_royale_textLayout_container_ContainerController__xScroll);
  if (scrolled)
    this.org_apache_royale_textLayout_container_ContainerController__linesInView.length = 0;
  this.fillShapeChildren();
  var /** @type {Array} */ newShapeChildren = this.org_apache_royale_textLayout_container_ContainerController__linesInView;
  this.org_apache_royale_textLayout_container_ContainerController_intersperseTableBlocks(newShapeChildren);
  var /** @type {number} */ childIdx = this.getFirstTextLineChildIndex();
  var /** @type {number} */ newIdx = 0;
  var /** @type {number} */ shapeChildrenStartIdx = 0;
  if (this.org_apache_royale_textLayout_container_ContainerController__updateStart > this.absoluteStart && newShapeChildren.length > 0) {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ firstLine = org.apache.royale.utils.Language.as(newShapeChildren[0].userData, org.apache.royale.textLayout.compose.ITextFlowLine, true);
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ prevLine = this.flowComposer.findLineAtPosition((firstLine.absoluteStart - 1) >> 0);
    if (org.apache.royale.utils.Language.is(prevLine, org.apache.royale.textLayout.compose.ITextFlowTableBlock)) {
      shapeChildrenStartIdx = (this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.indexOf(prevLine.container)) >> 0;
    } else {
      var /** @type {org.apache.royale.text.engine.ITextLine} */ prevTextLine = prevLine.peekTextLine();
      shapeChildrenStartIdx = (this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.indexOf(prevTextLine)) >> 0;
    }
    if (shapeChildrenStartIdx >= 0) {
      shapeChildrenStartIdx++;
      childIdx += shapeChildrenStartIdx;
    }
    else
      shapeChildrenStartIdx = 0;
  }
  var /** @type {number} */ oldIdx = shapeChildrenStartIdx;
  while (newIdx != newShapeChildren.length) {
    var /** @type {*} */ newChild = newShapeChildren[newIdx];
    if (newChild == this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[oldIdx]) {
      
      childIdx++;
      newIdx++;
      oldIdx++;
      if (org.apache.royale.utils.Language.is(newChild, org.apache.royale.textLayout.elements.TableBlockContainer)) {
        newChild.userData.updateCompositionShapes();
      }
      continue;
    }
    var /** @type {number} */ newChildIdx = (this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.indexOf(newChild)) >> 0;
    if (org.apache.royale.utils.Language.is(newChild, org.apache.royale.text.engine.ITextLine)) {
      if (newChildIdx == -1) {
        this.addTextLine(newChild, childIdx++);
        
        newIdx++;
      } else {
        this.org_apache_royale_textLayout_container_ContainerController_removeAndRecycleTextLines(oldIdx, newChildIdx);
        oldIdx = newChildIdx;
      }
    } else {
      if (newChildIdx == -1) {
        this.addTableBlock(newChild, childIdx++);
        
        newIdx++;
      } else {
        newChild.userData.updateCompositionShapes();
        this.org_apache_royale_textLayout_container_ContainerController_removeAndRecycleTextLines(oldIdx, newChildIdx);
        oldIdx = newChildIdx;
      }
    }
  }
  this.org_apache_royale_textLayout_container_ContainerController_removeAndRecycleTextLines(oldIdx, (this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length) >> 0);
  if (shapeChildrenStartIdx > 0) {
    this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length = shapeChildrenStartIdx;
    this.org_apache_royale_textLayout_container_ContainerController__shapeChildren = this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.concat(newShapeChildren);
    this.org_apache_royale_textLayout_container_ContainerController__linesInView.length = 0;
  } else {
    this.org_apache_royale_textLayout_container_ContainerController__linesInView = this.org_apache_royale_textLayout_container_ContainerController__shapeChildren;
    this.org_apache_royale_textLayout_container_ContainerController__linesInView.length = 0;
    this.org_apache_royale_textLayout_container_ContainerController__shapeChildren = newShapeChildren;
  }
  if ((this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer && this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.length > 0) || (this.org_apache_royale_textLayout_container_ContainerController__composedFloats && this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length > 0))
    this.updateGraphics(this.org_apache_royale_textLayout_container_ContainerController__updateStart);
  this.shapesInvalid = false;
  this.updateVisibleRectangle();
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.textFlow;
  var /** @type {boolean} */ needsCtrlKey = (this.interactionManager != null && this.interactionManager.editingMode == org.apache.royale.textLayout.edit.EditingMode.READ_WRITE);
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ firstVisibleLine = this.getFirstVisibleLine();
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ lastVisibleLine = this.getLastVisibleLine();
  org.apache.royale.textLayout.container.ContainerController.scratchRectangle.left = this.org_apache_royale_textLayout_container_ContainerController__contentLeft;
  org.apache.royale.textLayout.container.ContainerController.scratchRectangle.top = this.org_apache_royale_textLayout_container_ContainerController__contentTop;
  org.apache.royale.textLayout.container.ContainerController.scratchRectangle.width = this.org_apache_royale_textLayout_container_ContainerController__contentWidth;
  org.apache.royale.textLayout.container.ContainerController.scratchRectangle.height = this.org_apache_royale_textLayout_container_ContainerController__contentHeight;
  this.org_apache_royale_textLayout_container_ContainerController__mouseEventManager.updateHitTests(this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL && this._hasScrollRect ? this.org_apache_royale_textLayout_container_ContainerController__contentWidth : 0, org.apache.royale.textLayout.container.ContainerController.scratchRectangle, tf, firstVisibleLine ? firstVisibleLine.absoluteStart : this.org_apache_royale_textLayout_container_ContainerController__absoluteStart, (lastVisibleLine ? lastVisibleLine.absoluteStart + lastVisibleLine.textLength - 1 : this.org_apache_royale_textLayout_container_ContainerController__absoluteStart) >> 0, this, needsCtrlKey);
  this.org_apache_royale_textLayout_container_ContainerController__updateStart = this.org_apache_royale_textLayout_container_ContainerController__rootElement.textLength;
  if (this.org_apache_royale_textLayout_container_ContainerController__measureWidth || this.org_apache_royale_textLayout_container_ContainerController__measureHeight)
    this.attachTransparentBackgroundForHit(false);
  if (tf.backgroundManager) {
    tf.backgroundManager.onUpdateComplete(this);
  }
  if (scrolled && tf.hasEventListener(org.apache.royale.textLayout.events.TextLayoutEvent.SCROLL)) {
    if (originalYScroll != this.org_apache_royale_textLayout_container_ContainerController__yScroll)
      tf.dispatchEvent(new org.apache.royale.textLayout.events.ScrollEvent(org.apache.royale.textLayout.events.TextLayoutEvent.SCROLL, false, false, org.apache.royale.textLayout.events.ScrollEventDirection.VERTICAL, this.org_apache_royale_textLayout_container_ContainerController__yScroll - originalYScroll));
    if (originalXScroll != this.org_apache_royale_textLayout_container_ContainerController__xScroll)
      tf.dispatchEvent(new org.apache.royale.textLayout.events.ScrollEvent(org.apache.royale.textLayout.events.TextLayoutEvent.SCROLL, false, false, org.apache.royale.textLayout.events.ScrollEventDirection.HORIZONTAL, this.org_apache_royale_textLayout_container_ContainerController__xScroll - originalXScroll));
  }
  if (tf.hasEventListener(org.apache.royale.textLayout.events.UpdateCompleteEvent.UPDATE_COMPLETE)) {
    tf.dispatchEvent(new org.apache.royale.textLayout.events.UpdateCompleteEvent(org.apache.royale.textLayout.events.UpdateCompleteEvent.UPDATE_COMPLETE, false, false, tf, this));
  }
};


/**
 *  @royaleignorecoercion org.apache.royale.core.IParentIUIBase
 *  @royaleignorecoercion org.apache.royale.core.IUIBase
 * @param {number} updateStart
 */
org.apache.royale.textLayout.container.ContainerController.prototype.updateGraphics = function(updateStart) {
  var /** @type {Object} */ inlineHolder;
  var /** @type {Array} */ visibleFloats = [];
  var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo;
  var /** @type {Object} */ float;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ firstLine = this.getFirstVisibleLine();
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ lastLine = this.getLastVisibleLine();
  var /** @type {number} */ firstVisiblePosition = firstLine ? firstLine.absoluteStart : this.absoluteStart;
  var /** @type {number} */ lastVisiblePosition = (lastLine ? lastLine.absoluteStart + lastLine.textLength : this.absoluteStart + this.textLength) >> 0;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ followingLine = this.flowComposer.findLineAtPosition(lastVisiblePosition);
  var /** @type {number} */ lastPossibleFloatPosition = (followingLine ? followingLine.absoluteStart + followingLine.textLength : this.absoluteStart + this.textLength) >> 0;
  lastPossibleFloatPosition = (Math.min(lastPossibleFloatPosition, this.absoluteStart + this.textLength)) >> 0;
  lastPossibleFloatPosition = (Math.min(lastPossibleFloatPosition, lastVisiblePosition + 2000)) >> 0;
  lastPossibleFloatPosition = (Math.min(lastPossibleFloatPosition, this.flowComposer.damageAbsoluteStart)) >> 0;
  
  var /** @type {string} */ wmode = this.effectiveBlockProgression;
  var /** @type {number} */ width = this.org_apache_royale_textLayout_container_ContainerController__measureWidth ? this.org_apache_royale_textLayout_container_ContainerController__contentWidth : this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
  var /** @type {number} */ height = this.org_apache_royale_textLayout_container_ContainerController__measureHeight ? this.org_apache_royale_textLayout_container_ContainerController__contentHeight : this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
  var /** @type {number} */ adjustX = (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL) ? this.org_apache_royale_textLayout_container_ContainerController__xScroll - width : this.org_apache_royale_textLayout_container_ContainerController__xScroll;
  var /** @type {number} */ adjustY = this.org_apache_royale_textLayout_container_ContainerController__yScroll;
  var /** @type {number} */ floatIndex = this.findFloatIndexAtOrAfter(updateStart);
  var /** @type {number} */ containerListIndex = 0;
  var /** @type {number} */ childIdx = this.getFirstTextLineChildIndex();
  if (floatIndex > 0) {
    floatInfo = this.org_apache_royale_textLayout_container_ContainerController__composedFloats[floatIndex - 1];
    containerListIndex = (this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.indexOf(floatInfo.graphic)) >> 0;
    while (containerListIndex == -1 && floatIndex > 0) {
      --floatIndex;
      floatInfo = this.org_apache_royale_textLayout_container_ContainerController__composedFloats[floatIndex];
      containerListIndex = (this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.indexOf(floatInfo.graphic)) >> 0;
    }
    containerListIndex++;
    
    for (var /** @type {number} */ m = 0; m < floatIndex; ++m) {
      
      if (this.org_apache_royale_textLayout_container_ContainerController__composedFloats[m].absolutePosition >= this.absoluteStart)
        visibleFloats.push(this.org_apache_royale_textLayout_container_ContainerController__composedFloats[m].graphic);
    }
  }
  if (!this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer)
    this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer = [];
  var /** @type {number} */ numContainerList = (this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.length) >> 0;
  
  var /** @type {number} */ numFloats = (this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length) >> 0;
  for (; floatIndex < numFloats;) {
    floatInfo = this.org_apache_royale_textLayout_container_ContainerController__composedFloats[floatIndex];
    float = floatInfo.graphic;
    var /** @type {Object} */ parent = floatInfo.parent;
    var /** @type {boolean} */ shouldDisplayGraphic;
    if (!float)
      shouldDisplayGraphic = false; else {
      if (floatInfo.floatType == org.apache.royale.textLayout.formats.Float.NONE)
        shouldDisplayGraphic = floatInfo.absolutePosition >= firstVisiblePosition && floatInfo.absolutePosition < lastVisiblePosition;
      else
        shouldDisplayGraphic = this.org_apache_royale_textLayout_container_ContainerController_floatIsVisible(wmode, adjustX, adjustY, width, height, floatInfo) && floatInfo.absolutePosition < lastPossibleFloatPosition && floatInfo.absolutePosition >= this.absoluteStart;
    }
    if (!shouldDisplayGraphic) {
      if (floatInfo.absolutePosition >= lastPossibleFloatPosition)
        break;
      ++floatIndex;
      continue;
    }
    if (visibleFloats.indexOf(float) < 0)
      visibleFloats.push(float);
    if (floatInfo.floatType == org.apache.royale.textLayout.formats.Float.NONE) {
      var /** @type {org.apache.royale.text.engine.ITextLine} */ tl = parent;
      if (tl) {
        var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = tl.userData;
        if (!tfl || floatInfo.absolutePosition < tfl.absoluteStart || floatInfo.absolutePosition >= tfl.absoluteStart + tfl.textLength || tl.parent == null || tl.validity == "invalid") {
          tfl = this.flowComposer.findLineAtPosition(floatInfo.absolutePosition);
          for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length; i++)
            if (this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[i].userData == tfl)
              break;
          parent = (i < this.org_apache_royale_textLayout_container_ContainerController__shapeChildren.length) ? this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[i] : null;
        }
      }
    }
    inlineHolder = float.parent;
    if (containerListIndex < numContainerList && floatInfo.parent == this.org_apache_royale_textLayout_container_ContainerController__container && inlineHolder && inlineHolder.parent == this.org_apache_royale_textLayout_container_ContainerController__container && float == this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer[containerListIndex]) {
      inlineHolder.x = 0;
      inlineHolder.y = 0;
      inlineHolder.alpha = floatInfo.alpha;
      inlineHolder.x += floatInfo.x;
      inlineHolder.y += floatInfo.y;
      
      ++floatIndex;
      ++containerListIndex;
      continue;
    }
    var /** @type {number} */ index = (this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.indexOf(float)) >> 0;
    if (index > containerListIndex && parent == this.org_apache_royale_textLayout_container_ContainerController__container) {
      var /** @type {Object} */ floatToRemove = this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer[containerListIndex++];
      if (floatToRemove.parent) {
        
        this.removeInlineGraphicElement(floatInfo.parent, floatToRemove.parent);
      }
    } else {
      if (containerListIndex < numContainerList && float == this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer[containerListIndex])
        containerListIndex++;
      inlineHolder = this.textFlow.tlfFactory.getContainer();
      inlineHolder.alpha = floatInfo.alpha;
      inlineHolder.x += floatInfo.x;
      inlineHolder.y += floatInfo.y;
      inlineHolder.addElement(float);
      if (parent == this.org_apache_royale_textLayout_container_ContainerController__container) {
        childIdx = (Math.min(childIdx, this.org_apache_royale_textLayout_container_ContainerController__container.numElements)) >> 0;
        this.addInlineGraphicElement(this.org_apache_royale_textLayout_container_ContainerController__container, inlineHolder, childIdx++);
      }
      else
        this.addInlineGraphicElement(parent, inlineHolder, 0);
      ++floatIndex;
    }
  }
  while (containerListIndex < this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer.length) {
    float = this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer[containerListIndex++];
    if (float.parent && visibleFloats.indexOf(float) < 0) {
      
      this.removeInlineGraphicElement(float.parent.parent, float.parent);
    }
  }
  
  this.org_apache_royale_textLayout_container_ContainerController__floatsInContainer = visibleFloats;
};


/**
 * @private
 * @param {string} wmode
 * @param {number} scrollX
 * @param {number} scrollY
 * @param {number} scrollWidth
 * @param {number} scrollHeight
 * @param {org.apache.royale.textLayout.compose.FloatCompositionData} floatInfo
 * @return {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_floatIsVisible = function(wmode, scrollX, scrollY, scrollWidth, scrollHeight, floatInfo) {
  var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ inlineGraphicElement = this.textFlow.findLeaf(floatInfo.absolutePosition);
  return (wmode == org.apache.royale.textLayout.formats.BlockProgression.TB) ? (floatInfo.y + inlineGraphicElement.elementHeight >= scrollY) && (floatInfo.y <= scrollY + scrollHeight) : (floatInfo.x + inlineGraphicElement.elementWidth >= scrollX) && (floatInfo.x <= scrollX + scrollWidth);
};


/**
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock} textBlock
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_releaseLinesInBlock = function(textBlock) {
  for (var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = textBlock.firstLine; textLine && textLine.parent == null; textLine = textLine.nextLine) {
  }
  if (!textLine && textBlock.firstLine) {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para;
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = textBlock.firstLine.userData;
    if (line)
      para = line.paragraph;
    textBlock.releaseLines(textBlock.firstLine, textBlock.lastLine);
    if (para)
      para.releaseTextBlock();
  }
};


/**
 * @private
 * @param {number} beginIndex
 * @param {number} endIndex
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_removeAndRecycleTextLines = function(beginIndex, endIndex) {
  var /** @type {org.apache.royale.textLayout.elements.IBackgroundManager} */ backgroundManager = this.textFlow.backgroundManager;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ child;
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock;
  for (var /** @type {number} */ index = beginIndex; index < endIndex; index++) {
    if (!org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[index], org.apache.royale.text.engine.ITextLine)) {
      this.removeTableBlock(this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[index]);
      child = null;
      continue;
    }
    child = this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[index];
    this.removeTextLine(child);
    
    if (child.textBlock != textBlock) {
      if (textBlock)
        this.org_apache_royale_textLayout_container_ContainerController_releaseLinesInBlock(textBlock);
      textBlock = child.textBlock;
    }
  }
  if (textBlock && (textBlock.lastLine == child || this.flowComposer.getControllerAt((this.flowComposer.numControllers - 1) >> 0) == this))
    this.org_apache_royale_textLayout_container_ContainerController_releaseLinesInBlock(textBlock);
  if (org.apache.royale.textLayout.compose.TextLineRecycler.textLineRecyclerEnabled) {
    while (beginIndex < endIndex) {
      if (!org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[beginIndex], org.apache.royale.text.engine.ITextLine)) {
        beginIndex++;
        continue;
      }
      child = this.org_apache_royale_textLayout_container_ContainerController__shapeChildren[beginIndex++];
      if (!child.parent) {
        if (child.userData == null) {
          org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(child);
          if (backgroundManager)
            backgroundManager.removeLineFromCache(child);
        } else {
          var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = child.userData;
          if (tfl && tfl.controller != this)
            continue;
          if (child.validity == "invalid" || (child.nextLine == null && child.previousLine == null && (!child.textBlock || child.textBlock.firstLine != child))) {
            child.userData = null;
            org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(child);
            if (backgroundManager)
              backgroundManager.removeLineFromCache(child);
          }
        }
      }
    }
  }
};


/**
 * Gets the index at which the first text line must appear in its parent.
 * The default implementation of this method, which may be overriden, returns the child index 
 * of the first <code>org.apache.royale.text.engine.ITextLine</code> child of <code>container</code>
 * if one exists, and that of the last child of <code>container</code> otherwise. 
 * 
 * @asreturn the index at which the first text line must appear in its parent.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * @protected
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getFirstTextLineChildIndex = function() {
  var /** @type {number} */ firstTextLine = 0;
  //var /** @type {number} */ firstTextLine = 0;
  for (firstTextLine = 0; firstTextLine < this.org_apache_royale_textLayout_container_ContainerController__container.numElements; ++firstTextLine) {
    if (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_ContainerController__container.getElementAt(firstTextLine), org.apache.royale.text.engine.ITextLine)) {
      break;
    }
    if (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_container_ContainerController__container.getElementAt(firstTextLine), org.apache.royale.textLayout.elements.TableBlockContainer))
      break;
  }
  return firstTextLine;
};


/**
 * Adds a <code>org.apache.royale.text.engine.ITextLine</code> object as a descendant of <code>container</code>.
 * The default implementation of this method, which may be overriden, adds the object
 * as a direct child of <code>container</code> at the specified index.
 * 
 * @asparam textLine the <code>org.apache.royale.text.engine.ITextLine</code> object to add
 * @asparam index insertion index of the text line in its parent 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {number} index
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addTextLine = function(textLine, index) {
  if (index > this.org_apache_royale_textLayout_container_ContainerController__container.numElements)
    index = this.org_apache_royale_textLayout_container_ContainerController__container.numElements;
  this.org_apache_royale_textLayout_container_ContainerController__container.addElementAt(textLine, index);
};


/**
 * Removes a <code>org.apache.royale.text.engine.ITextLine</code> object from its parent. 
 * The default implementation of this method, which may be overriden, removes the object
 * from <code>container</code> if it is a direct child of the latter.
 * 
 * This method may be called even if the object is not a descendant of <code>container</code>.
 * Any implementation of this method must ensure that no action is taken in this case.
 * 
 * @asparam textLine the <code>org.apache.royale.text.engine.ITextLine</code> object to remove 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeTextLine = function(textLine) {
  if (this.org_apache_royale_textLayout_container_ContainerController__container.getElementIndex(textLine) > -1)
    this.org_apache_royale_textLayout_container_ContainerController__container.removeElement(textLine);
};


/**
 * Adds a <code>TableBlockContainer</code> object as a descendant of <code>container</code>.
 * The default implementation of this method, which may be overriden, adds the object
 * as a direct child of <code>container</code> at the specified index.
 * 
 * @asparam textLine the <code>TableBlockContainer</code> object to add
 * @asparam index insertion index of the text line in its parent 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.textLayout.elements.TableBlockContainer} block
 * @param {number} index
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addTableBlock = function(block, index) {
  if (index > this.org_apache_royale_textLayout_container_ContainerController__container.numElements)
    index = this.org_apache_royale_textLayout_container_ContainerController__container.numElements;
  this.org_apache_royale_textLayout_container_ContainerController__container.addElementAt(block, index);
  block.userData.updateCompositionShapes();
};


/**
 * Removes a <code>TableBlockContainer</code> object from its parent. 
 * The default implementation of this method, which may be overriden, removes the object
 * from <code>container</code> if it is a direct child of the latter.
 * 
 * This method may be called even if the object is not a descendant of <code>container</code>.
 * Any implementation of this method must ensure that no action is taken in this case.
 * 
 * @asparam textLine the <code>TableBlockContainer</code> object to remove 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.textLayout.elements.TableBlockContainer} block
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeTableBlock = function(block) {
  if (this.org_apache_royale_textLayout_container_ContainerController__container.getElementIndex(block) > -1)
    this.org_apache_royale_textLayout_container_ContainerController__container.removeElement(block);
};


/**
 * Adds a <code>flash.display.Shape</code> object on which background shapes (such as background color) are drawn.
 * The default implementation of this method, which may be overriden, adds the object to <code>container</code>
 * just before the first <code>org.apache.royale.text.engine.ITextLine</code> child, if one exists, and after the last exisiting
 * child otherwise. 
 * 
 * @asparam shape <code>flash.display.Shape</code> object to add
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.Shape
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.core.IUIBase} shape
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addBackgroundShape = function(shape) {
  this.org_apache_royale_textLayout_container_ContainerController__container.addElementAt(this.org_apache_royale_textLayout_container_ContainerController__backgroundShape, this.getFirstTextLineChildIndex());
};


/**
 * Removes a <code>flash.display.Shape</code> object on which background shapes (such as background color) are drawn.
 * The default implementation of this method, which may be overriden, removes the object from its <code>parent</code>.
 * 
 * @asparam shape <code>flash.display.Shape</code> object to remove
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.Shape
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.core.IUIBase} shape
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeBackgroundShape = function(shape) {
  if (shape.parent)
    shape.parent.removeElement(shape);
};


/**
 * Adds a <code>flash.display.DisplayObjectContainer</code> object to which selection shapes (such as block selection highlight, cursor etc.) are added.
 * The default implementation of this method, which may be overriden, has the following behavior:
 * The object is added just before first <code>org.apache.royale.text.engine.ITextLine</code> child of <code>container</code> if one exists 
 * and the object is opaque and has normal blend mode. 
 * In all other cases, it is added as the last child of <code>container</code>.
 * 
 * @asparam selectionContainer <code>flash.display.DisplayObjectContainer</code> object to add
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see org.apache.royale.text.engine.ITextLine
 * @see #container
 * @protected
 * @param {org.apache.royale.core.IParentIUIBase} selectionContainer
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addSelectionContainer = function(selectionContainer) {
  if (this.textFlow.tlfFactory.getBlendMode(selectionContainer) == "normal") {
    this.org_apache_royale_textLayout_container_ContainerController__container.addElementAt(selectionContainer, this.getFirstTextLineChildIndex());
  }
  else
    this.org_apache_royale_textLayout_container_ContainerController__container.addElement(selectionContainer);
};


/**
 * Removes the <code>flash.display.DisplayObjectContainer</code> object which contains selection shapes (such as block selection highlight, cursor etc.).
 * The default implementation of this method, which may be overriden, removes the object from its parent if one exists.
 * 
 * @asparam selectionContainer <code>flash.display.DisplayObjectContainer</code> object to remove
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.core.IParentIUIBase} selectionContainer
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeSelectionContainer = function(selectionContainer) {
  selectionContainer.parent.removeElement(selectionContainer);
};


/**
 * Adds a <code>flash.display.DisplayObject</code> object as a descendant of <code>parent</code>.
 * The default implementation of this method, which may be overriden, adds the object
 * as a direct child of <code>parent</code> at the specified index. This is called to add 
 * InlineGraphicElements to the ITextLine or container.
 * 
 * @asparam parent the <code>flash.display.DisplayObjectContainer</code> object to add the inlineGraphicElement to
 * @asparam inlineGraphicElement the <code>flash.display.DisplayObject</code> object to add
 * @asparam index insertion index of the float in its parent 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 2.0
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see flash.display.DisplayObject
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.core.IParentIUIBase} parent
 * @param {org.apache.royale.core.IUIBase} inlineGraphicElement
 * @param {number} index
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addInlineGraphicElement = function(parent, inlineGraphicElement, index) {
  
  if (parent)
    parent.addElementAt(inlineGraphicElement, index);
};


/**
 * Removes a <code>flash.display.DisplayObject</code> object from its parent. 
 * The default implementation of this method, which may be overriden, removes the object
 * from <code>container</code> if it is a direct child of the latter.
 * 
 * This method may be called even if the object is not a descendant of <code>parent</code>.
 * Any implementation of this method must ensure that no action is taken in this case.
 * 
 * @asparam float the <code>flash.display.DisplayObject</code> object to remove 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 2.0
 * @langversion 3.0
 * 
 * @see flash.display.DisplayObjectContainer
 * @see flash.display.DisplayObject
 * @see #container
 * 
 * @protected
 * @param {org.apache.royale.core.IParentIUIBase} parent
 * @param {org.apache.royale.core.IUIBase} inlineGraphicElement
 */
org.apache.royale.textLayout.container.ContainerController.prototype.removeInlineGraphicElement = function(parent, inlineGraphicElement) {
  
  if (null != parent && inlineGraphicElement.parent == parent)
    parent.removeElement(inlineGraphicElement);
};


/** 
 * If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
 * halfway in view are clipped to the scrollable region. If not scrolling, clear the
 * scroll rectangle so that no clipping occurs.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 */
org.apache.royale.textLayout.container.ContainerController.prototype.updateVisibleRectangle = function() {
  if (this.horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF && this.verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF) {
    if (this._hasScrollRect) {
      this._hasScrollRect = false;
    }
  } else {
    var /** @type {number} */ contentRight = this.org_apache_royale_textLayout_container_ContainerController__contentLeft + this.contentWidth;
    var /** @type {number} */ contentBottom = this.org_apache_royale_textLayout_container_ContainerController__contentTop + this.contentHeight;
    var /** @type {number} */ width;
    var /** @type {number} */ compositionRight;
    if (this.org_apache_royale_textLayout_container_ContainerController__measureWidth) {
      width = this.contentWidth;
      compositionRight = this.org_apache_royale_textLayout_container_ContainerController__contentLeft + width;
    } else {
      width = this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
      compositionRight = width;
    }
    var /** @type {number} */ height;
    var /** @type {number} */ compositionBottom;
    if (this.org_apache_royale_textLayout_container_ContainerController__measureHeight) {
      height = this.contentHeight;
      compositionBottom = this.org_apache_royale_textLayout_container_ContainerController__contentTop + height;
    } else {
      height = this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
      compositionBottom = height;
    }
    var /** @type {number} */ xOrigin = (this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) ? -width : 0;
    var /** @type {number} */ xpos = (this.horizontalScrollPosition + xOrigin) >> 0;
    var /** @type {number} */ ypos = (this.verticalScrollPosition) >> 0;
    
    if (this.textLength == 0 || xpos == 0 && ypos == 0 && this.org_apache_royale_textLayout_container_ContainerController__contentLeft >= xOrigin && this.org_apache_royale_textLayout_container_ContainerController__contentTop >= 0 && contentRight <= compositionRight && contentBottom <= compositionBottom) {
      if (this._hasScrollRect) {
        
        this._hasScrollRect = false;
      }
    } else {
    }
  }
  this.attachTransparentBackgroundForHit(false);
};


/** Returns the value of the style specified by the <code>styleProp</code> parameter.
 *
 * @asparam styleProp The name of the style property whose value you want.
 *
 * @asreturn	The current value for the specified style.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @override
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getStyle = function(styleProp) {
  if (org.apache.royale.textLayout.formats.TextLayoutFormat.description.hasOwnProperty(styleProp))
    return this.computedFormat.getStyle(styleProp);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.org_apache_royale_textLayout_container_ContainerController__rootElement.getTextFlow();
  if (!tf || !tf.formatResolver)
    return this.computedFormat.getStyle(styleProp);
  return this.getUserStyleWorker(styleProp);
};


/** @asprivate worker function - any styleProp 
 * @param {string} styleProp
 * @return {*}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getUserStyleWorker = function(styleProp) {
  
  var /** @type {*} */ userStyle = this._format.getStyle(styleProp);
  if (userStyle !== undefined)
    return userStyle;
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.getTextFlow() : null;
  if (tf && tf.formatResolver) {
    userStyle = tf.formatResolver.resolveUserFormat(this, styleProp);
    if (userStyle !== undefined)
      return userStyle;
  }
  return this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.getUserStyleWorker(styleProp) : undefined;
};


/** 
 * Sets the value of the style specified by the <code>styleProp</code> parameter to the value
 * specified by the <code>newValue</code> parameter.
 *
 * @asparam styleProp The name of the style property whose value you want to set.
 * @asparam newValue The value that you want to assign to the style.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} styleProp
 * @param {*} newValue
 */
org.apache.royale.textLayout.container.ContainerController.prototype.setStyle = function(styleProp, newValue) {
  if (org.apache.royale.textLayout.formats.TextLayoutFormat.description[styleProp])
    this[styleProp] = newValue; else {
    this.writableTextLayoutFormat().setStyle(styleProp, newValue);
    this.formatChanged();
  }
};


/** Clears the style specified by <code>styleProp</code> from this FlowElement. Sets the value to
 * <code>undefined</code>.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} styleProp
 */
org.apache.royale.textLayout.container.ContainerController.prototype.clearStyle = function(styleProp) {
  this.setStyle(styleProp, undefined);
};


/**
 * @private
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_calculateComputedFormat = function() {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ parentPrototype = this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.computedFormat : null;
  this._computedFormat = org.apache.royale.textLayout.utils.CreateTLFUtil.createTLF(this.formatForCascade, parentPrototype);
  this.resetColumnState();
};


/** @asprivate 
 * @asreturns -1 BEFORE visible, ITextLine visible, 1 AFTER visible, 2 AFTER visible by auto-size image(bug #2988852)
 * @royaleignorecoercion org.apache.royale.textLayout.compose.ITextFlowTableBlock
 * @royaleignorecoercion org.apache.royale.textLayout.elements.IInlineGraphicElement
 * @param {string} wmode
 * @param {number} scrollXTW
 * @param {number} scrollYTW
 * @param {number} scrollWidthTW
 * @param {number} scrollHeightTW
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} textFlowLine
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {*}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.testLineVisible = function(wmode, scrollXTW, scrollYTW, scrollWidthTW, scrollHeightTW, textFlowLine, textLine) {
  
  if (org.apache.royale.utils.Language.is(textFlowLine, org.apache.royale.textLayout.compose.ITextFlowTableBlock)) {
    if (textFlowLine.controller == this)
      return textFlowLine.container;
    return null;
  }
  if (textFlowLine.controller == null) {
    var /** @type {Array} */ ilgs = this.textFlow.getElementsByTypeName("img");
    var /** @type {Object} */ ilg;
    for (var /** @type {number} */ idx = 0; idx < ilgs.length; idx++) {
      ilg = ilgs[idx];
      if (ilg && ilg.getAbsoluteStart() < textFlowLine.absoluteStart) {
        if (wmode == org.apache.royale.textLayout.formats.BlockProgression.TB) {
          if (ilg.height == undefined || ilg.height == "auto")
            return 2;
        } else {
          if (ilg.width == undefined || ilg.width == "auto")
            return 2;
        }
      }
      else
        break;
    }
  }
  if (textFlowLine.controller != this)
    return textFlowLine.absoluteStart < this.absoluteStart ? -1 : 1;
  if (!textFlowLine.hasLineBounds()) {
    if (!textLine)
      textLine = textFlowLine.getTextLine(true);
    textFlowLine.createShape(wmode, textLine);
    if (wmode == org.apache.royale.textLayout.formats.BlockProgression.TB)
      textFlowLine.cacheLineBounds(wmode, textLine.x, textLine.y - textLine.ascent, textLine.textWidth, textLine.textHeight);
    else
      textFlowLine.cacheLineBounds(wmode, textLine.x - textLine.descent, textLine.y, textLine.textHeight, textLine.textWidth);
  }
  var /** @type {*} */ rslt = (wmode == org.apache.royale.textLayout.formats.BlockProgression.TB ? this.org_apache_royale_textLayout_container_ContainerController__measureHeight : this.org_apache_royale_textLayout_container_ContainerController__measureWidth) ? 0 : textFlowLine.testLineVisible(wmode, scrollXTW, scrollYTW, scrollWidthTW, scrollHeightTW);
  return (rslt == 0) ? (textLine ? textLine : textFlowLine.getTextLine(true)) : rslt;
};


/** @asprivate 
 * 	function testLineVisible that was used in old algorithm of gatherVisibleLines()
 * @param {string} wmode
 * @param {number} scrollXTW
 * @param {number} scrollYTW
 * @param {number} scrollWidthTW
 * @param {number} scrollHeightTW
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} textFlowLine
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.oldTestLineVisible = function(wmode, scrollXTW, scrollYTW, scrollWidthTW, scrollHeightTW, textFlowLine, textLine) {
  if (org.apache.royale.utils.Language.is(textFlowLine, org.apache.royale.textLayout.compose.ITextFlowTableBlock))
    return null;
  if (!textFlowLine.hasLineBounds()) {
    if (!textLine)
      textLine = textFlowLine.getTextLine(true);
    textFlowLine.createShape(wmode, textLine);
    if (textLine.numElements == 0) {
      if (wmode == org.apache.royale.textLayout.formats.BlockProgression.TB)
        textFlowLine.cacheLineBounds(wmode, textLine.x, textLine.y - textLine.ascent, textLine.textWidth, textLine.textHeight);
      else
        textFlowLine.cacheLineBounds(wmode, textLine.x - textLine.descent, textLine.y, textLine.textHeight, textLine.textWidth);
    } else {
      var /** @type {org.apache.royale.geom.Rectangle} */ lineBounds = this.getPlacedTextLineBounds(textLine);
      if (textLine.hasGraphicElement)
        lineBounds = this.org_apache_royale_textLayout_container_ContainerController_computeLineBoundsWithGraphics(textFlowLine, textLine, lineBounds);
      textFlowLine.cacheLineBounds(wmode, lineBounds.x, lineBounds.y, lineBounds.width, lineBounds.height);
    }
  }
  if ((wmode == org.apache.royale.textLayout.formats.BlockProgression.TB ? this.org_apache_royale_textLayout_container_ContainerController__measureHeight : this.org_apache_royale_textLayout_container_ContainerController__measureWidth) || textFlowLine.oldTestLineVisible(wmode, scrollXTW, scrollYTW, scrollWidthTW, scrollHeightTW))
    return textLine ? textLine : textFlowLine.getTextLine(true);
  return null;
};


/**
 *  @royaleignorecoercion org.apache.royale.core.IParentIUIBase
 *  @royaleignorecoercion org.apache.royale.textLayout.elements.IInlineGraphicElement
 * @private
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} line
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.geom.Rectangle} boundsRect
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_computeLineBoundsWithGraphics = function(line, textLine, boundsRect) {
  if (this.org_apache_royale_textLayout_container_ContainerController__composedFloats) {
    var /** @type {number} */ floatIndex = this.findFloatIndexAtOrAfter(line.absoluteStart);
    var /** @type {number} */ lastFloatIndex = this.findFloatIndexAtOrAfter((line.absoluteStart + line.textLength) >> 0);
    var /** @type {org.apache.royale.geom.Rectangle} */ inlineRect = new org.apache.royale.geom.Rectangle();
    while (floatIndex < lastFloatIndex) {
      var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = this.org_apache_royale_textLayout_container_ContainerController__composedFloats[floatIndex];
      if (floatInfo.floatType == org.apache.royale.textLayout.formats.Float.NONE) {
        var /** @type {Object} */ inlineGraphicElement = this.textFlow.findLeaf(floatInfo.absolutePosition);
        var /** @type {Object} */ inlineHolder = inlineGraphicElement.placeholderGraphic.parent;
        if (inlineHolder) {
          inlineRect.x = textLine.x + inlineHolder.x;
          inlineRect.y = textLine.y + inlineHolder.y;
          inlineRect.width = inlineGraphicElement.elementWidth;
          inlineRect.height = inlineGraphicElement.elementHeight;
          boundsRect = boundsRect.union(inlineRect);
        }
      }
      ++floatIndex;
    }
  }
  return boundsRect;
};


/** @asprivate 
 * @param {org.apache.royale.geom.Point} point
 * @return {org.apache.royale.textLayout.elements.CellCoordinates}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.findCellAtPosition = function(point) {
  point = point.clone();
  var foreachiter4_target = this.org_apache_royale_textLayout_container_ContainerController__shapeChildren;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var chld = foreachiter4_target[foreachiter4];
  {
    if (!org.apache.royale.utils.Language.is(chld, org.apache.royale.textLayout.elements.TableBlockContainer))
      continue;
    var /** @type {org.apache.royale.textLayout.elements.TableBlockContainer} */ block = chld;
    if (block.y > point.y)
      continue;
    if (block.x > point.x)
      continue;
    if (block.y + block.height < point.y)
      continue;
    if (block.x + block.getTableWidth() < point.x)
      continue;
    point.x -= block.x;
    point.y -= block.y;
    var /** @type {Array} */ cells = block.userData.getTableCells();
    var foreachiter5_target = cells;
    for (var foreachiter5 in foreachiter5_target) 
    {
    var cell = foreachiter5_target[foreachiter5];
    {
      if (cell.x + cell.width < point.x)
        continue;
      if (cell.y + cell.getRow().composedHeight < point.y)
        continue;
      if (cell.x > point.x)
        continue;
      if (cell.y > point.y)
        continue;
      return new org.apache.royale.textLayout.elements.CellCoordinates(cell.rowIndex, cell.colIndex, cell.table);
    }}
    
  }}
  
  return null;
};


/** @asprivate 
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getPlacedTextLineBounds = function(textLine) {
  var /** @type {org.apache.royale.geom.Rectangle} */ curBounds;
  curBounds = org.apache.royale.textLayout.dummy.BoundsUtil.getBounds(textLine, textLine);
  curBounds.x += textLine.x;
  curBounds.y += textLine.y;
  
  return curBounds;
};


/** @asprivate 
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addComposedLine = function(textLine) {
  this.org_apache_royale_textLayout_container_ContainerController__linesInView.push(textLine);
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.TableBlockContainer} block
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addComposedTableBlock = function(block) {
  var /** @type {number} */ idx = (this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.indexOf(block)) >> 0;
  if (idx >= 0)
    this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.splice(idx, 1);
  else
    this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.push(block);
};


/** @asprivate Empty out the linesInView, starting from the supplied text index. 
 * @param {number} pos
 */
org.apache.royale.textLayout.container.ContainerController.prototype.clearComposedLines = function(pos) {
  var /** @type {number} */ index = 0;
  var foreachiter6_target = this.org_apache_royale_textLayout_container_ContainerController__linesInView;
  for (var foreachiter6 in foreachiter6_target) 
  {
  var textLine = foreachiter6_target[foreachiter6];
  {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = textLine.userData;
    if (tfl.absoluteStart >= pos)
      break;
    index++;
  }}
  
  this.org_apache_royale_textLayout_container_ContainerController__linesInView.length = index;
  index = 0;
  var foreachiter7_target = this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView;
  for (var foreachiter7 in foreachiter7_target) 
  {
  var tbc = foreachiter7_target[foreachiter7];
  {
    if (tbc.userData.absoluteStart >= pos)
      break;
    index++;
  }}
  
  this.org_apache_royale_textLayout_container_ContainerController__tableBlocksInView.length = index;
  this.org_apache_royale_textLayout_container_ContainerController__updateStart = (Math.min(this.org_apache_royale_textLayout_container_ContainerController__updateStart, pos)) >> 0;
};


/** @asprivate 
 * @param {number} index
 * @return {org.apache.royale.textLayout.compose.FloatCompositionData}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getFloatAt = function(index) {
  return this.org_apache_royale_textLayout_container_ContainerController__composedFloats[index];
};


/** @asprivate 
 * @param {number} absolutePosition
 * @return {org.apache.royale.textLayout.compose.FloatCompositionData}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getFloatAtPosition = function(absolutePosition) {
  if (!this.org_apache_royale_textLayout_container_ContainerController__composedFloats)
    return null;
  var /** @type {number} */ i = this.findFloatIndexAtOrAfter(absolutePosition);
  return (i < this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length) ? this.org_apache_royale_textLayout_container_ContainerController__composedFloats[i] : null;
};


/** Add new float info (called by composition when a float is composed into the container
 * @asprivate
 * @param {number} absolutePosition
 * @param {org.apache.royale.core.IUIBase} float
 * @param {string} floatType
 * @param {number} x
 * @param {number} y
 * @param {number} alpha
 * @param {org.apache.royale.geom.Matrix} matrix
 * @param {number} depth
 * @param {number} knockOutWidth
 * @param {number} columnIndex
 * @param {org.apache.royale.core.IParentIUIBase} parent
 */
org.apache.royale.textLayout.container.ContainerController.prototype.addFloatAt = function(absolutePosition, float, floatType, x, y, alpha, matrix, depth, knockOutWidth, columnIndex, parent) {
  if (!this.org_apache_royale_textLayout_container_ContainerController__composedFloats)
    this.org_apache_royale_textLayout_container_ContainerController__composedFloats = [];
  var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = new org.apache.royale.textLayout.compose.FloatCompositionData(absolutePosition, float, floatType, x, y, alpha, matrix, depth, knockOutWidth, columnIndex, parent);
  if (this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length > 0 && this.org_apache_royale_textLayout_container_ContainerController__composedFloats[this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length - 1] < absolutePosition)
    this.org_apache_royale_textLayout_container_ContainerController__composedFloats.push(floatInfo); else {
    var /** @type {number} */ index = this.findFloatIndexAtOrAfter(absolutePosition);
    this.org_apache_royale_textLayout_container_ContainerController__composedFloats.splice(index, 0, floatInfo);
  }
  
};


/** Remove float info for all floats after the given text position
 * @asprivate
 * @param {number} absolutePosition
 */
org.apache.royale.textLayout.container.ContainerController.prototype.clearFloatsAt = function(absolutePosition) {
  if (this.org_apache_royale_textLayout_container_ContainerController__composedFloats)
    if (absolutePosition == this.absoluteStart)
      this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length = 0;
    else
      this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length = this.findFloatIndexAtOrAfter(absolutePosition);
};


/** 
 * @asprivate
 * Returns the index in the array of a knockOut at the specified location, or the first knockOut index past that location.
 * @param {number} absolutePosition
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.findFloatIndexAfter = function(absolutePosition) {
  for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length && this.org_apache_royale_textLayout_container_ContainerController__composedFloats[i].absolutePosition <= absolutePosition; ++i) {
  }
  return i;
};


/** 
 * @asprivate
 * Returns the index in the array of a knockOut at the specified location, or the first knockOut index past that location.
 * @param {number} absolutePosition
 * @return {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.findFloatIndexAtOrAfter = function(absolutePosition) {
  for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length && this.org_apache_royale_textLayout_container_ContainerController__composedFloats[i].absolutePosition < absolutePosition; ++i) {
  }
  return i;
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.edit.IInteractionEventHandler}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.getInteractionHandler = function() {
  return this;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.allListenersAttached;


org.apache.royale.textLayout.container.ContainerController.prototype.get__allListenersAttached = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__allListenersAttached;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.interactiveObjects;


org.apache.royale.textLayout.container.ContainerController.prototype.get__interactiveObjects = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__interactiveObjects;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.oldInteractiveObjects;


org.apache.royale.textLayout.container.ContainerController.prototype.get__oldInteractiveObjects = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__oldInteractiveObjects;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.hasScrollRect;


org.apache.royale.textLayout.container.ContainerController.prototype.get__hasScrollRect = function() {
  return this._hasScrollRect;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.effectiveBlockProgression;


org.apache.royale.textLayout.container.ContainerController.prototype.get__effectiveBlockProgression = function() {
  return org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_container_ContainerController__rootElement ? this.org_apache_royale_textLayout_container_ContainerController__rootElement.computedFormat.blockProgression : org.apache.royale.textLayout.formats.BlockProgression.TB);
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.compose.IFlowComposer}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.flowComposer;


org.apache.royale.textLayout.container.ContainerController.prototype.get__flowComposer = function() {
  return this.textFlow ? this.textFlow.flowComposer : null;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.shapesInvalid;


org.apache.royale.textLayout.container.ContainerController.prototype.get__shapesInvalid = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__shapesInvalid;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__shapesInvalid = function(val) {
  this.org_apache_royale_textLayout_container_ContainerController__shapesInvalid = val;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.container.ColumnState}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.columnState;


org.apache.royale.textLayout.container.ContainerController.prototype.get__columnState = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__rootElement == null)
    return null;
  if (this._computedFormat == null)
    this.org_apache_royale_textLayout_container_ContainerController_calculateComputedFormat();
  this.org_apache_royale_textLayout_container_ContainerController__columnState.computeColumns();
  return this.org_apache_royale_textLayout_container_ContainerController__columnState;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.container;


org.apache.royale.textLayout.container.ContainerController.prototype.get__container = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__container;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.compositionWidth;


org.apache.royale.textLayout.container.ContainerController.prototype.get__compositionWidth = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__compositionWidth;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.compositionHeight;


org.apache.royale.textLayout.container.ContainerController.prototype.get__compositionHeight = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__compositionHeight;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.measureWidth;


org.apache.royale.textLayout.container.ContainerController.prototype.get__measureWidth = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__measureWidth;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.measureHeight;


org.apache.royale.textLayout.container.ContainerController.prototype.get__measureHeight = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__measureHeight;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.textFlow;


org.apache.royale.textLayout.container.ContainerController.prototype.get__textFlow = function() {
  if (!this.org_apache_royale_textLayout_container_ContainerController__textFlowCache && this.org_apache_royale_textLayout_container_ContainerController__rootElement)
    this.org_apache_royale_textLayout_container_ContainerController__textFlowCache = this.org_apache_royale_textLayout_container_ContainerController__rootElement.getTextFlow();
  return this.org_apache_royale_textLayout_container_ContainerController__textFlowCache;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.rootElement;


org.apache.royale.textLayout.container.ContainerController.prototype.get__rootElement = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__rootElement;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.interactionManager;


org.apache.royale.textLayout.container.ContainerController.prototype.get__interactionManager = function() {
  return this.textFlow ? this.textFlow.interactionManager : null;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.uncomposedTextLength;


org.apache.royale.textLayout.container.ContainerController.prototype.get__uncomposedTextLength = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.finalParcelStart;


org.apache.royale.textLayout.container.ContainerController.prototype.get__finalParcelStart = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__finalParcelStart;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__finalParcelStart = function(val) {
  this.org_apache_royale_textLayout_container_ContainerController__finalParcelStart = val;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.absoluteStart;


org.apache.royale.textLayout.container.ContainerController.prototype.get__absoluteStart = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__absoluteStart != -1)
    return this.org_apache_royale_textLayout_container_ContainerController__absoluteStart;
  var /** @type {number} */ rslt = 0;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ composer = this.flowComposer;
  if (composer) {
    var /** @type {number} */ stopIdx = composer.getControllerIndex(this);
    if (stopIdx != 0) {
      var /** @type {org.apache.royale.textLayout.container.IContainerController} */ prevController = composer.getControllerAt((stopIdx - 1) >> 0);
      rslt = (prevController.absoluteStart + prevController.textLength) >> 0;
    }
  }
  this.org_apache_royale_textLayout_container_ContainerController__absoluteStart = rslt;
  return rslt;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.textLength;


org.apache.royale.textLayout.container.ContainerController.prototype.get__textLength = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__textLength;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.horizontalScrollPolicy;


org.apache.royale.textLayout.container.ContainerController.prototype.get__horizontalScrollPolicy = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__horizontalScrollPolicy = function(scrollPolicy) {
  var /** @type {string} */ newScrollPolicy = org.apache.royale.textLayout.container.ScrollPolicy.scrollPolicyPropertyDefinition.setHelper(this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy, scrollPolicy);
  if (newScrollPolicy != this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy) {
    this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy = newScrollPolicy;
    if (this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF)
      this.horizontalScrollPosition = 0;
    this.formatChanged();
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.verticalScrollPolicy;


org.apache.royale.textLayout.container.ContainerController.prototype.get__verticalScrollPolicy = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__verticalScrollPolicy = function(scrollPolicy) {
  var /** @type {string} */ newScrollPolicy = org.apache.royale.textLayout.container.ScrollPolicy.scrollPolicyPropertyDefinition.setHelper(this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy, scrollPolicy);
  if (newScrollPolicy != this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy) {
    this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy = newScrollPolicy;
    if (this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF)
      this.verticalScrollPosition = 0;
    this.formatChanged();
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.horizontalScrollPosition;


org.apache.royale.textLayout.container.ContainerController.prototype.get__horizontalScrollPosition = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__xScroll;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__horizontalScrollPosition = function(x) {
  if (!this.org_apache_royale_textLayout_container_ContainerController__rootElement)
    return;
  if (this.org_apache_royale_textLayout_container_ContainerController__horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF) {
    this.org_apache_royale_textLayout_container_ContainerController__xScroll = 0;
    return;
  }
  var /** @type {number} */ oldScroll = this.org_apache_royale_textLayout_container_ContainerController__xScroll;
  var /** @type {number} */ newScroll = this.org_apache_royale_textLayout_container_ContainerController_computeHorizontalScrollPosition(x, true);
  if (newScroll != oldScroll) {
    this.org_apache_royale_textLayout_container_ContainerController__shapesInvalid = true;
    this.org_apache_royale_textLayout_container_ContainerController__xScroll = newScroll;
    this.org_apache_royale_textLayout_container_ContainerController_updateForScroll(org.apache.royale.textLayout.events.ScrollEventDirection.HORIZONTAL, newScroll - oldScroll);
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.verticalScrollPosition;


org.apache.royale.textLayout.container.ContainerController.prototype.get__verticalScrollPosition = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__yScroll;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__verticalScrollPosition = function(y) {
  if (!this.org_apache_royale_textLayout_container_ContainerController__rootElement)
    return;
  if (this.org_apache_royale_textLayout_container_ContainerController__verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF) {
    this.org_apache_royale_textLayout_container_ContainerController__yScroll = 0;
    return;
  }
  var /** @type {number} */ oldScroll = this.org_apache_royale_textLayout_container_ContainerController__yScroll;
  var /** @type {number} */ newScroll = this.org_apache_royale_textLayout_container_ContainerController_computeVerticalScrollPosition(y, true);
  if (newScroll != oldScroll) {
    this.org_apache_royale_textLayout_container_ContainerController__shapesInvalid = true;
    this.org_apache_royale_textLayout_container_ContainerController__yScroll = newScroll;
    this.org_apache_royale_textLayout_container_ContainerController_updateForScroll(org.apache.royale.textLayout.events.ScrollEventDirection.VERTICAL, newScroll - oldScroll);
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.contentLeft;


org.apache.royale.textLayout.container.ContainerController.prototype.get__contentLeft = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__contentLeft;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.contentTop;


org.apache.royale.textLayout.container.ContainerController.prototype.get__contentTop = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__contentTop;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.contentHeight;


org.apache.royale.textLayout.container.ContainerController.prototype.get__contentHeight = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength == 0 || this.effectiveBlockProgression != org.apache.royale.textLayout.formats.BlockProgression.TB)
    return this.org_apache_royale_textLayout_container_ContainerController__contentHeight;
  return this.computeScaledContentMeasure(this.org_apache_royale_textLayout_container_ContainerController__contentHeight);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.contentWidth;


org.apache.royale.textLayout.container.ContainerController.prototype.get__contentWidth = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__uncomposedTextLength == 0 || this.effectiveBlockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL)
    return this.org_apache_royale_textLayout_container_ContainerController__contentWidth;
  return this.computeScaledContentMeasure(this.org_apache_royale_textLayout_container_ContainerController__contentWidth);
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft;


org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft = function() {
  var /** @type {number} */ rslt;
  if (this.horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF && this.verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF)
    rslt = 0;
  else
    rslt = this.effectiveBlockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? this.horizontalScrollPosition - this.compositionWidth : this.horizontalScrollPosition;
  return rslt;
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight;


org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight = function() {
  var /** @type {number} */ rslt = this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft + this.compositionWidth;
  return rslt;
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop;


org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop = function() {
  var /** @type {number} */ rslt;
  if (this.horizontalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF && this.verticalScrollPolicy == org.apache.royale.textLayout.container.ScrollPolicy.OFF)
    rslt = 0;
  else
    rslt = this.verticalScrollPosition;
  return rslt;
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom;


org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom = function() {
  var /** @type {number} */ rslt = this.org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop + this.compositionHeight;
  return rslt;
};


/**
 * @nocollapse
 * @type {boolean}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.attachTransparentBackground;


org.apache.royale.textLayout.container.ContainerController.prototype.get__attachTransparentBackground = function() {
  return true;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.textLines;


org.apache.royale.textLayout.container.ContainerController.prototype.get__textLines = function() {
  return this.org_apache_royale_textLayout_container_ContainerController__shapeChildren;
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.userStyles;


org.apache.royale.textLayout.container.ContainerController.prototype.get__userStyles = function() {
  return this._format ? this._format.userStyles : null;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__userStyles = function(styles) {
  var /** @type {string} */ val;
  for (val in this.userStyles)
    this.setStyle(val, undefined);
  for (val in styles)
    this.setStyle(val, styles[val]);
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.coreStyles;


org.apache.royale.textLayout.container.ContainerController.prototype.get__coreStyles = function() {
  return this._format ? this._format.coreStyles : null;
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.styles;


org.apache.royale.textLayout.container.ContainerController.prototype.get__styles = function() {
  return this._format ? this._format.styles : null;
};


org.apache.royale.textLayout.container.ContainerController.prototype.get__format = function() {
  return this._format;
};


org.apache.royale.textLayout.container.ContainerController.prototype.set__format = function(value) {
  if (value == this._format)
    return;
  var /** @type {string} */ oldStyleName = org.apache.royale.utils.Language.string(this.styleName);
  if (value == null)
    this._format.clearStyles();
  else
    this.writableTextLayoutFormat().copy(value);
  this.formatChanged();
  if (oldStyleName != this.styleName)
    this.styleSelectorChanged();
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.computedFormat;


org.apache.royale.textLayout.container.ContainerController.prototype.get__computedFormat = function() {
  if (!this._computedFormat) {
    this.org_apache_royale_textLayout_container_ContainerController_calculateComputedFormat();
  }
  return this._computedFormat;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.formatForCascade;


org.apache.royale.textLayout.container.ContainerController.prototype.get__formatForCascade = function() {
  if (this.org_apache_royale_textLayout_container_ContainerController__rootElement) {
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.org_apache_royale_textLayout_container_ContainerController__rootElement.getTextFlow();
    if (tf) {
      var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ elemStyle = tf.getTextLayoutFormatStyle(this);
      if (elemStyle) {
        var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ localFormat = this._format;
        if (localFormat == null)
          return elemStyle;
        var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ rslt = new org.apache.royale.textLayout.formats.TextLayoutFormat(elemStyle);
        rslt.apply(localFormat);
        return rslt;
      }
    }
  }
  return this._format;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.composedLines;


org.apache.royale.textLayout.container.ContainerController.prototype.get__composedLines = function() {
  if (!this.org_apache_royale_textLayout_container_ContainerController__linesInView)
    this.org_apache_royale_textLayout_container_ContainerController__linesInView = [];
  var /** @type {Array} */ arr = this.org_apache_royale_textLayout_container_ContainerController__linesInView.slice();
  this.org_apache_royale_textLayout_container_ContainerController_intersperseTableBlocks(arr);
  return arr;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.numFloats;


org.apache.royale.textLayout.container.ContainerController.prototype.get__numFloats = function() {
  return (this.org_apache_royale_textLayout_container_ContainerController__composedFloats ? this.org_apache_royale_textLayout_container_ContainerController__composedFloats.length : 0) >> 0;
};


Object.defineProperties(org.apache.royale.textLayout.container.ContainerController.prototype, /** @lends {org.apache.royale.textLayout.container.ContainerController.prototype} */ {
/**
 * @type {boolean}
 */
allListenersAttached: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__allListenersAttached},
/**
 * @type {org.apache.royale.utils.ObjectMap}
 */
interactiveObjects: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__interactiveObjects},
/**
 * @type {Array}
 */
oldInteractiveObjects: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__oldInteractiveObjects},
/**
 * @type {boolean}
 */
hasScrollRect: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__hasScrollRect},
/**
 * @type {string}
 */
effectiveBlockProgression: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__effectiveBlockProgression},
/**
 * @type {org.apache.royale.textLayout.compose.IFlowComposer}
 */
flowComposer: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__flowComposer},
/**
 * @type {boolean}
 */
shapesInvalid: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__shapesInvalid,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__shapesInvalid},
/**
 * @type {org.apache.royale.textLayout.container.ColumnState}
 */
columnState: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__columnState},
/**
 * @type {org.apache.royale.core.IParentIUIBase}
 */
container: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__container},
/**
 * @type {number}
 */
compositionWidth: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__compositionWidth},
/**
 * @type {number}
 */
compositionHeight: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__compositionHeight},
/**
 * @type {boolean}
 */
measureWidth: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__measureWidth},
/**
 * @type {boolean}
 */
measureHeight: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__measureHeight},
/**
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
textFlow: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__textFlow},
/**
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
rootElement: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__rootElement},
/**
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
interactionManager: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__interactionManager},
/**
 * @type {number}
 */
uncomposedTextLength: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__uncomposedTextLength},
/**
 * @type {number}
 */
finalParcelStart: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__finalParcelStart,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__finalParcelStart},
/**
 * @type {number}
 */
absoluteStart: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__absoluteStart},
/**
 * @type {number}
 */
textLength: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__textLength},
/**
 * @type {string}
 */
horizontalScrollPolicy: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__horizontalScrollPolicy,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__horizontalScrollPolicy},
/**
 * @type {string}
 */
verticalScrollPolicy: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__verticalScrollPolicy,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__verticalScrollPolicy},
/**
 * @type {number}
 */
horizontalScrollPosition: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__horizontalScrollPosition,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__horizontalScrollPosition},
/**
 * @type {number}
 */
verticalScrollPosition: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__verticalScrollPosition,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__verticalScrollPosition},
/**
 * @type {number}
 */
contentLeft: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__contentLeft},
/**
 * @type {number}
 */
contentTop: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__contentTop},
/**
 * @type {number}
 */
contentHeight: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__contentHeight},
/**
 * @type {number}
 */
contentWidth: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__contentWidth},
/**
 * @type {number}
 */
org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectLeft},
/**
 * @type {number}
 */
org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectRight},
/**
 * @type {number}
 */
org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectTop},
/**
 * @type {number}
 */
org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__org_apache_royale_textLayout_container_ContainerController_containerScrollRectBottom},
/**
 * @type {boolean}
 */
attachTransparentBackground: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__attachTransparentBackground},
/**
 * @type {Array}
 */
textLines: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__textLines},
/**
 * @type {Object}
 */
userStyles: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__userStyles,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__userStyles},
/**
 * @type {Object}
 */
coreStyles: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__coreStyles},
/**
 * @type {Object}
 */
styles: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__styles},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
format: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__format,
set: org.apache.royale.textLayout.container.ContainerController.prototype.set__format},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
computedFormat: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__computedFormat},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
formatForCascade: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__formatForCascade},
/**
 * @type {Array}
 */
composedLines: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__composedLines},
/**
 * @type {number}
 */
numFloats: {
get: org.apache.royale.textLayout.container.ContainerController.prototype.get__numFloats}}
);


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.container.ContainerController.containerControllerInitialFormat;


org.apache.royale.textLayout.container.ContainerController.get__containerControllerInitialFormat = function() {
  if (org.apache.royale.textLayout.container.ContainerController._containerControllerInitialFormat == null)
    org.apache.royale.textLayout.container.ContainerController._containerControllerInitialFormat = org.apache.royale.textLayout.container.ContainerController.createContainerControllerInitialFormat();
  return org.apache.royale.textLayout.container.ContainerController._containerControllerInitialFormat;
};


org.apache.royale.textLayout.container.ContainerController.set__containerControllerInitialFormat = function(val) {
  org.apache.royale.textLayout.container.ContainerController._containerControllerInitialFormat = val;
};


/**
 * @nocollapse
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.container.ContainerController.scratchRectangle;


org.apache.royale.textLayout.container.ContainerController.get__scratchRectangle = function() {
  if (org.apache.royale.textLayout.container.ContainerController._scratchRectangle == null)
    org.apache.royale.textLayout.container.ContainerController._scratchRectangle = new org.apache.royale.geom.Rectangle();
  return org.apache.royale.textLayout.container.ContainerController._scratchRectangle;
};


Object.defineProperties(org.apache.royale.textLayout.container.ContainerController, /** @lends {org.apache.royale.textLayout.container.ContainerController} */ {
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
containerControllerInitialFormat: {
get: org.apache.royale.textLayout.container.ContainerController.get__containerControllerInitialFormat,
set: org.apache.royale.textLayout.container.ContainerController.set__containerControllerInitialFormat},
/**
 * @type {org.apache.royale.geom.Rectangle}
 */
scratchRectangle: {
get: org.apache.royale.textLayout.container.ContainerController.get__scratchRectangle}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ContainerController', qName: 'org.apache.royale.textLayout.container.ContainerController', kind: 'class' }], interfaces: [org.apache.royale.textLayout.edit.IInteractionEventHandler, org.apache.royale.textLayout.container.ISandboxSupport, org.apache.royale.textLayout.container.IContainerController] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '_mouseWheelListenerAttached': { type: 'Boolean', get_set: function (/** org.apache.royale.textLayout.container.ContainerController */ inst, /** * */ v) {return v !== undefined ? inst._mouseWheelListenerAttached = v : inst._mouseWheelListenerAttached;}}
      };
    },
    accessors: function () {
      return {
        'allListenersAttached': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'interactiveObjects': { type: 'org.apache.royale.utils.ObjectMap', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'oldInteractiveObjects': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'hasScrollRect': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'effectiveBlockProgression': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'flowComposer': { type: 'org.apache.royale.textLayout.compose.IFlowComposer', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'shapesInvalid': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'columnState': { type: 'org.apache.royale.textLayout.container.ColumnState', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'container': { type: 'org.apache.royale.core.IParentIUIBase', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'compositionWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'compositionHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'measureWidth': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'measureHeight': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'rootElement': { type: 'org.apache.royale.textLayout.elements.IContainerFormattedElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'interactionManager': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'uncomposedTextLength': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'finalParcelStart': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'absoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'textLength': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'horizontalScrollPolicy': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'verticalScrollPolicy': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'horizontalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'verticalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'contentLeft': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'contentTop': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'contentHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'contentWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        '|containerControllerInitialFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'textLines': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'userStyles': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'coreStyles': { type: 'Object', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'styles': { type: 'Object', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'format': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'computedFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'formatForCascade': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'composedLines': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'numFloats': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'}
      };
    },
    methods: function () {
      return {
        'ContainerController': { type: '', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ,'Number', true ,'Number', true ]; }},
        'getContainerRoot': { type: 'org.apache.royale.events.IEventDispatcher', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'setCompositionSize': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'setRootElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IContainerFormattedElement', false ]; }},
        'setTextLengthOnly': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'setTextLength': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'isDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'formatChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Boolean', true ]; }},
        'styleSelectorChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'modelChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.container.ContainerController', false ,'int', false ,'int', false ,'Boolean', true ,'Boolean', true ]; }},
        'gatherVisibleLines': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ,'Boolean', false ]; }},
        'fillShapeChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'checkScrollBounds': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getContentBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'computeScaledContentMeasure': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Number', false ]; }},
        'setContentBounds': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'scrollToRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'resetColumnState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'invalidateContents': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'attachTransparentBackgroundForHit': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Boolean', false ]; }},
        'interactionManagerChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.textLayout.edit.ISelectionManager', false ]; }},
        'attachContainer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'attachInteractionHandlers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'removeInteractionHandlers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'addMouseWheelListener': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'removeMouseWheelListener': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'attachContextMenu': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'removeContextMenu': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        '|createDefaultContextMenu': { type: 'org.apache.royale.textLayout.dummy.ContextMenu', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'dispose': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'scrollTimerHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'autoScrollIfNecessary': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'getFirstVisibleLine': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getLastVisibleLine': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getScrollDelta': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'mouseOverHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'requiredMouseOverHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseWheelHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'requiredMouseDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'rootMouseUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'beginMouseCapture': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'endMouseCapture': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'mouseUpSomewhere': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'mouseMoveSomewhere': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'mouseMoveHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'rootMouseMoveHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseDoubleClickHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.MouseEvent', false ]; }},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getContainerController': { type: 'org.apache.royale.textLayout.container.IContainerController', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.core.IParentIUIBase', false ]; }},
        'focusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'focusInHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'requiredFocusInHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'focusOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'requiredFocusOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'activateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'deactivateHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'keyDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.KeyboardEvent', false ]; }},
        'keyFocusChangeHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'textInputHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.text.events.TextEvent', false ]; }},
        'softKeyboardActivatingHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'imeStartCompositionHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.text.events.IMEEvent', false ]; }},
        'menuSelectHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.textLayout.events.ContextMenuEvent', false ]; }},
        'editHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'selectRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'drawPointSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionFormat', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'addCellSelectionShapes': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'uint', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'addCellSelections': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Array', false ,'uint', false ,'org.apache.royale.textLayout.compose.ITextFlowTableBlock', false ]; }},
        'addSelectionShapes': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionFormat', false ,'int', false ,'int', false ]; }},
        'clearSelectionShapes': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'addSelectionChild': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.core.IChild', false ]; }},
        'containsSelectionChild': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.core.IChild', false ]; }},
        'getBackgroundShape': { type: 'org.apache.royale.core.IUIBase', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getEffectivePaddingLeft': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getEffectivePaddingRight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getEffectivePaddingTop': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getEffectivePaddingBottom': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getTotalPaddingLeft': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getTotalPaddingRight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getTotalPaddingTop': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getTotalPaddingBottom': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'getSelectionSprite': { type: 'org.apache.royale.core.IParentIUIBase', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'Boolean', false ]; }},
        'clearCompositionResults': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'updateCompositionShapes': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'},
        'updateGraphics': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'getStyle': { type: '*', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ]; }},
        'getUserStyleWorker': { type: '*', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ]; }},
        'setStyle': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ,'*', false ]; }},
        'clearStyle': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ]; }},
        'testLineVisible': { type: '*', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ,'int', false ,'int', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'oldTestLineVisible': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'String', false ,'int', false ,'int', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'findCellAtPosition': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.geom.Point', false ]; }},
        'getPlacedTextLineBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ]; }},
        'addComposedLine': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ]; }},
        'addComposedTableBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TableBlockContainer', false ]; }},
        'clearComposedLines': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'getFloatAt': { type: 'org.apache.royale.textLayout.compose.FloatCompositionData', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'getFloatAtPosition': { type: 'org.apache.royale.textLayout.compose.FloatCompositionData', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'addFloatAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ,'org.apache.royale.core.IUIBase', false ,'String', false ,'Number', false ,'Number', false ,'Number', false ,'org.apache.royale.geom.Matrix', false ,'Number', false ,'Number', false ,'int', false ,'org.apache.royale.core.IParentIUIBase', false ]; }},
        'clearFloatsAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'findFloatIndexAfter': { type: 'int', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'findFloatIndexAtOrAfter': { type: 'int', declaredBy: 'org.apache.royale.textLayout.container.ContainerController', parameters: function () { return [ 'int', false ]; }},
        'getInteractionHandler': { type: 'org.apache.royale.textLayout.edit.IInteractionEventHandler', declaredBy: 'org.apache.royale.textLayout.container.ContainerController'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ContainerController.js.map


/**
 * @constructor
 * @extends {org.apache.royale.events.MouseEvent}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {number=} localX
 * @param {number=} localY
 * @param {Object=} relatedObject
 * @param {boolean=} ctrlKey
 * @param {boolean=} altKey
 * @param {boolean=} shiftKey
 * @param {boolean=} buttonDown
 */
org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent = function(type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : true;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  localX = typeof localX !== 'undefined' ? localX : NaN;
  localY = typeof localY !== 'undefined' ? localY : NaN;
  relatedObject = typeof relatedObject !== 'undefined' ? relatedObject : null;
  ctrlKey = typeof ctrlKey !== 'undefined' ? ctrlKey : false;
  altKey = typeof altKey !== 'undefined' ? altKey : false;
  shiftKey = typeof shiftKey !== 'undefined' ? shiftKey : false;
  buttonDown = typeof buttonDown !== 'undefined' ? buttonDown : false;
  org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent.base(this, 'constructor', type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown);
};
goog.inherits(org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent, org.apache.royale.events.MouseEvent);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'PsuedoMouseEvent', qName: 'org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'PsuedoMouseEvent': { type: '', declaredBy: 'org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'Number', true ,'Number', true ,'Object', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.container.ContainerController.PsuedoMouseEvent.prototype.ROYALE_COMPILE_FLAGS = 10;
