/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/ParcelList.as
 * org.apache.royale.textLayout.compose.ParcelList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.ParcelList');
/* Royale Dependency List: org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.Constants,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.Parcel,org.apache.royale.textLayout.compose.Slug,org.apache.royale.textLayout.container.ColumnState,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.container.ScrollPolicy,org.apache.royale.textLayout.elements.TableCellElement,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.LineBreak,org.apache.royale.utils.Language,XML*/




/** Constructor. 
 * @constructor
 */
org.apache.royale.textLayout.compose.ParcelList = function() {
  this._numParcels = 0;
};


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.IFlowComposer}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._flowComposer;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._totalDepth;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._hasContent;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._parcelArray;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._numParcels = 0;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._singleParcel;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._currentParcelIndex = 0;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._currentParcel;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._insideListItemMargin;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._leftMargin;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._rightMargin;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._explicitLineBreaks;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype._verticalText;


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.ParcelList}
 */
org.apache.royale.textLayout.compose.ParcelList._sharedParcelList;


/** @asprivate 
 * @nocollapse
 * @return {org.apache.royale.textLayout.compose.ParcelList}
 */
org.apache.royale.textLayout.compose.ParcelList.getParcelList = function() {
  var /** @type {org.apache.royale.textLayout.compose.ParcelList} */ rslt = org.apache.royale.textLayout.compose.ParcelList._sharedParcelList ? org.apache.royale.textLayout.compose.ParcelList._sharedParcelList : new org.apache.royale.textLayout.compose.ParcelList();
  org.apache.royale.textLayout.compose.ParcelList._sharedParcelList = null;
  return rslt;
};


/** @asprivate 
 * @nocollapse
 * @param {org.apache.royale.textLayout.compose.ParcelList} list
 */
org.apache.royale.textLayout.compose.ParcelList.releaseParcelList = function(list) {
  if (org.apache.royale.textLayout.compose.ParcelList._sharedParcelList == null) {
    org.apache.royale.textLayout.compose.ParcelList._sharedParcelList = list;
    if (org.apache.royale.textLayout.compose.ParcelList._sharedParcelList)
      org.apache.royale.textLayout.compose.ParcelList._sharedParcelList.releaseAnyReferences();
  }
};


/** prevent any leaks. @asprivate 
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.releaseAnyReferences = function() {
  this._flowComposer = null;
  this._numParcels = 0;
  this._parcelArray = null;
  if (this._singleParcel)
    this._singleParcel.releaseAnyReferences();
};


/**
 * @param {number} idx
 * @return {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.getParcelAt = function(idx) {
  return this._numParcels <= 1 ? this._singleParcel : this._parcelArray[idx];
};


/**
 * @param {number} value
 * @return {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.addTotalDepth = function(value) {
  this._totalDepth += value;
  return this._totalDepth;
};


/**
 * @protected
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.reset = function() {
  this._totalDepth = 0;
  this._hasContent = false;
  this._currentParcelIndex = -1;
  this._currentParcel = null;
  this._leftMargin = 0;
  this._rightMargin = 0;
  this._insideListItemMargin = 0;
};


/**
 * @param {org.apache.royale.geom.Rectangle} column
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} columnIndex
 * @return {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.addParcel = function(column, controller, columnIndex) {
  var /** @type {org.apache.royale.textLayout.compose.Parcel} */ newParcel = this._numParcels == 0 && this._singleParcel ? this._singleParcel.initialize(this._verticalText, column.x, column.y, column.width, column.height, controller, columnIndex) : new org.apache.royale.textLayout.compose.Parcel(this._verticalText, column.x, column.y, column.width, column.height, controller, columnIndex);
  if (this._numParcels == 0)
    this._singleParcel = newParcel;
  else if (this._numParcels == 1)
    this._parcelArray = [this._singleParcel, newParcel];
  else
    this._parcelArray.push(newParcel);
  this._numParcels++;
  return newParcel;
};


/**
 * @return {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.numParcels = function() {
  return this._numParcels;
};


/**
 * @return {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.popParcel = function() {
  this._numParcels--;
  return this._parcelArray.pop();
};


/**
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {org.apache.royale.textLayout.elements.TableCellElement} cell
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.addTableCell2ColumnState = function(controller, cell) {
  var /** @type {org.apache.royale.textLayout.container.ColumnState} */ columnState = controller.columnState;
  if (columnState)
    columnState.pushTableCell(cell);
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.container.IContainerController} controllerToInitialize
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.addOneControllerToParcelList = function(controllerToInitialize) {
  var /** @type {org.apache.royale.textLayout.container.ColumnState} */ columnState = controllerToInitialize.columnState;
  columnState.clearCellList();
  for (var /** @type {number} */ columnIndex = 0; columnIndex < columnState.columnCount; columnIndex++) {
    var /** @type {org.apache.royale.geom.Rectangle} */ column = columnState.getColumnAt(columnIndex);
    if (!column.isEmpty())
      this.addParcel(column, controllerToInitialize, columnIndex);
  }
};


/**
 * @param {org.apache.royale.textLayout.compose.IFlowComposer} composer
 * @param {number} controllerStartIndex
 * @param {number} controllerEndIndex
 * @param {boolean} composeToPosition
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.beginCompose = function(composer, controllerStartIndex, controllerEndIndex, composeToPosition) {
  this._flowComposer = composer;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ rootFormat = composer.rootElement.computedFormat;
  this._explicitLineBreaks = rootFormat.lineBreak == org.apache.royale.textLayout.formats.LineBreak.EXPLICIT;
  this._verticalText = (rootFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL);
  if (composer.numControllers != 0) {
    if (controllerEndIndex < 0)
      controllerEndIndex = (composer.numControllers - 1) >> 0;
    else
      controllerEndIndex = (Math.min(controllerEndIndex, composer.numControllers - 1)) >> 0;
    var /** @type {number} */ idx = controllerStartIndex;
    do {
      this.addOneControllerToParcelList(org.apache.royale.utils.Language.as(composer.getControllerAt(idx), org.apache.royale.textLayout.container.IContainerController, true));
    } while (idx++ != controllerEndIndex);
    if (controllerEndIndex == composer.numControllers - 1)
      this.org_apache_royale_textLayout_compose_ParcelList_adjustForScroll(composer.getControllerAt((composer.numControllers - 1) >> 0), composeToPosition);
  }
  this.reset();
};


/** Adjust the size of the parcel corresponding to the last column of the containter, in 
 * order to account for scrolling.
 * @private
 * @param {org.apache.royale.textLayout.container.IContainerController} containerToInitialize
 * @param {boolean} composeToPosition
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.org_apache_royale_textLayout_compose_ParcelList_adjustForScroll = function(containerToInitialize, composeToPosition) {
  var /** @type {org.apache.royale.textLayout.compose.Parcel} */ p;
  if (this._verticalText) {
    if (containerToInitialize.horizontalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF) {
      p = this.getParcelAt((this._numParcels - 1) >> 0);
      if (p) {
        var /** @type {number} */ horizontalPaddingAmount = containerToInitialize.getTotalPaddingRight() + containerToInitialize.getTotalPaddingLeft();
        var /** @type {number} */ right = p.right;
        p.x = containerToInitialize.horizontalScrollPosition - p.width - horizontalPaddingAmount;
        p.width = right - p.x;
        p.fitAny = true;
        p.composeToPosition = composeToPosition;
      }
    }
  } else {
    if (containerToInitialize.verticalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF) {
      p = this.getParcelAt((this._numParcels - 1) >> 0);
      if (p) {
        var /** @type {number} */ verticalPaddingAmount = containerToInitialize.getTotalPaddingBottom() + containerToInitialize.getTotalPaddingTop();
        p.height = (containerToInitialize.verticalScrollPosition + p.height + verticalPaddingAmount) - p.y;
        p.fitAny = true;
        p.composeToPosition = composeToPosition;
      }
    }
  }
};


/**
 * @param {number} leftMargin
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.pushLeftMargin = function(leftMargin) {
  this._leftMargin += leftMargin;
};


/**
 * @param {number} leftMargin
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.popLeftMargin = function(leftMargin) {
  this._leftMargin -= leftMargin;
};


/**
 * @param {number} rightMargin
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.pushRightMargin = function(rightMargin) {
  this._rightMargin += rightMargin;
};


/**
 * @param {number} rightMargin
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.popRightMargin = function(rightMargin) {
  this._rightMargin -= rightMargin;
};


/**
 * @param {number} margin
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.pushInsideListItemMargin = function(margin) {
  this._insideListItemMargin += margin;
};


/**
 * @param {number} margin
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.popInsideListItemMargin = function(margin) {
  this._insideListItemMargin -= margin;
};


/**
 * @param {org.apache.royale.geom.Rectangle} o
 * @return {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.getComposeXCoord = function(o) {
  return this._verticalText ? o.right : o.left;
};


/**
 * @param {org.apache.royale.geom.Rectangle} o
 * @return {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.getComposeYCoord = function(o) {
  return o.top;
};


/**
 * @param {org.apache.royale.geom.Rectangle} o
 * @return {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.getComposeWidth = function(o) {
  if (this.org_apache_royale_textLayout_compose_ParcelList_measureLogicalWidth)
    return org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  return this._verticalText ? o.height : o.width;
};


/**
 * @param {org.apache.royale.geom.Rectangle} o
 * @return {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.getComposeHeight = function(o) {
  if (this.org_apache_royale_textLayout_compose_ParcelList_measureLogicalHeight)
    return org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  return this._verticalText ? o.width : o.height;
};


/** Returns true if the current parcel is the last.
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.atLast = function() {
  return this._numParcels == 0 || this._currentParcelIndex == this._numParcels - 1;
};


/**
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.atEnd = function() {
  return this._numParcels == 0 || this._currentParcelIndex >= this._numParcels;
};


/**
 * @param {number} index
 * @param {number=} depth
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.gotoParcel = function(index, depth) {
  depth = typeof depth !== 'undefined' ? depth : 0;
  if (index < 0 || index >= this._numParcels)
    return false;
  this._currentParcel = this.getParcelAt(index);
  if (this._currentParcel == null)
    return false;
  this._currentParcelIndex = index;
  this._totalDepth = depth;
  return true;
};


/**
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.next = function() {
  
  var /** @type {boolean} */ nextParcelIsValid = (this._currentParcelIndex + 1) < this._numParcels;
  this._currentParcelIndex += 1;
  this._totalDepth = 0;
  if (nextParcelIsValid) {
    this._currentParcel = this.getParcelAt(this._currentParcelIndex);
  }
  else
    this._currentParcel = null;
  return nextParcelIsValid;
};


/**Return the slug rectangle for a line that goes at the current vertical location,
 * and could extend down for at least height pixels. Note that this function
 * can change the current parcel, and the location within the parcel.
 * @asparam slugRect result rectangle where line was fit
 * @asparam height	amount of contiguous vertical space that must be available
 * @asparam minWidth	amount of contiguous horizontal space that must be available 
 * @asreturn true if a line slug was fit horizontal space actually available
 * @param {org.apache.royale.textLayout.compose.Slug} slug
 * @param {number} height
 * @param {number} minWidth
 * @param {number} textIndent
 * @param {boolean} directionLTR
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.getLineSlug = function(slug, height, minWidth, textIndent, directionLTR) {
  if (this.currentParcel.getLineSlug(slug, this._totalDepth, height, minWidth, this.currentParcel.fitAny ? 1 : org.apache.royale.utils.Language._int(height), this._leftMargin, this._rightMargin, textIndent + this._insideListItemMargin, directionLTR, this._explicitLineBreaks)) {
    if (this.totalDepth != slug.depth)
      this._totalDepth = slug.depth;
    return true;
  }
  return false;
};


/**
 * @param {org.apache.royale.textLayout.compose.Slug} slug
 * @param {number} totalDepth
 * @param {number} width
 * @param {number} height
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.fitFloat = function(slug, totalDepth, width, height) {
  return this.currentParcel.getLineSlug(slug, totalDepth, height, width, this.currentParcel.fitAny ? 1 : org.apache.royale.utils.Language._int(height), this._leftMargin, this._rightMargin, 0, true, this._explicitLineBreaks);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.currentParcelIndex;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__currentParcelIndex = function() {
  return this._currentParcelIndex;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.explicitLineBreaks;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__explicitLineBreaks = function() {
  return this._explicitLineBreaks;
};


/**
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.org_apache_royale_textLayout_compose_ParcelList_measureLogicalWidth;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__org_apache_royale_textLayout_compose_ParcelList_measureLogicalWidth = function() {
  if (this._explicitLineBreaks)
    return true;
  if (!this._currentParcel)
    return false;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this._currentParcel.controller;
  return this._verticalText ? controller.measureHeight : controller.measureWidth;
};


/**
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.org_apache_royale_textLayout_compose_ParcelList_measureLogicalHeight;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__org_apache_royale_textLayout_compose_ParcelList_measureLogicalHeight = function() {
  if (!this._currentParcel)
    return false;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this._currentParcel.controller;
  return this._verticalText ? controller.measureWidth : controller.measureHeight;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.totalDepth;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__totalDepth = function() {
  return this._totalDepth;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.leftMargin;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__leftMargin = function() {
  return this._leftMargin;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.rightMargin;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__rightMargin = function() {
  return this._rightMargin;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.insideListItemMargin;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__insideListItemMargin = function() {
  return this._insideListItemMargin;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.currentParcel;


org.apache.royale.textLayout.compose.ParcelList.prototype.get__currentParcel = function() {
  return this._currentParcel;
};


Object.defineProperties(org.apache.royale.textLayout.compose.ParcelList.prototype, /** @lends {org.apache.royale.textLayout.compose.ParcelList.prototype} */ {
/**
 * @type {number}
 */
currentParcelIndex: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__currentParcelIndex},
/**
 * @type {boolean}
 */
explicitLineBreaks: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__explicitLineBreaks},
/**
 * @type {boolean}
 */
org_apache_royale_textLayout_compose_ParcelList_measureLogicalWidth: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__org_apache_royale_textLayout_compose_ParcelList_measureLogicalWidth},
/**
 * @type {boolean}
 */
org_apache_royale_textLayout_compose_ParcelList_measureLogicalHeight: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__org_apache_royale_textLayout_compose_ParcelList_measureLogicalHeight},
/**
 * @type {number}
 */
totalDepth: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__totalDepth},
/**
 * @type {number}
 */
leftMargin: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__leftMargin},
/**
 * @type {number}
 */
rightMargin: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__rightMargin},
/**
 * @type {number}
 */
insideListItemMargin: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__insideListItemMargin},
/**
 * @type {org.apache.royale.textLayout.compose.Parcel}
 */
currentParcel: {
get: org.apache.royale.textLayout.compose.ParcelList.prototype.get__currentParcel}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ParcelList', qName: 'org.apache.royale.textLayout.compose.ParcelList', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'currentParcelIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'explicitLineBreaks': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'totalDepth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'leftMargin': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'rightMargin': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'insideListItemMargin': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'currentParcel': { type: 'org.apache.royale.textLayout.compose.Parcel', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'}
      };
    },
    methods: function () {
      return {
        '|getParcelList': { type: 'org.apache.royale.textLayout.compose.ParcelList', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        '|releaseParcelList': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ParcelList', false ]; }},
        'ParcelList': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'releaseAnyReferences': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'getParcelAt': { type: 'org.apache.royale.textLayout.compose.Parcel', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'int', false ]; }},
        'addTotalDepth': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'addParcel': { type: 'org.apache.royale.textLayout.compose.Parcel', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ,'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'numParcels': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'popParcel': { type: 'org.apache.royale.textLayout.compose.Parcel', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'addTableCell2ColumnState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ,'org.apache.royale.textLayout.elements.TableCellElement', false ]; }},
        'beginCompose': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.textLayout.compose.IFlowComposer', false ,'int', false ,'int', false ,'Boolean', false ]; }},
        'pushLeftMargin': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'popLeftMargin': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'pushRightMargin': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'popRightMargin': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'pushInsideListItemMargin': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'popInsideListItemMargin': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'Number', false ]; }},
        'getComposeXCoord': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ]; }},
        'getComposeYCoord': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ]; }},
        'getComposeWidth': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ]; }},
        'getComposeHeight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ]; }},
        'atLast': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'atEnd': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'gotoParcel': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'int', false ,'Number', true ]; }},
        'next': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList'},
        'getLineSlug': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.textLayout.compose.Slug', false ,'Number', false ,'Number', false ,'Number', false ,'Boolean', false ]; }},
        'fitFloat': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ParcelList', parameters: function () { return [ 'org.apache.royale.textLayout.compose.Slug', false ,'Number', false ,'Number', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.ParcelList.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ParcelList.js.map
