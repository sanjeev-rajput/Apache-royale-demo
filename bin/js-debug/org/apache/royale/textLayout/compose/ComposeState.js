/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/ComposeState.as
 * org.apache.royale.textLayout.compose.ComposeState
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.ComposeState');
/* Royale Dependency List: org.apache.royale.text.engine.Constants,org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.FloatCompositionData,org.apache.royale.textLayout.compose.FlowDamageType,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.compose.Parcel,org.apache.royale.textLayout.compose.ParcelList,org.apache.royale.textLayout.compose.TextFlowLine,org.apache.royale.textLayout.compose.utils.NumberlineUtil,org.apache.royale.textLayout.compose.utils.TextLineUtil,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.elements.ConfigSettings,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.Float,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.VerticalAlign,org.apache.royale.textLayout.utils.Twips,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.compose.BaseCompose');
goog.require('org.apache.royale.textLayout.compose.IComposeState');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.compose.BaseCompose}
 * @implements {org.apache.royale.textLayout.compose.IComposeState}
 */
org.apache.royale.textLayout.compose.ComposeState = function() {
  org.apache.royale.textLayout.compose.ComposeState.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.compose.ComposeState, org.apache.royale.textLayout.compose.BaseCompose);


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype._curLineIndex = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.vjBeginLineIndex = 0;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.vjDisableThisParcel;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype._useExistingLine;


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.createParcelList = function() {
  return org.apache.royale.textLayout.compose.ParcelList.getParcelList();
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.releaseParcelList = function(list) {
  org.apache.royale.textLayout.compose.ParcelList.releaseParcelList(list);
};


/**
 *  @asprivate
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.composeTextFlow = function(textFlow, composeToPosition, controllerEndIndex) {
  
  this._curLineIndex = -1;
  this._curLine = null;
  this.vjBeginLineIndex = 0;
  this.vjDisableThisParcel = false;
  return org.apache.royale.textLayout.compose.ComposeState.superClass_.composeTextFlow.apply(this, [textFlow, composeToPosition, controllerEndIndex]);
};


/**
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.initializeForComposer = function(composer, composeToPosition, controllerStartIndex, controllerEndIndex) {
  this._startComposePosition = composer.damageAbsoluteStart;
  if (controllerStartIndex == -1) {
    var /** @type {number} */ controllerIndex = composer.findControllerIndexAtPosition(this._startComposePosition);
    if (controllerIndex == -1) {
      controllerIndex = (composer.numControllers - 1) >> 0;
      while (controllerIndex != 0 && composer.getControllerAt(controllerIndex).textLength == 0)
        controllerIndex--;
    }
  }
  this._startController = composer.getControllerAt(controllerIndex);
  
  if (this._startController.computedFormat.verticalAlign != org.apache.royale.textLayout.formats.VerticalAlign.TOP)
    this._startComposePosition = this._startController.absoluteStart;
  org.apache.royale.textLayout.compose.ComposeState.superClass_.initializeForComposer.apply(this, [composer, composeToPosition, controllerIndex, controllerEndIndex]);
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.composeInternal = function(composeRoot, absStart) {
  org.apache.royale.textLayout.compose.ComposeState.superClass_.composeInternal.apply(this, [composeRoot, absStart]);
  if (this._curElement) {
    var /** @type {number} */ lineIndex = this._curLineIndex;
    
    while (lineIndex < this._flowComposer.numLines)
      this._flowComposer.getLineAt(lineIndex++).setController(null, -1);
  }
};


/**
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.doVerticalAlignment = function(canVerticalAlign, nextParcel) {
  if (canVerticalAlign && this._curParcel && this.vjBeginLineIndex != this._curLineIndex && !this.vjDisableThisParcel) {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this._curParcel.controller;
    var /** @type {string} */ vjtype = org.apache.royale.utils.Language.string(controller.computedFormat.verticalAlign);
    if (vjtype == org.apache.royale.textLayout.formats.VerticalAlign.JUSTIFY) {
      for (var /** @type {number} */ i = (controller.numFloats - 1) >> 0; i >= 0 && canVerticalAlign; --i) {
        var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = controller.getFloatAt(i);
        if (floatInfo.floatType != org.apache.royale.textLayout.formats.Float.NONE)
          canVerticalAlign = false;
      }
    }
    if (canVerticalAlign && vjtype != org.apache.royale.textLayout.formats.VerticalAlign.TOP) {
      var /** @type {number} */ end = this._flowComposer.findLineIndexAtPosition((this._curElementStart + this._curElementOffset) >> 0);
      if (this.vjBeginLineIndex < end) {
        var /** @type {number} */ beginFloatIndex = 0;
        var /** @type {number} */ endFloatIndex = 0;
        var /** @type {Array} */ lines = this._flowComposer.lines;
        if (controller.numFloats > 0) {
          beginFloatIndex = controller.findFloatIndexAtOrAfter((lines[this.vjBeginLineIndex].absoluteStart) >> 0);
          endFloatIndex = controller.findFloatIndexAfter((this._curElementStart + this._curElementOffset) >> 0);
        }
        this.applyVerticalAlignmentToColumn(controller, vjtype, lines, this.vjBeginLineIndex, (end - this.vjBeginLineIndex) >> 0, beginFloatIndex, endFloatIndex);
      }
    }
  }
  this.vjDisableThisParcel = false;
  this.vjBeginLineIndex = this._curLineIndex;
};


/** apply vj and adjust the parcel bounds 
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.applyVerticalAlignmentToColumn = function(controller, vjType, lines, beginIndex, numLines, beginFloatIndex, endFloatIndex) {
  org.apache.royale.textLayout.compose.ComposeState.superClass_.applyVerticalAlignmentToColumn.apply(this, [controller, vjType, lines, beginIndex, numLines, beginFloatIndex, endFloatIndex]);
  var foreachiter0_target = controller.composedLines;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var composedLine = foreachiter0_target[foreachiter0];
  {
    if (!org.apache.royale.utils.Language.is(composedLine, org.apache.royale.text.engine.ITextLine)) {
      continue;
    }
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = composedLine;
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = textLine.userData;
    
    line.createShape(this._blockProgression, textLine);
  }}
  
};


/** Final adjustment on the content bounds. 
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.finalParcelAdjustment = function(controller) {
  
  var /** @type {number} */ minX = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  var /** @type {number} */ minY = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  var /** @type {number} */ maxX = -org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  var /** @type {boolean} */ verticalText = this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
  if (!isNaN(this._parcelLogicalTop)) {
    if (verticalText)
      maxX = this._parcelLogicalTop;
    else
      minY = this._parcelLogicalTop;
  }
  if (!this._measuring) {
    if (verticalText)
      minY = this._accumulatedMinimumStart;
    else
      minX = this._accumulatedMinimumStart;
  } else {
    var /** @type {number} */ edgeAdjust;
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ curPara;
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ curParaFormat;
    var /** @type {string} */ curParaDirection;
    for (var /** @type {number} */ lineIndex = this._flowComposer.findLineIndexAtPosition(this._curParcelStart); lineIndex < this._curLineIndex; lineIndex++) {
      var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = this._flowComposer.getLineAt(lineIndex);
      
      if (line.paragraph != curPara) {
        curPara = line.paragraph;
        curParaFormat = curPara.computedFormat;
        curParaDirection = org.apache.royale.utils.Language.string(curParaFormat.direction);
        if (curParaDirection != org.apache.royale.textLayout.formats.Direction.LTR)
          edgeAdjust = Number(curParaFormat.paragraphEndIndent);
      }
      if (curParaDirection == org.apache.royale.textLayout.formats.Direction.LTR)
        edgeAdjust = Math.max(line.lineOffset, 0);
      edgeAdjust = verticalText ? line.y - edgeAdjust : line.x - edgeAdjust;
      var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(line.getTextLine(true));
      if (numberLine) {
        var /** @type {number} */ numberLineStart = verticalText ? numberLine.y + line.y : numberLine.x + line.x;
        edgeAdjust = Math.min(edgeAdjust, numberLineStart);
      }
      if (verticalText)
        minY = Math.min(edgeAdjust, minY);
      else
        minX = Math.min(edgeAdjust, minX);
    }
  }
  if (minX != org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH && Math.abs(minX - this._parcelLeft) >= 1)
    this._parcelLeft = minX;
  if (maxX != -org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH && Math.abs(maxX - this._parcelRight) >= 1)
    this._parcelRight = maxX;
  if (minY != org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH && Math.abs(minY - this._parcelTop) >= 1)
    this._parcelTop = minY;
};


/**
 *  @royaleignorecoercion org.apache.royale.textLayout.compose.IFlowComposer
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.endTableBlock = function(block) {
  org.apache.royale.textLayout.compose.ComposeState.superClass_.endTableBlock.apply(this, [block]);
  this._flowComposer.addLine(block, this._curLineIndex);
  this.commitLastLineState(this._curLine);
  this._curLineIndex++;
};


/**
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.endLine = function(textLine) {
  org.apache.royale.textLayout.compose.ComposeState.superClass_.endLine.apply(this, [textLine]);
  if (!this._useExistingLine)
    this._flowComposer.addLine(this._curLine, this._curLineIndex);
  this.commitLastLineState(this._curLine);
  this._curLineIndex++;
};


/**
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.composeParagraphElement = function(elem, absStart) {
  if (this._curLineIndex < 0)
    this._curLineIndex = this._flowComposer.findLineIndexAtPosition((this._curElementStart + this._curElementOffset) >> 0);
  return org.apache.royale.textLayout.compose.ComposeState.superClass_.composeParagraphElement.apply(this, [elem, absStart]);
};


/**
 *  @asprivate
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.composeNextLine = function() {
  
  var /** @type {number} */ startCompose = (this._curElementStart + this._curElementOffset - this._curParaStart) >> 0;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = this._curLineIndex < this._flowComposer.numLines ? this._flowComposer.lines[this._curLineIndex] : null;
  var /** @type {boolean} */ useExistingLine = !!(line && (!line.isDamaged() || line.validity == org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY));
  if (org.apache.royale.textLayout.elements.ConfigSettings.usesDiscretionaryHyphens) {
    if (useExistingLine && line.textLength > 0 && line.paragraph.getCharCodeAtPosition((line.absoluteStart + line.textLength - 1) >> 0) == 0xAD)
      useExistingLine = false;
  }
  var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine;
  if (this._listItemElement && this._listItemElement.getAbsoluteStart() == this._curElementStart + this._curElementOffset) {
    var /** @type {org.apache.royale.text.engine.ITextLine} */ peekLine;
    if (useExistingLine && (peekLine = line.peekTextLine()) != null) {
      numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(peekLine);
    } else {
      var /** @type {boolean} */ isRTL = this._curParaElement.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.RTL;
      numberLine = org.apache.royale.textLayout.compose.utils.NumberlineUtil.createNumberLine(this._listItemElement, this._curParaElement, this._flowComposer.swfContext, isRTL ? this._parcelList.rightMargin : this._parcelList.leftMargin);
    }
    this.pushInsideListItemMargins(numberLine);
  }
  this._parcelList.getLineSlug(this._lineSlug, 0, 1, this._textIndent, this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR);
  if (useExistingLine && org.apache.royale.textLayout.utils.Twips.to(this._lineSlug.width) != line.outerTargetWidthTW)
    useExistingLine = false;
  this._curLine = useExistingLine ? line : null;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
  for (;;) {
    while (!this._curLine) {
      useExistingLine = false;
      
      
      
      textLine = this.createTextLine(this._lineSlug.width, !this._lineSlug.wrapsKnockOut);
      if (textLine)
        break;
      var /** @type {number} */ newDepth = this._curParcel.findNextTransition(this._lineSlug.depth);
      if (newDepth < Number.MAX_VALUE) {
        this._parcelList.addTotalDepth(newDepth - this._lineSlug.depth);
        if (!this._parcelList.getLineSlug(this._lineSlug, 0, 1, this._textIndent, this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR))
          return null;
      } else {
        this.advanceToNextParcel();
        if (!this._parcelList.atEnd()) {
          if (this._parcelList.getLineSlug(this._lineSlug, 0, 1, this._textIndent, this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR))
            continue;
        }
        this.popInsideListItemMargins(numberLine);
        return null;
      }
    }
    
    if (!textLine)
      textLine = this._curLine.getTextLine(true);
    if (this.fitLineToParcel(textLine, !useExistingLine, numberLine))
      break;
    this._curLine = null;
    if (this._parcelList.atEnd()) {
      this.popInsideListItemMargins(numberLine);
      return null;
    }
  }
  if (this._curLine.validity == org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY)
    this._curLine.clearDamage();
  this._useExistingLine = useExistingLine;
  this.popInsideListItemMargins(numberLine);
  
  return textLine;
};


/** @asprivate 
 * @protected
 * @override
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.createTextLine = function(targetWidth, allowEmergencyBreaks) {
  this._curLine = new org.apache.royale.textLayout.compose.TextFlowLine(null, null);
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = org.apache.royale.textLayout.compose.ComposeState.superClass_.createTextLine.apply(this, [targetWidth, allowEmergencyBreaks]);
  if (textLine)
    textLine.doubleClickEnabled = true;
  else
    this._curLine = null;
  return textLine;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ComposeState', qName: 'org.apache.royale.textLayout.compose.ComposeState', kind: 'class' }], interfaces: [org.apache.royale.textLayout.compose.IComposeState] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'composeTextFlow': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.ComposeState', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.ComposeState.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ComposeState.js.map
