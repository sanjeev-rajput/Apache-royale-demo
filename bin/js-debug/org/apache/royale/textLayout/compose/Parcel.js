/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/Parcel.as
 * org.apache.royale.textLayout.compose.Parcel
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.Parcel');
/* Royale Dependency List: org.apache.royale.text.engine.Constants,org.apache.royale.textLayout.compose.Slug,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.formats.ClearFloats,org.apache.royale.textLayout.formats.Direction,XML*/
goog.provide('org.apache.royale.textLayout.compose.Parcel.Edge');
goog.provide('org.apache.royale.textLayout.compose.Parcel.Span');




/** Constructor. 
 * @constructor
 * @param {boolean} verticalText
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} columnIndex
 */
org.apache.royale.textLayout.compose.Parcel = function(verticalText, x, y, width, height, controller, columnIndex) {
  this.initialize(verticalText, x, y, width, height, controller, columnIndex);
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.x;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.y;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.width;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.height;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.logicalWidth;


/**
 * @private
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__controller;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__columnIndex = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__fitAny;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__composeToPosition;


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.Parcel.Edge}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__left;


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.Parcel.Edge}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__right;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__maxWidth;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel_EDGE_CACHE_MAX = 6;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.Parcel.edgeCache;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel__verticalText;


/**
 * @param {boolean} verticalText
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} columnIndex
 * @return {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.initialize = function(verticalText, x, y, width, height, controller, columnIndex) {
  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;
  this.logicalWidth = verticalText ? height : width;
  this.org_apache_royale_textLayout_compose_Parcel__verticalText = verticalText;
  this.org_apache_royale_textLayout_compose_Parcel__controller = controller;
  this.org_apache_royale_textLayout_compose_Parcel__columnIndex = columnIndex;
  this.org_apache_royale_textLayout_compose_Parcel__fitAny = false;
  this.org_apache_royale_textLayout_compose_Parcel__composeToPosition = false;
  var /** @type {number} */ xmin;
  if (verticalText) {
    xmin = y;
    this.org_apache_royale_textLayout_compose_Parcel__maxWidth = height;
  } else {
    xmin = x;
    this.org_apache_royale_textLayout_compose_Parcel__maxWidth = width;
  }
  this.org_apache_royale_textLayout_compose_Parcel__left = this.org_apache_royale_textLayout_compose_Parcel_allocateEdge(xmin);
  this.org_apache_royale_textLayout_compose_Parcel__right = this.org_apache_royale_textLayout_compose_Parcel_allocateEdge(xmin + this.org_apache_royale_textLayout_compose_Parcel__maxWidth);
  return this;
};


/** prevent any leaks. @asprivate 
 */
org.apache.royale.textLayout.compose.Parcel.prototype.releaseAnyReferences = function() {
  this.org_apache_royale_textLayout_compose_Parcel__controller = null;
  this.org_apache_royale_textLayout_compose_Parcel_deallocateEdge(this.org_apache_royale_textLayout_compose_Parcel__left);
  this.org_apache_royale_textLayout_compose_Parcel_deallocateEdge(this.org_apache_royale_textLayout_compose_Parcel__right);
};


/**
 * @private
 * @param {number} x
 * @return {org.apache.royale.textLayout.compose.Parcel.Edge}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel_allocateEdge = function(x) {
  if (!org.apache.royale.textLayout.compose.Parcel.edgeCache)
    org.apache.royale.textLayout.compose.Parcel.edgeCache = [];
  var /** @type {org.apache.royale.textLayout.compose.Parcel.Edge} */ edge = (org.apache.royale.textLayout.compose.Parcel.edgeCache.length > 0) ? org.apache.royale.textLayout.compose.Parcel.edgeCache.pop() : new org.apache.royale.textLayout.compose.Parcel.Edge();
  edge.initialize(x);
  return edge;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.compose.Parcel.Edge} edge
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel_deallocateEdge = function(edge) {
  if (org.apache.royale.textLayout.compose.Parcel.edgeCache.length < this.org_apache_royale_textLayout_compose_Parcel_EDGE_CACHE_MAX)
    org.apache.royale.textLayout.compose.Parcel.edgeCache.push(edge);
};


/** Do explicit line breaking (no wrapping) 
 * @private
 * @return {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.org_apache_royale_textLayout_compose_Parcel_getLogicalHeight = function() {
  if (this.org_apache_royale_textLayout_compose_Parcel__verticalText) {
    return this.org_apache_royale_textLayout_compose_Parcel__controller.measureWidth ? org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH : this.width;
  } else {
    return this.org_apache_royale_textLayout_compose_Parcel__controller.measureHeight ? org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH : this.height;
  }
};


/**
 * @param {string} clear
 * @param {number} depth
 * @param {string} direction
 * @return {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.applyClear = function(clear, depth, direction) {
  var /** @type {number} */ leftMargin;
  var /** @type {number} */ rightMargin;
  var /** @type {number} */ adjustedDepth = depth;
  if (clear == org.apache.royale.textLayout.formats.ClearFloats.START)
    clear = (direction == org.apache.royale.textLayout.formats.Direction.LTR) ? org.apache.royale.textLayout.formats.ClearFloats.LEFT : org.apache.royale.textLayout.formats.ClearFloats.RIGHT;
  else if (clear == org.apache.royale.textLayout.formats.ClearFloats.END)
    clear = (direction == org.apache.royale.textLayout.formats.Direction.RTL) ? org.apache.royale.textLayout.formats.ClearFloats.LEFT : org.apache.royale.textLayout.formats.ClearFloats.RIGHT;
  while (adjustedDepth < Number.MAX_VALUE) {
    leftMargin = this.org_apache_royale_textLayout_compose_Parcel__left.getMaxForSpan(adjustedDepth, adjustedDepth + 1);
    if (leftMargin > 0 && (clear == org.apache.royale.textLayout.formats.ClearFloats.BOTH || clear == org.apache.royale.textLayout.formats.ClearFloats.LEFT)) {
      adjustedDepth = this.org_apache_royale_textLayout_compose_Parcel__left.findNextTransition(adjustedDepth);
      continue;
    }
    rightMargin = this.org_apache_royale_textLayout_compose_Parcel__right.getMaxForSpan(adjustedDepth, adjustedDepth + 1);
    if (rightMargin > 0 && (clear == org.apache.royale.textLayout.formats.ClearFloats.BOTH || clear == org.apache.royale.textLayout.formats.ClearFloats.RIGHT)) {
      adjustedDepth = this.org_apache_royale_textLayout_compose_Parcel__right.findNextTransition(adjustedDepth);
      continue;
    }
    return adjustedDepth - depth;
  }
  return (this.org_apache_royale_textLayout_compose_Parcel__verticalText ? this.width : this.height);
};


/**
 * @param {number} depth
 * @param {number} minimumHeight
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.fitsInHeight = function(depth, minimumHeight) {
  return this.composeToPosition || depth + minimumHeight <= this.org_apache_royale_textLayout_compose_Parcel_getLogicalHeight();
};


/**
 * @param {org.apache.royale.textLayout.compose.Slug} slug
 * @param {number} depth
 * @param {number} lineHeight
 * @param {number} minimumWidth
 * @param {number} minimumHeight
 * @param {number} leftMargin
 * @param {number} rightMargin
 * @param {number} textIndent
 * @param {boolean} directionLTR
 * @param {boolean} useExplicitLineBreaks
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.getLineSlug = function(slug, depth, lineHeight, minimumWidth, minimumHeight, leftMargin, rightMargin, textIndent, directionLTR, useExplicitLineBreaks) {
  if (!this.fitsInHeight(depth, minimumHeight))
    return false;
  slug.height = lineHeight;
  while (depth < Number.MAX_VALUE) {
    slug.depth = depth;
    slug.leftMargin = this.org_apache_royale_textLayout_compose_Parcel__left.getMaxForSpan(slug.depth, slug.depth + lineHeight);
    slug.wrapsKnockOut = slug.leftMargin != 0;
    if (leftMargin > 0)
      slug.leftMargin = Math.max(leftMargin, slug.leftMargin);
    else
      slug.leftMargin += leftMargin;
    slug.rightMargin = this.org_apache_royale_textLayout_compose_Parcel__right.getMaxForSpan(slug.depth, slug.depth + lineHeight);
    slug.wrapsKnockOut = slug.wrapsKnockOut || (slug.rightMargin != 0);
    if (rightMargin > 0)
      slug.rightMargin = Math.max(rightMargin, slug.rightMargin);
    else
      slug.rightMargin += rightMargin;
    if (textIndent) {
      if (directionLTR)
        slug.leftMargin += textIndent;
      else
        slug.rightMargin += textIndent;
    }
    if (useExplicitLineBreaks || (this.org_apache_royale_textLayout_compose_Parcel__verticalText && this.org_apache_royale_textLayout_compose_Parcel__controller.measureHeight) || (!this.org_apache_royale_textLayout_compose_Parcel__verticalText && this.org_apache_royale_textLayout_compose_Parcel__controller.measureWidth))
      slug.width = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
    else
      slug.width = this.logicalWidth - (slug.leftMargin + slug.rightMargin);
    if (!minimumWidth || slug.width >= minimumWidth)
      break;
    depth = this.findNextTransition(depth);
  }
  return (depth < Number.MAX_VALUE);
};


/**
 * @param {number} knockOutWidth
 * @param {number} yMin
 * @param {number} yMax
 * @param {boolean} onLeft
 */
org.apache.royale.textLayout.compose.Parcel.prototype.knockOut = function(knockOutWidth, yMin, yMax, onLeft) {
  var /** @type {org.apache.royale.textLayout.compose.Parcel.Edge} */ edge = onLeft ? this.org_apache_royale_textLayout_compose_Parcel__left : this.org_apache_royale_textLayout_compose_Parcel__right;
  edge.addSpan(knockOutWidth, yMin, yMax);
};


/**
 * @param {number} knockOutWidth
 * @param {number} yMin
 * @param {number} yMax
 * @param {boolean} onLeft
 */
org.apache.royale.textLayout.compose.Parcel.prototype.removeKnockOut = function(knockOutWidth, yMin, yMax, onLeft) {
  var /** @type {org.apache.royale.textLayout.compose.Parcel.Edge} */ edge = onLeft ? this.org_apache_royale_textLayout_compose_Parcel__left : this.org_apache_royale_textLayout_compose_Parcel__right;
  edge.removeSpan(knockOutWidth, yMin, yMax);
};


/** Returns true if the parcel has no knockouts 
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.isRectangular = function() {
  return (this.org_apache_royale_textLayout_compose_Parcel__left.numSpans <= 0 && this.org_apache_royale_textLayout_compose_Parcel__right.numSpans <= 0);
};


/**
 * @param {number} y
 * @return {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.findNextTransition = function(y) {
  return Math.min(this.org_apache_royale_textLayout_compose_Parcel__left.findNextTransition(y), this.org_apache_royale_textLayout_compose_Parcel__right.findNextTransition(y));
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.bottom;


org.apache.royale.textLayout.compose.Parcel.prototype.get__bottom = function() {
  return (this.y + this.height);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.right;


org.apache.royale.textLayout.compose.Parcel.prototype.get__right = function() {
  return (this.x + this.width);
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.controller;


org.apache.royale.textLayout.compose.Parcel.prototype.get__controller = function() {
  return this.org_apache_royale_textLayout_compose_Parcel__controller;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.columnIndex;


org.apache.royale.textLayout.compose.Parcel.prototype.get__columnIndex = function() {
  return this.org_apache_royale_textLayout_compose_Parcel__columnIndex;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.fitAny;


org.apache.royale.textLayout.compose.Parcel.prototype.get__fitAny = function() {
  return this.org_apache_royale_textLayout_compose_Parcel__fitAny;
};


org.apache.royale.textLayout.compose.Parcel.prototype.set__fitAny = function(value) {
  this.org_apache_royale_textLayout_compose_Parcel__fitAny = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.composeToPosition;


org.apache.royale.textLayout.compose.Parcel.prototype.get__composeToPosition = function() {
  return this.org_apache_royale_textLayout_compose_Parcel__composeToPosition;
};


org.apache.royale.textLayout.compose.Parcel.prototype.set__composeToPosition = function(value) {
  this.org_apache_royale_textLayout_compose_Parcel__composeToPosition = value;
};


Object.defineProperties(org.apache.royale.textLayout.compose.Parcel.prototype, /** @lends {org.apache.royale.textLayout.compose.Parcel.prototype} */ {
/**
 * @type {number}
 */
bottom: {
get: org.apache.royale.textLayout.compose.Parcel.prototype.get__bottom},
/**
 * @type {number}
 */
right: {
get: org.apache.royale.textLayout.compose.Parcel.prototype.get__right},
/**
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
controller: {
get: org.apache.royale.textLayout.compose.Parcel.prototype.get__controller},
/**
 * @type {number}
 */
columnIndex: {
get: org.apache.royale.textLayout.compose.Parcel.prototype.get__columnIndex},
/**
 * @type {boolean}
 */
fitAny: {
get: org.apache.royale.textLayout.compose.Parcel.prototype.get__fitAny,
set: org.apache.royale.textLayout.compose.Parcel.prototype.set__fitAny},
/**
 * @type {boolean}
 */
composeToPosition: {
get: org.apache.royale.textLayout.compose.Parcel.prototype.get__composeToPosition,
set: org.apache.royale.textLayout.compose.Parcel.prototype.set__composeToPosition}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Parcel', qName: 'org.apache.royale.textLayout.compose.Parcel', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'x': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel */ inst, /** * */ v) {return v !== undefined ? inst.x = v : inst.x;}},
        'y': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel */ inst, /** * */ v) {return v !== undefined ? inst.y = v : inst.y;}},
        'width': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel */ inst, /** * */ v) {return v !== undefined ? inst.width = v : inst.width;}},
        'height': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel */ inst, /** * */ v) {return v !== undefined ? inst.height = v : inst.height;}},
        'logicalWidth': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel */ inst, /** * */ v) {return v !== undefined ? inst.logicalWidth = v : inst.logicalWidth;}}
      };
    },
    accessors: function () {
      return {
        'bottom': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'right': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'controller': { type: 'org.apache.royale.textLayout.container.IContainerController', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'columnIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'fitAny': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'composeToPosition': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'}
      };
    },
    methods: function () {
      return {
        'Parcel': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'Boolean', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'initialize': { type: 'org.apache.royale.textLayout.compose.Parcel', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'Boolean', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'releaseAnyReferences': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'applyClear': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'String', false ,'Number', false ,'String', false ]; }},
        'fitsInHeight': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'getLineSlug': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'org.apache.royale.textLayout.compose.Slug', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Boolean', false ,'Boolean', false ]; }},
        'knockOut': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Boolean', false ]; }},
        'removeKnockOut': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Boolean', false ]; }},
        'isRectangular': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.Parcel'},
        'findNextTransition': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.Parcel', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./Parcel.js.map


/**
 * @constructor
 * @param {number} x
 * @param {number} ymin
 * @param {number} ymax
 */
org.apache.royale.textLayout.compose.Parcel.Span = function(x, ymin, ymax) {
  this.x = x;
  this.ymin = ymin;
  this.ymax = ymax;
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.x;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.ymin;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.ymax;


/**
 * @param {number} ymin
 * @param {number} ymax
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.overlapsInY = function(ymin, ymax) {
  return !(ymax < this.ymin || ymin >= this.ymax);
};


/**
 * @param {number} x
 * @param {number} ymin
 * @param {number} ymax
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.equals = function(x, ymin, ymax) {
  return x == this.x && ymin == this.ymin && ymax == this.ymax;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Span', qName: 'org.apache.royale.textLayout.compose.Parcel.Span', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'x': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel.Span */ inst, /** * */ v) {return v !== undefined ? inst.x = v : inst.x;}},
        'ymin': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel.Span */ inst, /** * */ v) {return v !== undefined ? inst.ymin = v : inst.ymin;}},
        'ymax': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.Parcel.Span */ inst, /** * */ v) {return v !== undefined ? inst.ymax = v : inst.ymax;}}
      };
    },
    methods: function () {
      return {
        'Span': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Span', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'overlapsInY': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Span', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'equals': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Span', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Span.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @constructor
 */
org.apache.royale.textLayout.compose.Parcel.Edge = function() {
  this.Edge__spanList = [];
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.Edge__xbase;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.Edge__spanList;


/**
 * @param {number} xbase
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.initialize = function(xbase) {
  this.Edge__xbase = xbase;
  this.Edge__spanList.length = 0;
};


/**
 * @param {number} x
 * @param {number} ymin
 * @param {number} ymax
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.addSpan = function(x, ymin, ymax) {
  this.Edge__spanList.push(new org.apache.royale.textLayout.compose.Parcel.Span(x, ymin, ymax));
};


/**
 * @param {number} x
 * @param {number} ymin
 * @param {number} ymax
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.removeSpan = function(x, ymin, ymax) {
  for (var /** @type {number} */ i = 0; i < this.Edge__spanList.length; ++i) {
    if (this.Edge__spanList[i].equals(x, ymin, ymax)) {
      this.Edge__spanList.splice(i, 1);
      return;
    }
  }
};


/**
 * @param {number} ymin
 * @param {number} ymax
 * @return {number}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.getMaxForSpan = function(ymin, ymax) {
  var /** @type {number} */ res = 0;
  var foreachiter0_target = this.Edge__spanList;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var span = foreachiter0_target[foreachiter0];
  {
    if (span.x > res && span.overlapsInY(ymin, ymax))
      res = span.x;
  }}
  
  return res;
};


/**
 * @param {number} y
 * @return {number}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.findNextTransition = function(y) {
  var /** @type {number} */ res = Number.MAX_VALUE;
  var foreachiter1_target = this.Edge__spanList;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var s = foreachiter1_target[foreachiter1];
  {
    if (s.ymin > y && s.ymin < res)
      res = s.ymin;
    if (s.ymax > y && s.ymax < res)
      res = s.ymax;
  }}
  
  return res;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.base;


org.apache.royale.textLayout.compose.Parcel.Edge.prototype.get__base = function() {
  return this.Edge__xbase;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.numSpans;


org.apache.royale.textLayout.compose.Parcel.Edge.prototype.get__numSpans = function() {
  return (this.Edge__spanList.length) >> 0;
};


Object.defineProperties(org.apache.royale.textLayout.compose.Parcel.Edge.prototype, /** @lends {org.apache.royale.textLayout.compose.Parcel.Edge.prototype} */ {
/**
 * @type {number}
 */
base: {
get: org.apache.royale.textLayout.compose.Parcel.Edge.prototype.get__base},
/**
 * @type {number}
 */
numSpans: {
get: org.apache.royale.textLayout.compose.Parcel.Edge.prototype.get__numSpans}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Edge', qName: 'org.apache.royale.textLayout.compose.Parcel.Edge', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'base': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge'},
        'numSpans': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge'}
      };
    },
    methods: function () {
      return {
        'Edge': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge'},
        'initialize': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge', parameters: function () { return [ 'Number', false ]; }},
        'addSpan': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'removeSpan': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'getMaxForSpan': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'findNextTransition': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.Parcel.Edge', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.Parcel.Edge.prototype.ROYALE_COMPILE_FLAGS = 10;
