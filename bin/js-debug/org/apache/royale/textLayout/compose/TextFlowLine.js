/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/TextFlowLine.as
 * org.apache.royale.textLayout.compose.TextFlowLine
 *
 * @fileoverview
 *  @suppress {missingRequire}
 *
 * @suppress {checkTypes|accessControls}
 */

/* Royale Dependency List: org.apache.royale.core.IParentIUIBase,org.apache.royale.core.UIBase,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.graphics.ICompoundGraphic,org.apache.royale.graphics.PathBuilder,org.apache.royale.graphics.SolidColor,org.apache.royale.text.engine.Constants,org.apache.royale.text.engine.ElementFormat,org.apache.royale.text.engine.FontMetrics,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.engine.TextRotation,org.apache.royale.textLayout.compose.FloatCompositionData,org.apache.royale.textLayout.compose.FlowDamageType,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.compose.SWFContext,org.apache.royale.textLayout.compose.TextFlowLineLocation,org.apache.royale.textLayout.compose.utils.AdornmentUtils,org.apache.royale.textLayout.compose.utils.TextLineUtil,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.dummy.BoundsUtil,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.edit.SelectionFormat,org.apache.royale.textLayout.elements.ElementConstants,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IContainerFormattedElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IInlineGraphicElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase,org.apache.royale.textLayout.elements.ITableLeafElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.LeadingUtils,org.apache.royale.textLayout.elements.utils.GeometricElementUtils,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.Float,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.JustificationRule,org.apache.royale.textLayout.formats.LeadingModel,org.apache.royale.textLayout.formats.LineBreak,org.apache.royale.textLayout.formats.ListStylePosition,org.apache.royale.textLayout.formats.TextAlign,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.utils.CharacterUtil,org.apache.royale.textLayout.utils.Twips,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.PointUtils,org.apache.royale.utils.Language,XML*/
goog.provide('org.apache.royale.textLayout.compose.TextFlowLine');
goog.provide('org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache');

goog.require('org.apache.royale.textLayout.compose.ITextFlowLine');



/** Constructor - creates a new TextFlowLine instance. 
 *  <p><strong>Note</strong>: No client should call this. It's exposed for writing your own composer.</p>
 *
 * @asparam textLine The ITextLine display object to use for this line.
 * @asparam paragraph The paragraph (ParagraphElement) in which to place the line.
 * @asparam outerTargetWidth The width the line is composed to, excluding indents.
 * @asparam lineOffset The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), prior to alignment of lines in the paragraph. 
 * @asparam absoluteStart	The character position in the text flow at which the line begins.
 * @asparam numChars	The number of characters in the line.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.text.engine.ITextLine
 * @see org.apache.royale.textLayout.elements.ParagraphElement
 * @see #absoluteStart
 * @constructor
 * @implements {org.apache.royale.textLayout.compose.ITextFlowLine}
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} paragraph
 * @param {number=} outerTargetWidth
 * @param {number=} lineOffset
 * @param {number=} absoluteStart
 * @param {number=} numChars
 */
org.apache.royale.textLayout.compose.TextFlowLine = function(textLine, paragraph, outerTargetWidth, lineOffset, absoluteStart, numChars) {
  outerTargetWidth = typeof outerTargetWidth !== 'undefined' ? outerTargetWidth : 0;
  lineOffset = typeof lineOffset !== 'undefined' ? lineOffset : 0;
  absoluteStart = typeof absoluteStart !== 'undefined' ? absoluteStart : 0;
  numChars = typeof numChars !== 'undefined' ? numChars : 0;
  this.initialize(paragraph, outerTargetWidth, lineOffset, absoluteStart, numChars, textLine);
};


/**
 * @private
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.compose.TextFlowLine._selectionBlockCache;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__textLength = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__x = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__y = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__height = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__outerTargetWidth = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW = 2;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW = 1;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__para;


/**
 * @private
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__controller;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__columnIndex = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__adornCount = 0;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.VALIDITY_MASK = 7;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.ALIGNMENT_SHIFT = 3;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.ALIGNMENT_MASK = 24;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.NUMBERLINE_MASK = 32;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.GRAPHICELEMENT_MASK = 64;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__flags = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype._ascent;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype._descent;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__targetWidth;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype._lineOffset;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__lineExtent;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedLineExtent;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedMinimumStart;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__numberLinePosition = 0;


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} paragraph
 * @param {number=} outerTargetWidth
 * @param {number=} lineOffset
 * @param {number=} absoluteStart
 * @param {number=} numChars
 * @param {org.apache.royale.text.engine.ITextLine=} textLine
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.initialize = function(paragraph, outerTargetWidth, lineOffset, absoluteStart, numChars, textLine) {
  outerTargetWidth = typeof outerTargetWidth !== 'undefined' ? outerTargetWidth : 0;
  lineOffset = typeof lineOffset !== 'undefined' ? lineOffset : 0;
  absoluteStart = typeof absoluteStart !== 'undefined' ? absoluteStart : 0;
  numChars = typeof numChars !== 'undefined' ? numChars : 0;
  textLine = typeof textLine !== 'undefined' ? textLine : null;
  this.org_apache_royale_textLayout_compose_TextFlowLine__para = paragraph;
  this.org_apache_royale_textLayout_compose_TextFlowLine__outerTargetWidth = outerTargetWidth;
  this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart = absoluteStart;
  this.org_apache_royale_textLayout_compose_TextFlowLine__textLength = numChars;
  this.org_apache_royale_textLayout_compose_TextFlowLine__adornCount = 0;
  this.org_apache_royale_textLayout_compose_TextFlowLine__lineExtent = 0;
  this.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedLineExtent = 0;
  this.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedMinimumStart = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  this.org_apache_royale_textLayout_compose_TextFlowLine__flags = 0;
  this.org_apache_royale_textLayout_compose_TextFlowLine__controller = null;
  if (textLine) {
    textLine.userData = this;
    this.org_apache_royale_textLayout_compose_TextFlowLine__targetWidth = textLine.specifiedWidth;
    this._ascent = textLine.ascent;
    this._descent = textLine.descent;
    
    this._lineOffset = lineOffset;
    this.org_apache_royale_textLayout_compose_TextFlowLine_setValidity(textLine.validity);
    
    this.org_apache_royale_textLayout_compose_TextFlowLine_setFlag((textLine.hasGraphicElement ? org.apache.royale.textLayout.compose.TextFlowLine.GRAPHICELEMENT_MASK : 0) >>> 0, org.apache.royale.textLayout.compose.TextFlowLine.GRAPHICELEMENT_MASK);
  }
  else
    this.org_apache_royale_textLayout_compose_TextFlowLine_setValidity("invalid");
};


/**
 * @private
 * @param {number} value
 * @param {number} mask
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_setFlag = function(value, mask) {
  
  this.org_apache_royale_textLayout_compose_TextFlowLine__flags = ((this.org_apache_royale_textLayout_compose_TextFlowLine__flags & ~mask) | value) >>> 0;
};


/**
 * @private
 * @param {number} mask
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_getFlag = function(mask) {
  return (this.org_apache_royale_textLayout_compose_TextFlowLine__flags & mask) >>> 0;
};


/** @asprivate 
 * @param {number} lineX
 * @param {number} lineY
 * @param {number} lineHeight
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.setXYAndHeight = function(lineX, lineY, lineHeight) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__x = lineX;
  this.org_apache_royale_textLayout_compose_TextFlowLine__y = lineY;
  this.org_apache_royale_textLayout_compose_TextFlowLine__height = lineHeight;
  this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW = 2;
  this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW = 1;
};


/**
 *  @asprivate 
 * @royaleignorecoercion org.apache.royale.textLayout.container.ContainerController
 * @param {org.apache.royale.textLayout.container.IContainerController} cont
 * @param {number} colNumber
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.setController = function(cont, colNumber) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__controller = cont;
  this.org_apache_royale_textLayout_compose_TextFlowLine__columnIndex = colNumber;
};


/** @asprivate 
 * @param {number} val
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.setAbsoluteStart = function(val) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart = val;
};


/** @asprivate 
 * @param {number} val
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.setTextLength = function(val) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__textLength = val;
  this.damage("invalid");
};


/** 
 * Returns the bounds of the line as a rectangle.
 *
 * @asreturn a rectangle that represents the boundaries of the line.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.getBounds = function() {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.getTextLine(true);
  if (!textLine)
    return new org.apache.royale.geom.Rectangle();
  var /** @type {string} */ bp = org.apache.royale.utils.Language.string(this.paragraph.getAncestorWithContainer().computedFormat.blockProgression);
  var /** @type {number} */ shapeX = this.x;
  var /** @type {number} */ shapeY = this.org_apache_royale_textLayout_compose_TextFlowLine_createShapeY(bp);
  if (bp == org.apache.royale.textLayout.formats.BlockProgression.TB)
    shapeY += this.descent - textLine.height;
  return new org.apache.royale.geom.Rectangle(shapeX, shapeY, textLine.width, textLine.height);
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine__validities;


/**
 * @private
 * @param {string} value
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_setValidity = function(value) {
  
  this.org_apache_royale_textLayout_compose_TextFlowLine_setFlag((this.org_apache_royale_textLayout_compose_TextFlowLine_validities.indexOf(value)) >>> 0, org.apache.royale.textLayout.compose.TextFlowLine.VALIDITY_MASK);
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine._alignments;


/** @asprivate 
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.isDamaged = function() {
  return (this.validity != "valid");
};


/** @asprivate
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.clearDamage = function() {
  
  this.org_apache_royale_textLayout_compose_TextFlowLine_setValidity("valid");
};


/** @asprivate
 * @param {string} damageType
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.damage = function(damageType) {
  var /** @type {string} */ current = this.validity;
  if (current == damageType || current == "invalid")
    return;
  this.org_apache_royale_textLayout_compose_TextFlowLine_setValidity(damageType);
};


/**
 * Check if the line is visible by comparing a set rectangle to the supplied
 * rectangle (all values in Twips).
 * -1 BEFORE visible bounds
 * 0 Visible
 * 1 AFTER visible bounds
 * @asprivate
 * @param {string} wmode
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.testLineVisible = function(wmode, x, y, w, h) {
  
  if (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW >= x && this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW < x + w)
      return 0;
    return (x < this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW ? 1 : -1) >> 0;
  }
  if (this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW >= y && this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW < y + h)
    return 0;
  return (y < this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW ? -1 : 1) >> 0;
};


/**
 * @param {string} wmode
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.oldTestLineVisible = function(wmode, x, y, w, h) {
  
  if (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL)
    return this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW >= x && this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW < x + w;
  return this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW >= y && this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW < y + h;
};


/** @asprivate
 * Set the text line bounds rectangle, all values in Twips.
 * If left > right, the rectangle is considered not to be set.
 * @asprivate
 * @param {string} wmode
 * @param {number} bndsx
 * @param {number} bndsy
 * @param {number} bndsw
 * @param {number} bndsh
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.cacheLineBounds = function(wmode, bndsx, bndsy, bndsw, bndsh) {
  if (wmode == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW = org.apache.royale.textLayout.utils.Twips.to(bndsx);
    this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW = org.apache.royale.textLayout.utils.Twips.to(bndsx + bndsw);
  } else {
    this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW = org.apache.royale.textLayout.utils.Twips.to(bndsy);
    this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW = org.apache.royale.textLayout.utils.Twips.to(bndsy + bndsh);
  }
};


/** @asprivate
 * Check if the text line bounds are set. If the stored left
 * value is > the right value, then the rectangle is not set.
 * @asprivate
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.hasLineBounds = function() {
  return (this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW <= this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW);
};


/** @asprivate
 * Returns the associated ITextLine if there is one. Finds it by looking up in the ITextBlock.
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.peekTextLine = function() {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
  if (!this.paragraph)
    return null;
  var /** @type {Array} */ textBlocks = this.paragraph.getTextBlocks();
  var foreachiter0_target = textBlocks;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var textBlock = foreachiter0_target[foreachiter0];
  {
    for (textLine = textBlock.firstLine; textLine; textLine = textLine.nextLine) {
      if (textLine.userData == this)
        return textLine;
    }
  }}
  
  return null;
};


/** 
 * Returns the <code>org.apache.royale.text.engine.ITextLine</code> object for this line, which might be recreated 
 * if it does not exist due to garbage collection. Set <code>forceValid</code> to <code>true</code>
 * to cause the ITextLine to be regenerated. Returns null if the ITextLine cannot be recreated.
 *.
 * @asparam forceValid	if true, the ITextLine is regenerated, if it exists but is invalid.
 *
 * @asreturn object for this line or <code>null</code> if the ITextLine object cannot be 
 * recreated.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.text.engine.ITextLine ITextLine
 * @param {boolean=} forceValid
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.getTextLine = function(forceValid) {
  forceValid = typeof forceValid !== 'undefined' ? forceValid : false;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.peekTextLine();
  if (textLine && textLine.validity == org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY)
    this.createShape(org.apache.royale.utils.Language.string(this.paragraph.getTextFlow().computedFormat.blockProgression), textLine); else if (!textLine || (textLine.validity == "invalid" && forceValid)) {
    if (this.isDamaged() && this.validity != org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY)
      return null;
    textLine = this.org_apache_royale_textLayout_compose_TextFlowLine_getTextLineInternal();
  }
  return textLine;
};


/**
 * @private
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_getTextLineInternal = function() {
  var /** @type {number} */ paraAbsStart = this.paragraph.getAbsoluteStart();
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = this.paragraph.getTextBlockAtPosition((this.absoluteStart - paraAbsStart) >> 0);
  var /** @type {org.apache.royale.text.engine.ITextLine} */ currentLine = textBlock.firstLine;
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = this.paragraph.getTextFlow().flowComposer;
  var /** @type {number} */ lineIndex = flowComposer.findLineIndexAtPosition(paraAbsStart);
  var /** @type {org.apache.royale.text.engine.ITextLine} */ previousLine = null;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
  do {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = flowComposer.getLineAt(lineIndex);
    
    if (currentLine != null && currentLine.validity == "valid" && (line != this || currentLine.userData == line)) {
      textLine = currentLine;
      currentLine = currentLine.nextLine;
    } else if (!line.composable) {
      textLine = null;
      currentLine = null;
    } else {
      textLine = line.recreateTextLine(textBlock, previousLine);
      currentLine = null;
    }
    previousLine = textLine;
    ++lineIndex;
  } while (line != this);
  return textLine;
};


/**
 *  @asprivate Regenerate the ITextLine -- called when textLine has been gc'ed 
 * @royaleignorecoercion org.apache.royale.textLayout.elements.IListItemElement
 * @param {org.apache.royale.text.engine.ITextBlock} textBlock
 * @param {org.apache.royale.text.engine.ITextLine} previousLine
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.recreateTextLine = function(textBlock, previousLine) {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextFlow();
  var /** @type {string} */ bp = org.apache.royale.utils.Language.string(textFlow.computedFormat.blockProgression);
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ flowComposer = textFlow.flowComposer;
  var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ swfContext = flowComposer.swfContext ? flowComposer.swfContext : org.apache.royale.textLayout.compose.SWFContext.globalSWFContext;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine;
  var /** @type {number} */ effLineOffset = this._lineOffset;
  if (this.hasNumberLine) {
    var /** @type {number} */ boxStartTotalIndent = this._lineOffset - this.org_apache_royale_textLayout_compose_TextFlowLine__para.computedFormat.textIndent;
    numberLine = flowComposer.createNumberLine(this.org_apache_royale_textLayout_compose_TextFlowLine__para.getParentByType("ListItemElement"), this.org_apache_royale_textLayout_compose_TextFlowLine__para, flowComposer.swfContext, boxStartTotalIndent);
    if (numberLine) {
      if (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.INSIDE)
        effLineOffset += org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
    }
  }
  textLine = swfContext.callInContext(org.apache.royale.utils.Language.closure(textBlock.createTextLine, textBlock, 'createTextLine'), textBlock, [previousLine, this.org_apache_royale_textLayout_compose_TextFlowLine__targetWidth, effLineOffset, true]);
  if (textLine == null)
    return null;
  textLine.x = this.x;
  
  textLine.y = this.org_apache_royale_textLayout_compose_TextFlowLine_createShapeY(bp);
  
  textLine.doubleClickEnabled = true;
  textLine.userData = this;
  if (this.org_apache_royale_textLayout_compose_TextFlowLine__adornCount > 0) {
    var /** @type {number} */ paraStart = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAbsoluteStart();
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ elem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.findLeaf((this.absoluteStart - paraStart) >> 0);
    var /** @type {number} */ elemStart = elem.getAbsoluteStart();
    
    if (numberLine) {
      var /** @type {Object} */ listItemElement = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getParentByType("ListItemElement");
      org.apache.royale.textLayout.compose.utils.TextLineUtil.initializeNumberLinePosition(numberLine, listItemElement, this.org_apache_royale_textLayout_compose_TextFlowLine__para, textLine.textWidth);
    }
    this.createAdornments(org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAncestorWithContainer().computedFormat.blockProgression), elem, elemStart, textLine, numberLine);
    if (numberLine && org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) {
      if (bp == org.apache.royale.textLayout.formats.BlockProgression.TB)
        numberLine.x = this.numberLinePosition;
      else
        numberLine.y = this.numberLinePosition;
    }
  }
  return textLine;
};


/** @asprivate 
 * @param {string} bp
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.createShape = function(bp, textLine) {
  var /** @type {number} */ newX = this.x;
  textLine.x = newX;
  
  var /** @type {number} */ newY = this.org_apache_royale_textLayout_compose_TextFlowLine_createShapeY(bp);
  textLine.y = newY;
  
};


/**
 * @private
 * @param {string} bp
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_createShapeY = function(bp) {
  return bp == org.apache.royale.textLayout.formats.BlockProgression.RL ? this.y : this.y + this._ascent;
};


/** @asprivate 
 * Scan through the format runs within the line, and draw any underline or strikethrough that might need it
 * @param {string} blockProgression
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.createAdornments = function(blockProgression, elem, elemStart, textLine, numberLine) {
  
  var /** @type {number} */ endPos = (this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart + this.org_apache_royale_textLayout_compose_TextFlowLine__textLength) >> 0;
  
  this.org_apache_royale_textLayout_compose_TextFlowLine__adornCount = 0;
  if (numberLine) {
    this.org_apache_royale_textLayout_compose_TextFlowLine__adornCount++;
    this.org_apache_royale_textLayout_compose_TextFlowLine_setFlag(org.apache.royale.textLayout.compose.TextFlowLine.NUMBERLINE_MASK, org.apache.royale.textLayout.compose.TextFlowLine.NUMBERLINE_MASK);
    textLine.numberLine = numberLine;
    
    if (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineBackground(numberLine) != null) {
      var /** @type {org.apache.royale.textLayout.elements.IBackgroundManager} */ bgm = elem.getTextFlow().getBackgroundManager();
      if (bgm)
        bgm.addNumberLine(textLine, numberLine);
    }
  }
  else
    this.org_apache_royale_textLayout_compose_TextFlowLine_setFlag(0, org.apache.royale.textLayout.compose.TextFlowLine.NUMBERLINE_MASK);
  for (;;) {
    this.org_apache_royale_textLayout_compose_TextFlowLine__adornCount += org.apache.royale.textLayout.compose.utils.AdornmentUtils.updateAdornments(elem, textLine, blockProgression);
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ elemFormat = elem.format;
    var /** @type {*} */ imeStatus = elemFormat ? elemFormat.getStyle("imeStatus") : undefined;
    if (imeStatus) {
      org.apache.royale.textLayout.compose.utils.AdornmentUtils.updateIMEAdornments(elem, textLine, blockProgression, imeStatus);
    }
    elemStart += elem.textLength;
    if (elemStart >= endPos)
      break;
    elem = elem.getNextLeaf(this.org_apache_royale_textLayout_compose_TextFlowLine__para);
    
  }
};


/** @asprivate 
 * Scan through the format runs within the line, and figure out what the leading for the overall line is.
 * The line's leading is equal to the maximum leading of any individual run within the line.
 * The leading in an individual format run is calculated by looking at the leading attribute in the
 * CharacterFormat. If it is set to a value, we just use that value. Otherwise, if it is set to AUTO,
 * we calculate the leading based on the point size and the auto leading percentage from the ParagraphFormat.
 * @param {string} bp
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.getLineLeading = function(bp, elem, elemStart) {
  
  var /** @type {number} */ endPos = (this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart + this.org_apache_royale_textLayout_compose_TextFlowLine__textLength) >> 0;
  var /** @type {number} */ totalLeading = 0;
  
  for (;;) {
    var /** @type {number} */ elemLeading = elem.getEffectiveLineHeight(bp);
    if (!elemLeading && elem.textLength == this.textLength)
      elemLeading = org.apache.royale.textLayout.formats.TextLayoutFormat.lineHeightProperty.computeActualPropertyValue(elem.computedFormat.lineHeight, elem.computedFormat.fontSize * elem.computedFormat.yScale);
    totalLeading = Math.max(totalLeading, elemLeading);
    elemStart += elem.textLength;
    if (elemStart >= endPos)
      break;
    elem = elem.getNextLeaf(this.org_apache_royale_textLayout_compose_TextFlowLine__para);
    
    if (elem == null)
      break;
  }
  return totalLeading;
};


/** @asprivate 
 * Scan through the format runs within the line, and figure out what the typographic ascent (i.e. ascent relative to the 
 * Roman baseline) for the overall line is. Normally it is the distance between the Roman and Ascent baselines, 
 * but it may be adjusted upwards by the width/height of the GraphicElement.
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.getLineTypographicAscent = function(elem, elemStart, textLine) {
  
  return org.apache.royale.textLayout.compose.utils.TextLineUtil.getTextLineTypographicAscent(textLine ? textLine : this.getTextLine(), elem, elemStart, (this.absoluteStart + this.textLength) >> 0);
};


/** @asprivate 
 * Get the "line box" for the line as defined by the CSS visual formatting model (http://www.w3.org/TR/CSS2/visuren.html)
 * Essentially, the union of all "inline boxes" on the line.
 * @asreturn A rectangle representing the line box. Top and Bottom are relative to the Roman baseline. Left and Right are ignored.
 * May return null, for example, if the line only contains a float.
 * @param {string} bp
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @param {org.apache.royale.textLayout.compose.ISWFContext} swfContext
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} effectiveListMarkerFormat
 * @param {org.apache.royale.text.engine.ITextLine=} numberLine
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.getCSSLineBox = function(bp, elem, elemStart, swfContext, effectiveListMarkerFormat, numberLine) {
  var self = this;
  effectiveListMarkerFormat = typeof effectiveListMarkerFormat !== 'undefined' ? effectiveListMarkerFormat : null;
  numberLine = typeof numberLine !== 'undefined' ? numberLine : null;
  function addToLineBox(inlineBox) {
    if (inlineBox)
      lineBox = lineBox ? lineBox.union(inlineBox) : inlineBox;
  };
  
  
  var /** @type {org.apache.royale.geom.Rectangle} */ lineBox;
  var /** @type {number} */ endPos = (this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart + this.org_apache_royale_textLayout_compose_TextFlowLine__textLength) >> 0;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.getTextLine();
  for (;;) {
    addToLineBox(elem.getCSSInlineBox(bp, textLine, this.org_apache_royale_textLayout_compose_TextFlowLine__para, swfContext));
    elemStart += elem.textLength;
    if (elemStart >= endPos)
      break;
    elem = elem.getNextLeaf(this.org_apache_royale_textLayout_compose_TextFlowLine__para);
    
  }
  if (effectiveListMarkerFormat && numberLine) {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = null;
    var /** @type {org.apache.royale.text.engine.ElementFormat} */ ef = org.apache.royale.textLayout.elements.utils.GeometricElementUtils.computeElementFormatHelper(effectiveListMarkerFormat, para, swfContext);
    var /** @type {org.apache.royale.text.engine.FontMetrics} */ metrics = swfContext ? swfContext.callInContext(org.apache.royale.utils.Language.closure(ef.getFontMetrics, ef, 'getFontMetrics'), ef, null, true) : ef.getFontMetrics();
    addToLineBox(org.apache.royale.textLayout.elements.utils.GeometricElementUtils.getCSSInlineBoxHelper(effectiveListMarkerFormat, metrics, numberLine, para));
  }
  return lineBox;
};


/**
 *  Create a rectangle for selection
 * @royaleignorecoercion org.apache.royale.core.UIBase
 * @private
 * @param {org.apache.royale.graphics.ICompoundGraphic} selObj
 * @param {number} color
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {Object}
 */
org.apache.royale.textLayout.compose.TextFlowLine.createSelectionRect = function(selObj, color, x, y, width, height) {
  selObj.fill = new org.apache.royale.graphics.SolidColor(color);
  var /** @type {org.apache.royale.graphics.PathBuilder} */ builder = new org.apache.royale.graphics.PathBuilder(true);
  builder.moveTo(x, y);
  builder.lineTo(x + width, y);
  builder.lineTo(x + width, y + height);
  builder.lineTo(x, y + height);
  selObj.drawPathCommands(builder);
  return selObj;
};


/** @asprivate getSelectionShapesCacheEntry
 * 
 * creates and adds block selection(s) to the text container.  In most circumstances,
 * this method will produce and add a single UIBase, but in certain circumstances,
 * such as TCY in TTB text, will need to make multiple selection rectangles.
 * 
 * Examples:
 * 1) horizontal - ABCDE
 * 2) vertical - ABCDE
 * 3) horizontal - ABcdE
 * 4) vertical:		A
 * 					B
 * 				   cde
 * 					F
 * 
 * @private
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @param {string} blockProgression
 * @return {org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_getSelectionShapesCacheEntry = function(begIdx, endIdx, prevLine, nextLine, blockProgression) {
  if (this.isDamaged())
    return null;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.getTextLine();
  var /** @type {number} */ paraAbsStart = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock);
  if (begIdx == endIdx && paraAbsStart + begIdx == this.absoluteStart) {
    if (this.absoluteStart != this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextFlow().textLength - 1)
      return null;
    endIdx++;
  }
  var /** @type {org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache} */ selectionCache = org.apache.royale.textLayout.compose.TextFlowLine.selectionBlockCache.get(this);
  if (selectionCache && selectionCache.begIdx == begIdx && selectionCache.endIdx == endIdx)
    return selectionCache;
  var /** @type {Array} */ drawRects = new Array();
  var /** @type {Array} */ tcyDrawRects = new Array();
  if (selectionCache == null) {
    selectionCache = new org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache();
    org.apache.royale.textLayout.compose.TextFlowLine.selectionBlockCache.set(this, selectionCache);
  } else {
    selectionCache.clear();
  }
  selectionCache.begIdx = begIdx;
  selectionCache.endIdx = endIdx;
  var /** @type {Array} */ heightAndAdj = this.getRomanSelectionHeightAndVerticalAdjustment(prevLine, nextLine);
  this.calculateSelectionBounds(textLine, drawRects, begIdx, endIdx, blockProgression, heightAndAdj);
  var foreachiter1_target = drawRects;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var drawRect = foreachiter1_target[foreachiter1];
  {
    
    selectionCache.pushSelectionBlock(drawRect);
  }}
  
  return selectionCache;
};


/** @asprivate - helper method to calculate all selection blocks within a line.
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase
 * @royaleignorecoercion org.apache.royale.textLayout.elements.IInlineGraphicElement
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {Array} rectArray
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {string} blockProgression
 * @param {Array} heightAndAdj
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.calculateSelectionBounds = function(textLine, rectArray, begIdx, endIdx, blockProgression, heightAndAdj) {
  var /** @type {string} */ direction = org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_compose_TextFlowLine__para.computedFormat.direction);
  var /** @type {number} */ paraAbsStart = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock);
  var /** @type {number} */ curIdx = begIdx;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ curElem = null;
  var /** @type {number} */ largestRise = 0;
  var /** @type {Array} */ blockRectArray = [];
  var /** @type {Array} */ floatRectArray = null;
  var /** @type {Array} */ tcyDrawRects = null;
  while (curIdx < endIdx) {
    curElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.findLeaf(curIdx);
    if (curElem.textLength == 0) {
      ++curIdx;
      continue;
    } else if (org.apache.royale.utils.Language.is(curElem, org.apache.royale.textLayout.elements.IInlineGraphicElement) && curElem.computedFloat != org.apache.royale.textLayout.formats.Float.NONE) {
      if (floatRectArray == null)
        floatRectArray = [];
      var /** @type {Object} */ ilg = curElem;
      var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = this.controller.getFloatAtPosition((paraAbsStart + curIdx) >> 0);
      if (floatInfo) {
        var /** @type {org.apache.royale.geom.Rectangle} */ blockRect = new org.apache.royale.geom.Rectangle(floatInfo.x - textLine.x, floatInfo.y - textLine.y, ilg.elementWidth, ilg.elementHeight);
        floatRectArray.push(blockRect);
      }
      ++curIdx;
      continue;
    }
    var /** @type {number} */ numCharsSelecting = (curElem.textLength + curElem.getElementRelativeStart(this.org_apache_royale_textLayout_compose_TextFlowLine__para) - curIdx) >> 0;
    if (org.apache.royale.utils.Language.is(curElem, org.apache.royale.textLayout.elements.ITableLeafElement)) {
      ++curIdx;
      continue;
    }
    var /** @type {number} */ endPos = ((numCharsSelecting + curIdx) > endIdx ? endIdx : (numCharsSelecting + curIdx)) >> 0;
    if (blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL || (textLine.getAtomTextRotation(textLine.getAtomIndexAtCharIndex(curIdx)) != org.apache.royale.text.engine.TextRotation.ROTATE_0)) {
      var /** @type {Array} */ leafBlockArray = this.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks(textLine, curIdx, endPos, paraAbsStart, blockProgression, direction, heightAndAdj);
      for (var /** @type {number} */ leafBlockIter = 0; leafBlockIter < leafBlockArray.length; ++leafBlockIter) {
        blockRectArray.push(leafBlockArray[leafBlockIter]);
      }
    } else {
      var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ tcyBlock = curElem.getParentByType("TCYElement");
      
      var /** @type {number} */ tcyParentRelativeEnd = tcyBlock.parentRelativeEnd;
      var /** @type {Object} */ subParBlock = tcyBlock.getParentByType("SubParagraphGroupElementBase");
      while (subParBlock) {
        tcyParentRelativeEnd += subParBlock.parentRelativeStart;
        subParBlock = subParBlock.getParentByType("SubParagraphGroupElementBase");
      }
      var /** @type {number} */ largestTCYRise = 0;
      var /** @type {number} */ lastTCYIdx = endIdx < tcyParentRelativeEnd ? endIdx : tcyParentRelativeEnd;
      var /** @type {Array} */ tcyRects = new Array();
      while (curIdx < lastTCYIdx) {
        curElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.findLeaf(curIdx);
        numCharsSelecting = (curElem.textLength + curElem.getElementRelativeStart(this.org_apache_royale_textLayout_compose_TextFlowLine__para) - curIdx) >> 0;
        endPos = (numCharsSelecting + curIdx > endIdx ? endIdx : numCharsSelecting + curIdx) >> 0;
        var /** @type {Array} */ tcyRectArray = this.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks(textLine, curIdx, endPos, paraAbsStart, blockProgression, direction, heightAndAdj);
        for (var /** @type {number} */ tcyBlockIter = 0; tcyBlockIter < tcyRectArray.length; ++tcyBlockIter) {
          var /** @type {org.apache.royale.geom.Rectangle} */ tcyRect = tcyRectArray[tcyBlockIter];
          if (tcyRect.height > largestTCYRise) {
            largestTCYRise = tcyRect.height;
          }
          tcyRects.push(tcyRect);
        }
        curIdx = endPos;
      }
      if (!tcyDrawRects)
        tcyDrawRects = new Array();
      this.org_apache_royale_textLayout_compose_TextFlowLine_normalizeRects(tcyRects, tcyDrawRects, largestTCYRise, org.apache.royale.textLayout.formats.BlockProgression.TB, direction);
      continue;
    }
    curIdx = endPos;
  }
  if (blockRectArray.length > 0 && (paraAbsStart + begIdx) == this.absoluteStart && (paraAbsStart + endIdx) == (this.absoluteStart + this.textLength)) {
    curElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.findLeaf(begIdx);
    if (((curElem.getAbsoluteStart() + curElem.textLength) < (this.absoluteStart + this.textLength)) && endPos >= 2) {
      var /** @type {number} */ charCode = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getCharCodeAtPosition((endPos - 1) >> 0);
      if (charCode != org.apache.royale.textLayout.elements.ElementConstants.kParagraphTerminator.charCodeAt(0) && org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(charCode)) {
        var /** @type {Array} */ lastElemBlockArray = this.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks(textLine, (endPos - 1) >> 0, (endPos - 1) >> 0, paraAbsStart, blockProgression, direction, heightAndAdj);
        var /** @type {org.apache.royale.geom.Rectangle} */ lastRect = lastElemBlockArray[lastElemBlockArray.length - 1];
        var /** @type {org.apache.royale.geom.Rectangle} */ modifyRect = blockRectArray[blockRectArray.length - 1];
        if (blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL) {
          if (modifyRect.width == lastRect.width) {
            blockRectArray.pop();
          } else {
            modifyRect.width -= lastRect.width;
            if (direction == org.apache.royale.textLayout.formats.Direction.RTL)
              modifyRect.left -= lastRect.width;
          }
        } else {
          if (modifyRect.height == lastRect.height) {
            blockRectArray.pop();
          } else {
            modifyRect.height -= lastRect.height;
            if (direction == org.apache.royale.textLayout.formats.Direction.RTL)
              modifyRect.top += lastRect.height;
          }
        }
      }
    }
  }
  this.org_apache_royale_textLayout_compose_TextFlowLine_normalizeRects(blockRectArray, rectArray, largestRise, blockProgression, direction);
  if (tcyDrawRects && tcyDrawRects.length > 0) {
    for (var /** @type {number} */ tcyIter = 0; tcyIter < tcyDrawRects.length; ++tcyIter) {
      rectArray.push(tcyDrawRects[tcyIter]);
    }
  }
  if (floatRectArray) {
    for (var /** @type {number} */ floatIter = 0; floatIter < floatRectArray.length; ++floatIter) {
      rectArray.push(floatRectArray[floatIter]);
    }
  }
};


/**
 * @private
 * @param {org.apache.royale.graphics.ICompoundGraphic} selObj
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_createSelectionShapes = function(selObj, selFormat, container, begIdx, endIdx, prevLine, nextLine) {
  var /** @type {org.apache.royale.textLayout.elements.IContainerFormattedElement} */ contElement = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAncestorWithContainer();
  
  var /** @type {string} */ blockProgression = org.apache.royale.utils.Language.string(contElement.computedFormat.blockProgression);
  var /** @type {org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache} */ selCache = this.org_apache_royale_textLayout_compose_TextFlowLine_getSelectionShapesCacheEntry(begIdx, endIdx, prevLine, nextLine, blockProgression);
  if (!selCache)
    return;
  var /** @type {org.apache.royale.geom.Rectangle} */ drawRect;
  var /** @type {number} */ color = selFormat.rangeColor;
  if (this.org_apache_royale_textLayout_compose_TextFlowLine__para && this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextFlow()) {
    var /** @type {org.apache.royale.textLayout.edit.ISelectionManager} */ selMgr = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextFlow().interactionManager;
    if (selMgr && (selMgr.anchorPosition == selMgr.activePosition))
      color = selFormat.pointColor;
  }
  var foreachiter2_target = selCache.selectionBlocks;
  for (var foreachiter2 in foreachiter2_target) 
  {
  drawRect = foreachiter2_target[foreachiter2];
  {
    drawRect = drawRect.clone();
    this.convertLineRectToContainer(drawRect, true);
    org.apache.royale.textLayout.compose.TextFlowLine.createSelectionRect(selObj, color, drawRect.x, drawRect.y, drawRect.width, drawRect.height);
  }}
  
};


/** @asprivate 
 * Get the height and vertical adjustment for the line's selection shape, assuming Western typographic rules
 * where leading is included in selection.
 * @asreturn An array with two elements
 * [0] height
 * [1] vertical adjustment to counter 'align bottom' behavior. The remainder of the selection code assumes selection shape
 * bottom is to be aligned with line descent. If this is not the case, vertical adjustment is set to an appropriate non-zero value. 
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @return {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.getRomanSelectionHeightAndVerticalAdjustment = function(prevLine, nextLine) {
  var /** @type {number} */ rectHeight = 0;
  var /** @type {number} */ verticalAdj = 0;
  if (org.apache.royale.textLayout.elements.LeadingUtils.useUpLeadingDirection(this.org_apache_royale_textLayout_compose_TextFlowLine__para.getEffectiveLeadingModel())) {
    rectHeight = Math.max(this.height, this.textHeight);
  } else {
    var /** @type {boolean} */ isFirstLine = !prevLine || prevLine.controller != this.controller || prevLine.columnIndex != this.columnIndex;
    var /** @type {boolean} */ isLastLine = !nextLine || nextLine.controller != this.controller || nextLine.columnIndex != this.columnIndex || nextLine.paragraph.getEffectiveLeadingModel() == org.apache.royale.textLayout.formats.LeadingModel.ROMAN_UP;
    if (isLastLine) {
      if (!isFirstLine) {
        rectHeight = this.textHeight;
      } else {
        rectHeight = Math.max(this.height, this.textHeight);
      }
    } else {
      if (!isFirstLine) {
        rectHeight = Math.max(nextLine.height, this.textHeight);
        verticalAdj = rectHeight - this.textHeight;
      } else {
        var /** @type {number} */ top = this._descent - Math.max(this.height, this.textHeight);
        var /** @type {number} */ bottom = Math.max(nextLine.height, this.textHeight) - this._ascent;
        rectHeight = bottom - top;
        verticalAdj = bottom - this._descent;
      }
    }
  }
  if (!prevLine || prevLine.columnIndex != this.columnIndex || prevLine.controller != this.controller) {
    rectHeight += this.descent;
    verticalAdj = Math.floor(this.descent / 2);
  }
  return [rectHeight, verticalAdj];
};


/** @asprivate 
 * @suppress {uselessCode}
 * 
 * ? Get a list of rects of the characters in the given textline? Used to show selection? JF 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {number} paraAbsStart
 * @param {string} blockProgression
 * @param {string} direction
 * @param {Array} heightAndAdj
 * @return {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks = function(textLine, begIdx, endIdx, paraAbsStart, blockProgression, direction, heightAndAdj) {
  
  var /** @type {Array} */ blockArray = [];
  var /** @type {org.apache.royale.geom.Rectangle} */ blockRect = new org.apache.royale.geom.Rectangle();
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ startElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.findLeaf(begIdx);
  var /** @type {org.apache.royale.geom.Rectangle} */ startMetrics = startElem.getComputedFontMetrics().emBox;
  if (!textLine)
    textLine = this.getTextLine(true);
  var /** @type {number} */ begAtomIndex = textLine.getAtomIndexAtCharIndex(begIdx);
  var /** @type {number} */ endAtomIndex = this.org_apache_royale_textLayout_compose_TextFlowLine_adjustEndElementForBidi(textLine, begIdx, endIdx, begAtomIndex, direction);
  
  
  if (direction == org.apache.royale.textLayout.formats.Direction.RTL && textLine.getAtomBidiLevel(endAtomIndex) % 2 != 0) {
    if (endAtomIndex == 0 && begIdx < endIdx - 1) {
      blockArray = this.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks(textLine, begIdx, (endIdx - 1) >> 0, paraAbsStart, blockProgression, direction, heightAndAdj);
      var /** @type {Array} */ bidiBlock = this.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks(textLine, (endIdx - 1) >> 0, (endIdx - 1) >> 0, paraAbsStart, blockProgression, direction, heightAndAdj);
      var /** @type {number} */ bidiBlockIter = 0;
      while (bidiBlockIter < bidiBlock.length) {
        blockArray.push(bidiBlock[bidiBlockIter]);
        ++bidiBlockIter;
      }
      return blockArray;
    }
  }
  var /** @type {boolean} */ begIsBidi = begAtomIndex != -1 ? this.org_apache_royale_textLayout_compose_TextFlowLine_isAtomBidi(textLine, begAtomIndex, direction) : false;
  var /** @type {boolean} */ endIsBidi = endAtomIndex != -1 ? this.org_apache_royale_textLayout_compose_TextFlowLine_isAtomBidi(textLine, endAtomIndex, direction) : false;
  if (begIsBidi || endIsBidi) {
    var /** @type {number} */ curIdx = begIdx;
    var /** @type {number} */ incrementor = (begIdx != endIdx ? 1 : 0) >> 0;
    var /** @type {number} */ activeStartIndex = begAtomIndex;
    var /** @type {number} */ activeEndIndex = begAtomIndex;
    var /** @type {number} */ curElementIndex = begAtomIndex;
    var /** @type {boolean} */ activeEndIsBidi = begIsBidi;
    do {
      curIdx += incrementor;
      curElementIndex = textLine.getAtomIndexAtCharIndex(curIdx);
      var /** @type {boolean} */ curIsBidi = (curElementIndex != -1) ? this.org_apache_royale_textLayout_compose_TextFlowLine_isAtomBidi(textLine, curElementIndex, direction) : false;
      if (curElementIndex != -1 && curIsBidi != activeEndIsBidi) {
        blockRect = this.org_apache_royale_textLayout_compose_TextFlowLine_makeBlock(textLine, curIdx, activeStartIndex, activeEndIndex, startMetrics, blockProgression, direction, heightAndAdj);
        blockArray.push(blockRect);
        activeStartIndex = curElementIndex;
        activeEndIndex = curElementIndex;
        activeEndIsBidi = curIsBidi;
      } else {
        if (curIdx == endIdx) {
          blockRect = this.org_apache_royale_textLayout_compose_TextFlowLine_makeBlock(textLine, curIdx, activeStartIndex, activeEndIndex, startMetrics, blockProgression, direction, heightAndAdj);
          blockArray.push(blockRect);
        }
        activeEndIndex = curElementIndex;
      }
    } while (curIdx < endIdx);
  } else {
    var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ testILG = null;
    if (org.apache.royale.utils.Language.is(startElem, org.apache.royale.textLayout.elements.IInlineGraphicElement))
      startElem;
    if (!testILG || testILG.effectiveFloat == org.apache.royale.textLayout.formats.Float.NONE || begIdx == endIdx) {
      blockRect = this.org_apache_royale_textLayout_compose_TextFlowLine_makeBlock(textLine, begIdx, begAtomIndex, endAtomIndex, startMetrics, blockProgression, direction, heightAndAdj);
      if (testILG && testILG.elementWidthWithMarginsAndPadding() != testILG.elementWidth) {
        var /** @type {boolean} */ verticalText = testILG.getTextFlow().computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL;
        var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ ilgFormat = testILG.computedFormat;
        if (verticalText) {
          var /** @type {number} */ paddingTop = testILG.getEffectivePaddingTop();
          blockRect.top += paddingTop;
          var /** @type {number} */ paddingBottom = testILG.getEffectivePaddingBottom();
          blockRect.bottom -= paddingBottom;
        } else {
          var /** @type {number} */ paddingLeft = testILG.getEffectivePaddingLeft();
          blockRect.left += paddingLeft;
          var /** @type {number} */ paddingRight = testILG.getEffectivePaddingRight();
          blockRect.right -= paddingRight;
        }
      }
    } else {
      blockRect = org.apache.royale.textLayout.dummy.BoundsUtil.getBounds(testILG.graphic, textLine);
    }
    blockArray.push(blockRect);
  }
  return blockArray;
};


/** @asprivate 
 * 
 * ? Get the bounds of the supplied range of characters in the given textline? Used to show selection? JF 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {number} begTextIndex
 * @param {number} begAtomIndex
 * @param {number} endAtomIndex
 * @param {org.apache.royale.geom.Rectangle} startMetrics
 * @param {string} blockProgression
 * @param {string} direction
 * @param {Array} heightAndAdj
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_makeBlock = function(textLine, begTextIndex, begAtomIndex, endAtomIndex, startMetrics, blockProgression, direction, heightAndAdj) {
  var /** @type {org.apache.royale.geom.Rectangle} */ blockRect = new org.apache.royale.geom.Rectangle();
  var /** @type {org.apache.royale.geom.Point} */ globalStart = new org.apache.royale.geom.Point(0, 0);
  if (begAtomIndex > endAtomIndex) {
    var /** @type {number} */ tempEndIdx = endAtomIndex;
    endAtomIndex = begAtomIndex;
    begAtomIndex = tempEndIdx;
  }
  if (!textLine)
    textLine = this.getTextLine(true);
  var /** @type {org.apache.royale.geom.Rectangle} */ begCharRect = textLine.getAtomBounds(begAtomIndex);
  var /** @type {org.apache.royale.geom.Rectangle} */ endCharRect = textLine.getAtomBounds(endAtomIndex);
  var /** @type {string} */ justRule = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getEffectiveJustificationRule();
  if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL && textLine.getAtomTextRotation(begAtomIndex) != org.apache.royale.text.engine.TextRotation.ROTATE_0) {
    globalStart.y = begCharRect.y;
    blockRect.height = begAtomIndex != endAtomIndex ? endCharRect.bottom - begCharRect.top : begCharRect.height;
    if (justRule == org.apache.royale.textLayout.formats.JustificationRule.EAST_ASIAN) {
      blockRect.width = begCharRect.width;
    } else {
      blockRect.width = Number(heightAndAdj[0]);
      globalStart.x -= Number(heightAndAdj[1]);
    }
  } else {
    globalStart.x = Math.min(begCharRect.x, endCharRect.x);
    if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL)
      globalStart.y = begCharRect.y + (startMetrics.width / 2);
    else
      globalStart.y = begCharRect.y;
    if (justRule != org.apache.royale.textLayout.formats.JustificationRule.EAST_ASIAN) {
      blockRect.height = Number(heightAndAdj[0]);
      if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL)
        globalStart.x -= Number(heightAndAdj[1]);
      else
        globalStart.y += Number(heightAndAdj[1]);
      blockRect.width = begAtomIndex != endAtomIndex ? Math.abs(endCharRect.right - begCharRect.left) : begCharRect.width;
    } else {
      blockRect.height = begCharRect.height;
      blockRect.width = begAtomIndex != endAtomIndex ? Math.abs(endCharRect.right - begCharRect.left) : begCharRect.width;
    }
  }
  blockRect.x = globalStart.x;
  blockRect.y = globalStart.y;
  if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (textLine.getAtomTextRotation(begAtomIndex) != org.apache.royale.text.engine.TextRotation.ROTATE_0)
      blockRect.x -= textLine.descent;
    else
      blockRect.y -= (blockRect.height / 2);
  } else {
    blockRect.y += (textLine.descent - blockRect.height);
  }
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ tfl = textLine.userData;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ curElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.findLeaf(begTextIndex);
  var /** @type {string} */ rotation;
  if (!curElem) {
    if (begTextIndex < 0)
      curElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getFirstLeaf();
    else if (begTextIndex >= this.org_apache_royale_textLayout_compose_TextFlowLine__para.textLength)
      curElem = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getLastLeaf();
    rotation = org.apache.royale.utils.Language.string(curElem ? curElem.computedFormat.textRotation : org.apache.royale.text.engine.TextRotation.ROTATE_0);
  }
  else
    rotation = org.apache.royale.utils.Language.string(curElem.computedFormat.textRotation);
  if (rotation == org.apache.royale.text.engine.TextRotation.ROTATE_180 || rotation == org.apache.royale.text.engine.TextRotation.ROTATE_90) {
    if (blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL)
      blockRect.y += (blockRect.height / 2); else {
      if (curElem.getParentByType("TCYElement") == null) {
        if (rotation == org.apache.royale.text.engine.TextRotation.ROTATE_90)
          blockRect.x -= blockRect.width;
        else
          blockRect.x -= (blockRect.width * .75);
      } else {
        if (rotation == org.apache.royale.text.engine.TextRotation.ROTATE_90)
          blockRect.y += blockRect.height;
        else
          blockRect.y += (blockRect.height * .75);
      }
    }
  }
  return blockRect;
};


/** @asprivate
 * 
 * 
 * @param {org.apache.royale.geom.Rectangle} rect
 * @param {boolean} constrainShape
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.convertLineRectToContainer = function(rect, constrainShape) {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.getTextLine();
  rect.x += textLine.x;
  rect.y += textLine.ascent;
  if (constrainShape) {
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextFlow();
    var /** @type {org.apache.royale.geom.Rectangle} */ columnRect = this.controller.columnState.getColumnAt(this.columnIndex);
    org.apache.royale.textLayout.compose.TextFlowLine.constrainRectToColumn(tf, rect, columnRect, this.controller.horizontalScrollPosition, this.controller.verticalScrollPosition, this.controller.compositionWidth, this.controller.compositionHeight);
  }
};


/** @asprivate 
 * @nocollapse
 * @param {org.apache.royale.textLayout.elements.ITextFlow} tf
 * @param {org.apache.royale.geom.Rectangle} rect
 * @param {org.apache.royale.geom.Rectangle} columnRect
 * @param {number} hScrollPos
 * @param {number} vScrollPos
 * @param {number} compositionWidth
 * @param {number} compositionHeight
 */
org.apache.royale.textLayout.compose.TextFlowLine.constrainRectToColumn = function(tf, rect, columnRect, hScrollPos, vScrollPos, compositionWidth, compositionHeight) {
  if (columnRect == null)
    return;
  if (tf.computedFormat.lineBreak == org.apache.royale.textLayout.formats.LineBreak.EXPLICIT)
    return;
  var /** @type {string} */ bp = org.apache.royale.utils.Language.string(tf.computedFormat.blockProgression);
  var /** @type {string} */ direction = org.apache.royale.utils.Language.string(tf.computedFormat.direction);
  if (bp == org.apache.royale.textLayout.formats.BlockProgression.TB && !isNaN(compositionWidth)) {
    if (direction == org.apache.royale.textLayout.formats.Direction.LTR) {
      if (rect.left > (columnRect.x + columnRect.width + hScrollPos))
        rect.left = (columnRect.x + columnRect.width + hScrollPos);
      if (rect.right > (columnRect.x + columnRect.width + hScrollPos))
        rect.right = (columnRect.x + columnRect.width + hScrollPos);
    } else {
      if (rect.right < (columnRect.x + hScrollPos))
        rect.right = (columnRect.x + hScrollPos);
      if (rect.left < (columnRect.x + hScrollPos))
        rect.left = (columnRect.x + hScrollPos);
    }
  } else if (bp == org.apache.royale.textLayout.formats.BlockProgression.RL && !isNaN(compositionHeight)) {
    if (direction == org.apache.royale.textLayout.formats.Direction.LTR) {
      if (rect.top > (columnRect.y + columnRect.height + vScrollPos))
        rect.top = (columnRect.y + columnRect.height + vScrollPos);
      if (rect.bottom > (columnRect.y + columnRect.height + vScrollPos))
        rect.bottom = (columnRect.y + columnRect.height + vScrollPos);
    } else {
      if (rect.bottom < (columnRect.y + vScrollPos))
        rect.bottom = (columnRect.y + vScrollPos);
      if (rect.top < (columnRect.y + vScrollPos))
        rect.top = (columnRect.y + vScrollPos);
    }
  }
};


/** @asprivate
 * Helper method to hilight the portion of a block selection on this ITextLine.  A selection display is created and added to the line's TextFrame with ContainerController addSelectionShape.
 * @asparam begIdx absolute index of start of selection on this line.
 * @asparam endIdx absolute index of end of selection on this line.
 * @param {org.apache.royale.graphics.ICompoundGraphic} selObj
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.hiliteBlockSelection = function(selObj, selFormat, container, begIdx, endIdx, prevLine, nextLine) {
  if (this.isDamaged() || !this.org_apache_royale_textLayout_compose_TextFlowLine__controller)
    return;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.peekTextLine();
  if (!textLine || !textLine.parent)
    return;
  var /** @type {number} */ paraStart = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock);
  begIdx -= paraStart;
  endIdx -= paraStart;
  this.org_apache_royale_textLayout_compose_TextFlowLine_createSelectionShapes(selObj, selFormat, container, begIdx, endIdx, prevLine, nextLine);
};


/** @asprivate
 * Helper method to hilight a point selection on this ITextLine.  x,y,w,h of the selection are calculated and ContainerController.drawPointSelection is called 
 * @asparam idx absolute index of the point selection.
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {number} idx
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.hilitePointSelection = function(selFormat, idx, container, prevLine, nextLine) {
  var /** @type {org.apache.royale.geom.Rectangle} */ rect = this.computePointSelectionRectangle(idx, container, prevLine, nextLine, true);
  if (rect)
    this.org_apache_royale_textLayout_compose_TextFlowLine__controller.drawPointSelection(selFormat, rect.x, rect.y, rect.width, rect.height);
};


/**
 * @private
 * @param {org.apache.royale.geom.Rectangle} rect
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 */
org.apache.royale.textLayout.compose.TextFlowLine.setRectangleValues = function(rect, x, y, width, height) {
  rect.x = x;
  rect.y = y;
  rect.width = width;
  rect.height = height;
};


/**
 * @private
 * @type {org.apache.royale.geom.Point}
 */
org.apache.royale.textLayout.compose.TextFlowLine._localZeroPoint;


/**
 * @private
 * @type {org.apache.royale.geom.Point}
 */
org.apache.royale.textLayout.compose.TextFlowLine._localOnePoint;


/**
 * @private
 * @type {org.apache.royale.geom.Point}
 */
org.apache.royale.textLayout.compose.TextFlowLine._rlLocalOnePoint;


/** @asprivate 
 * @param {number} idx
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @param {boolean} constrainSelRect
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.computePointSelectionRectangle = function(idx, container, prevLine, nextLine, constrainSelRect) {
  if (this.isDamaged() || !this.org_apache_royale_textLayout_compose_TextFlowLine__controller)
    return null;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.peekTextLine();
  if (!textLine || !textLine.parent)
    return null;
  idx -= this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock);
  textLine = this.getTextLine(true);
  var /** @type {number} */ endIdx = idx;
  var /** @type {number} */ elementIndex = textLine.getAtomIndexAtCharIndex(idx);
  
  var /** @type {boolean} */ isTCYBounds = false;
  var /** @type {boolean} */ paraLeadingTCY = false;
  var /** @type {org.apache.royale.textLayout.elements.IContainerFormattedElement} */ contElement = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAncestorWithContainer();
  
  var /** @type {string} */ blockProgression = org.apache.royale.utils.Language.string(contElement.computedFormat.blockProgression);
  var /** @type {string} */ direction = org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_compose_TextFlowLine__para.computedFormat.direction);
  if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (idx == 0) {
      if (textLine.getAtomTextRotation(0) == org.apache.royale.text.engine.TextRotation.ROTATE_0)
        paraLeadingTCY = true;
    } else {
      var /** @type {number} */ prevElementIndex = textLine.getAtomIndexAtCharIndex((idx - 1) >> 0);
      if (prevElementIndex != -1) {
        if (textLine.getAtomTextRotation(elementIndex) == org.apache.royale.text.engine.TextRotation.ROTATE_0 && textLine.getAtomTextRotation(prevElementIndex) != org.apache.royale.text.engine.TextRotation.ROTATE_0) {
          elementIndex = prevElementIndex;
          --idx;
          isTCYBounds = true;
        } else if (textLine.getAtomTextRotation(prevElementIndex) == org.apache.royale.text.engine.TextRotation.ROTATE_0) {
          elementIndex = prevElementIndex;
          --idx;
          isTCYBounds = true;
        }
      }
    }
  }
  var /** @type {Array} */ heightAndAdj = this.getRomanSelectionHeightAndVerticalAdjustment(prevLine, nextLine);
  var /** @type {Array} */ blockRectArray = this.org_apache_royale_textLayout_compose_TextFlowLine_makeSelectionBlocks(textLine, idx, endIdx, this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock), blockProgression, direction, heightAndAdj);
  
  var /** @type {org.apache.royale.geom.Rectangle} */ rect = blockRectArray[0];
  this.convertLineRectToContainer(rect, constrainSelRect);
  var /** @type {boolean} */ drawOnRight = (direction == org.apache.royale.textLayout.formats.Direction.RTL);
  if ((drawOnRight && textLine.getAtomBidiLevel(elementIndex) % 2 == 0) || (!drawOnRight && textLine.getAtomBidiLevel(elementIndex) % 2 != 0)) {
    drawOnRight = !drawOnRight;
  }
  var /** @type {org.apache.royale.geom.Point} */ zeroPoint = org.apache.royale.utils.PointUtils.localToGlobal(org.apache.royale.textLayout.compose.TextFlowLine.localZeroPoint, container);
  var /** @type {number} */ cursorWidth;
  if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL && textLine.getAtomTextRotation(elementIndex) != org.apache.royale.text.engine.TextRotation.ROTATE_0) {
    var /** @type {org.apache.royale.geom.Point} */ rlOnePoint = org.apache.royale.utils.PointUtils.localToGlobal(org.apache.royale.textLayout.compose.TextFlowLine.rlLocalOnePoint, container);
    cursorWidth = zeroPoint.y - rlOnePoint.y;
    cursorWidth = cursorWidth == 0 ? 1 : Math.abs(1.0 / cursorWidth);
    if (!drawOnRight)
      org.apache.royale.textLayout.compose.TextFlowLine.setRectangleValues(rect, rect.x, !isTCYBounds ? rect.y : rect.y + rect.height, rect.width, cursorWidth);
    else
      org.apache.royale.textLayout.compose.TextFlowLine.setRectangleValues(rect, rect.x, !isTCYBounds ? rect.y + rect.height : rect.y, rect.width, cursorWidth);
  } else {
    var /** @type {org.apache.royale.geom.Point} */ onePoint = org.apache.royale.utils.PointUtils.localToGlobal(org.apache.royale.textLayout.compose.TextFlowLine.localOnePoint, container);
    cursorWidth = zeroPoint.x - onePoint.x;
    cursorWidth = cursorWidth == 0 ? 1 : Math.abs(1.0 / cursorWidth);
    if (!drawOnRight)
      org.apache.royale.textLayout.compose.TextFlowLine.setRectangleValues(rect, !isTCYBounds ? rect.x : rect.x + rect.width, rect.y, cursorWidth, rect.height);
    else
      org.apache.royale.textLayout.compose.TextFlowLine.setRectangleValues(rect, !isTCYBounds ? rect.x + rect.width : rect.x, rect.y, cursorWidth, rect.height);
  }
  return rect;
};


/** @asprivate
 * Three states.  Disjoint(0), Intersects(1), HeightContainedIn(2),  
 * @param {org.apache.royale.geom.Rectangle} scrollRect
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.selectionWillIntersectScrollRect = function(scrollRect, begIdx, endIdx, prevLine, nextLine) {
  var /** @type {number} */ paraStart = 0;
  var /** @type {org.apache.royale.textLayout.elements.IContainerFormattedElement} */ contElement = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAncestorWithContainer();
  
  var /** @type {string} */ blockProgression = org.apache.royale.utils.Language.string(contElement.computedFormat.blockProgression);
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.getTextLine(true);
  if (begIdx == endIdx) {
    var /** @type {org.apache.royale.geom.Rectangle} */ pointSelRect = this.computePointSelectionRectangle(begIdx, org.apache.royale.utils.Language.as(this.controller.container, org.apache.royale.core.UIBase, true), prevLine, nextLine, false);
    if (pointSelRect) {
      if (scrollRect.containsRect(pointSelRect))
        return 2;
      if (scrollRect.intersects(pointSelRect))
        return 1;
    }
  } else {
    //var /** @type {number} */ paraStart = 0;
    if (textLine)
      paraStart = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock);
    else
      paraStart = this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAbsoluteStart();
    var /** @type {org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache} */ selCache = this.org_apache_royale_textLayout_compose_TextFlowLine_getSelectionShapesCacheEntry((begIdx - paraStart) >> 0, (endIdx - paraStart) >> 0, prevLine, nextLine, blockProgression);
    if (selCache) {
      var /** @type {org.apache.royale.geom.Rectangle} */ drawRect;
      var foreachiter3_target = selCache.selectionBlocks;
      for (var foreachiter3 in foreachiter3_target) 
      {
      drawRect = foreachiter3_target[foreachiter3];
      {
        drawRect = drawRect.clone();
        drawRect.x += textLine.x;
        drawRect.y += textLine.y;
        if (scrollRect.intersects(drawRect)) {
          if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
            if (drawRect.left >= scrollRect.left && drawRect.right <= scrollRect.right)
              return 2;
          } else {
            if (drawRect.top >= scrollRect.top && drawRect.bottom <= scrollRect.bottom)
              return 2;
          }
          return 1;
        }
      }}
      
    }
  }
  return 0;
};


/** @asprivate
 * @private
 * @param {Array} srcRects
 * @param {Array} dstRects
 * @param {number} largestRise
 * @param {string} blockProgression
 * @param {string} direction
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_normalizeRects = function(srcRects, dstRects, largestRise, blockProgression, direction) {
  var /** @type {org.apache.royale.geom.Rectangle} */ lastRect = null;
  var /** @type {number} */ rectIter = 0;
  while (rectIter < srcRects.length) {
    var /** @type {org.apache.royale.geom.Rectangle} */ rect = srcRects[rectIter++];
    if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
      if (rect.width < largestRise) {
        rect.width = largestRise;
      }
    } else {
      if (rect.height < largestRise) {
        rect.height = largestRise;
      }
    }
    if (lastRect == null) {
      lastRect = rect;
    } else {
      if (blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
        if (lastRect.y < rect.y && (lastRect.y + lastRect.height) >= rect.top && lastRect.x == rect.x) {
          lastRect.height += rect.height;
        } else if (rect.y < lastRect.y && lastRect.y <= rect.bottom && lastRect.x == rect.x) {
          lastRect.height += rect.height;
          lastRect.y = rect.y;
        } else {
          dstRects.push(lastRect);
          lastRect = rect;
        }
      } else {
        if (lastRect.x < rect.x && (lastRect.x + lastRect.width) >= rect.left && lastRect.y == rect.y) {
          lastRect.width += rect.width;
        } else if (rect.x < lastRect.x && lastRect.x <= rect.right && lastRect.y == rect.y) {
          lastRect.width += rect.width;
          lastRect.x = rect.x;
        } else {
          dstRects.push(lastRect);
          lastRect = rect;
        }
      }
    }
    if (rectIter == srcRects.length)
      dstRects.push(lastRect);
  }
};


/** @asprivate 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {number} begAtomIndex
 * @param {string} direction
 * @return {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_adjustEndElementForBidi = function(textLine, begIdx, endIdx, begAtomIndex, direction) {
  var /** @type {number} */ endAtomIndex = begAtomIndex;
  if (endIdx != begIdx) {
    if (((direction == org.apache.royale.textLayout.formats.Direction.LTR && textLine.getAtomBidiLevel(begAtomIndex) % 2 != 0) || (direction == org.apache.royale.textLayout.formats.Direction.RTL && textLine.getAtomBidiLevel(begAtomIndex) % 2 == 0)) && textLine.getAtomTextRotation(begAtomIndex) != org.apache.royale.text.engine.TextRotation.ROTATE_0)
      endAtomIndex = textLine.getAtomIndexAtCharIndex(endIdx); else {
      endAtomIndex = textLine.getAtomIndexAtCharIndex((endIdx - 1) >> 0);
    }
  }
  if (endAtomIndex == -1 && endIdx > 0) {
    return this.org_apache_royale_textLayout_compose_TextFlowLine_adjustEndElementForBidi(textLine, begIdx, (endIdx - 1) >> 0, begAtomIndex, direction);
  }
  return endAtomIndex;
};


/** @asprivate 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {number} elementIdx
 * @param {string} direction
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_isAtomBidi = function(textLine, elementIdx, direction) {
  if (!textLine)
    textLine = this.getTextLine(true);
  return (textLine.getAtomBidiLevel(elementIdx) % 2 != 0 && direction == org.apache.royale.textLayout.formats.Direction.LTR) || (textLine.getAtomBidiLevel(elementIdx) % 2 == 0 && direction == org.apache.royale.textLayout.formats.Direction.RTL);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.height;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__height = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__height;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__height = function(value) {
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.composable;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__composable = function() {
  return true;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.heightTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__heightTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.org_apache_royale_textLayout_compose_TextFlowLine__height);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.outerTargetWidthTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__outerTargetWidthTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.org_apache_royale_textLayout_compose_TextFlowLine__outerTargetWidth);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.ascentTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__ascentTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this._ascent);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.targetWidthTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__targetWidthTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.org_apache_royale_textLayout_compose_TextFlowLine__targetWidth);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.textHeightTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textHeightTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.textHeight);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.lineOffsetTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineOffsetTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this._lineOffset);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.lineExtentTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineExtentTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.org_apache_royale_textLayout_compose_TextFlowLine__lineExtent);
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.hasGraphicElement;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__hasGraphicElement = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine_getFlag(org.apache.royale.textLayout.compose.TextFlowLine.GRAPHICELEMENT_MASK) != 0;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.hasNumberLine;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__hasNumberLine = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine_getFlag(org.apache.royale.textLayout.compose.TextFlowLine.NUMBERLINE_MASK) != 0;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.numberLinePosition;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__numberLinePosition = function() {
  return org.apache.royale.textLayout.utils.Twips.from(this.org_apache_royale_textLayout_compose_TextFlowLine__numberLinePosition);
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__numberLinePosition = function(position) {
  
  this.org_apache_royale_textLayout_compose_TextFlowLine__numberLinePosition = org.apache.royale.textLayout.utils.Twips.to(position);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.textHeight;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textHeight = function() {
  return this._ascent + this._descent;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.x;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__x = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__x;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__x = function(lineX) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__x = lineX;
  this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW = 2;
  this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW = 1;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.xTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__xTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.org_apache_royale_textLayout_compose_TextFlowLine__x);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.y;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__y = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__y;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__y = function(lineY) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__y = lineY;
  this.org_apache_royale_textLayout_compose_TextFlowLine__boundsLeftTW = 2;
  this.org_apache_royale_textLayout_compose_TextFlowLine__boundsRightTW = 1;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.yTW;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__yTW = function() {
  return org.apache.royale.textLayout.utils.Twips.to(this.org_apache_royale_textLayout_compose_TextFlowLine__y);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.location;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__location = function() {
  var /** @type {number} */ lineStart = 0;
  if (this.org_apache_royale_textLayout_compose_TextFlowLine__para) {
    //var /** @type {number} */ lineStart = 0;
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.peekTextLine();
    if (textLine)
      lineStart = (this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart - this.org_apache_royale_textLayout_compose_TextFlowLine__para.getTextBlockAbsoluteStart(textLine.textBlock)) >> 0;
    else
      lineStart = (this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart - this.org_apache_royale_textLayout_compose_TextFlowLine__para.getAbsoluteStart()) >> 0;
    if (lineStart == 0)
      return (this.org_apache_royale_textLayout_compose_TextFlowLine__textLength == this.org_apache_royale_textLayout_compose_TextFlowLine__para.textLength ? org.apache.royale.textLayout.compose.TextFlowLineLocation.ONLY : org.apache.royale.textLayout.compose.TextFlowLineLocation.FIRST) >> 0;
    if (lineStart + this.textLength == this.org_apache_royale_textLayout_compose_TextFlowLine__para.textLength)
      return (org.apache.royale.textLayout.compose.TextFlowLineLocation.LAST) >> 0;
  }
  return (org.apache.royale.textLayout.compose.TextFlowLineLocation.MIDDLE) >> 0;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.controller;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__controller = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__controller;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.columnIndex;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__columnIndex = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__columnIndex;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.ascent;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__ascent = function() {
  return this._ascent;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.descent;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__descent = function() {
  return this._descent;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.lineOffset;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineOffset = function() {
  return this._lineOffset;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.paragraph;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__paragraph = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__para;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.absoluteStart;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__absoluteStart = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__absoluteStart;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.textBlockStart;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textBlockStart = function() {
  var /** @type {number} */ start = this.absoluteStart;
  var /** @type {number} */ paraStart = this.paragraph.getAbsoluteStart();
  start -= paraStart;
  var /** @type {Array} */ tbs = this.paragraph.getTextBlocks();
  if (tbs.length > 1) {
    var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = this.paragraph.getTextBlockAtPosition(start);
    for (var /** @type {number} */ i = 0; i < tbs.length; i++) {
      if (textBlock == tbs[i])
        break;
      start -= (tbs[i].content.rawText.length) >> 0;
    }
  }
  return start;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.textLength;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textLength = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__textLength;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.spaceBefore;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__spaceBefore = function() {
  return Number((this.location & org.apache.royale.textLayout.compose.TextFlowLineLocation.FIRST) ? this.org_apache_royale_textLayout_compose_TextFlowLine__para.computedFormat.paragraphSpaceBefore : 0);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.spaceAfter;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__spaceAfter = function() {
  return Number(((this.location & org.apache.royale.textLayout.compose.TextFlowLineLocation.LAST) ? this.org_apache_royale_textLayout_compose_TextFlowLine__para.computedFormat.paragraphSpaceAfter : 0));
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.outerTargetWidth;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__outerTargetWidth = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__outerTargetWidth;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__outerTargetWidth = function(val) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__outerTargetWidth = val;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.targetWidth;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__targetWidth = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__targetWidth;
};


/**
 * @type {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.org_apache_royale_textLayout_compose_TextFlowLine_validities;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__org_apache_royale_textLayout_compose_TextFlowLine_validities = function() {
  if (this.org_apache_royale_textLayout_compose_TextFlowLine__validities == null)
    this.org_apache_royale_textLayout_compose_TextFlowLine__validities = ["invalid", "possiblyInvalid", "static", "valid", org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY];
  return this.org_apache_royale_textLayout_compose_TextFlowLine__validities;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.validity;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__validity = function() {
  return org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_compose_TextFlowLine_validities[this.org_apache_royale_textLayout_compose_TextFlowLine_getFlag(org.apache.royale.textLayout.compose.TextFlowLine.VALIDITY_MASK)]);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.unjustifiedTextWidth;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__unjustifiedTextWidth = function() {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = this.getTextLine(true);
  return textLine.unjustifiedTextWidth + (this.org_apache_royale_textLayout_compose_TextFlowLine__outerTargetWidth - this.targetWidth);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.lineExtent;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineExtent = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__lineExtent;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__lineExtent = function(value) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__lineExtent = value;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.accumulatedLineExtent;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__accumulatedLineExtent = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedLineExtent;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__accumulatedLineExtent = function(value) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedLineExtent = value;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.accumulatedMinimumStart;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__accumulatedMinimumStart = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedMinimumStart;
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__accumulatedMinimumStart = function(value) {
  this.org_apache_royale_textLayout_compose_TextFlowLine__accumulatedMinimumStart = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.alignment;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__alignment = function() {
  return org.apache.royale.utils.Language.string(org.apache.royale.textLayout.compose.TextFlowLine.alignments[this.org_apache_royale_textLayout_compose_TextFlowLine_getFlag(org.apache.royale.textLayout.compose.TextFlowLine.ALIGNMENT_MASK) >> org.apache.royale.textLayout.compose.TextFlowLine.ALIGNMENT_SHIFT]);
};


org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__alignment = function(value) {
  
  this.org_apache_royale_textLayout_compose_TextFlowLine_setFlag((org.apache.royale.textLayout.compose.TextFlowLine.alignments.indexOf(value) << org.apache.royale.textLayout.compose.TextFlowLine.ALIGNMENT_SHIFT) >>> 0, org.apache.royale.textLayout.compose.TextFlowLine.ALIGNMENT_MASK);
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.textLineExists;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textLineExists = function() {
  return this.peekTextLine() != null;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.adornCount;


org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__adornCount = function() {
  return this.org_apache_royale_textLayout_compose_TextFlowLine__adornCount;
};


Object.defineProperties(org.apache.royale.textLayout.compose.TextFlowLine.prototype, /** @lends {org.apache.royale.textLayout.compose.TextFlowLine.prototype} */ {
/**
 * @type {number}
 */
height: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__height,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__height},
/**
 * @type {boolean}
 */
composable: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__composable},
/**
 * @type {number}
 */
heightTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__heightTW},
/**
 * @type {number}
 */
outerTargetWidthTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__outerTargetWidthTW},
/**
 * @type {number}
 */
ascentTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__ascentTW},
/**
 * @type {number}
 */
targetWidthTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__targetWidthTW},
/**
 * @type {number}
 */
textHeightTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textHeightTW},
/**
 * @type {number}
 */
lineOffsetTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineOffsetTW},
/**
 * @type {number}
 */
lineExtentTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineExtentTW},
/**
 * @type {boolean}
 */
hasGraphicElement: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__hasGraphicElement},
/**
 * @type {boolean}
 */
hasNumberLine: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__hasNumberLine},
/**
 * @type {number}
 */
numberLinePosition: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__numberLinePosition,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__numberLinePosition},
/**
 * @type {number}
 */
textHeight: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textHeight},
/**
 * @type {number}
 */
x: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__x,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__x},
/**
 * @type {number}
 */
xTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__xTW},
/**
 * @type {number}
 */
y: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__y,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__y},
/**
 * @type {number}
 */
yTW: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__yTW},
/**
 * @type {number}
 */
location: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__location},
/**
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
controller: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__controller},
/**
 * @type {number}
 */
columnIndex: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__columnIndex},
/**
 * @type {number}
 */
ascent: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__ascent},
/**
 * @type {number}
 */
descent: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__descent},
/**
 * @type {number}
 */
lineOffset: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineOffset},
/**
 * @type {org.apache.royale.textLayout.elements.IParagraphElement}
 */
paragraph: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__paragraph},
/**
 * @type {number}
 */
absoluteStart: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__absoluteStart},
/**
 * @type {number}
 */
textBlockStart: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textBlockStart},
/**
 * @type {number}
 */
textLength: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textLength},
/**
 * @type {number}
 */
spaceBefore: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__spaceBefore},
/**
 * @type {number}
 */
spaceAfter: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__spaceAfter},
/**
 * @type {number}
 */
outerTargetWidth: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__outerTargetWidth,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__outerTargetWidth},
/**
 * @type {number}
 */
targetWidth: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__targetWidth},
/**
 * @type {Array}
 */
org_apache_royale_textLayout_compose_TextFlowLine_validities: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__org_apache_royale_textLayout_compose_TextFlowLine_validities},
/**
 * @type {string}
 */
validity: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__validity},
/**
 * @type {number}
 */
unjustifiedTextWidth: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__unjustifiedTextWidth},
/**
 * @type {number}
 */
lineExtent: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__lineExtent,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__lineExtent},
/**
 * @type {number}
 */
accumulatedLineExtent: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__accumulatedLineExtent,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__accumulatedLineExtent},
/**
 * @type {number}
 */
accumulatedMinimumStart: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__accumulatedMinimumStart,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__accumulatedMinimumStart},
/**
 * @type {string}
 */
alignment: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__alignment,
set: org.apache.royale.textLayout.compose.TextFlowLine.prototype.set__alignment},
/**
 * @type {boolean}
 */
textLineExists: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__textLineExists},
/**
 * @type {number}
 */
adornCount: {
get: org.apache.royale.textLayout.compose.TextFlowLine.prototype.get__adornCount}}
);


/**
 * @nocollapse
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.compose.TextFlowLine.selectionBlockCache;


org.apache.royale.textLayout.compose.TextFlowLine.get__selectionBlockCache = function() {
  if (org.apache.royale.textLayout.compose.TextFlowLine._selectionBlockCache == null)
    org.apache.royale.textLayout.compose.TextFlowLine._selectionBlockCache = new org.apache.royale.utils.ObjectMap(true);
  return org.apache.royale.textLayout.compose.TextFlowLine._selectionBlockCache;
};


/**
 * @nocollapse
 * @type {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.alignments;


org.apache.royale.textLayout.compose.TextFlowLine.get__alignments = function() {
  if (org.apache.royale.textLayout.compose.TextFlowLine._alignments == null)
    org.apache.royale.textLayout.compose.TextFlowLine._alignments = [org.apache.royale.textLayout.formats.TextAlign.LEFT, org.apache.royale.textLayout.formats.TextAlign.CENTER, org.apache.royale.textLayout.formats.TextAlign.RIGHT];
  return org.apache.royale.textLayout.compose.TextFlowLine._alignments;
};


/**
 * @nocollapse
 * @type {org.apache.royale.geom.Point}
 */
org.apache.royale.textLayout.compose.TextFlowLine.localZeroPoint;


org.apache.royale.textLayout.compose.TextFlowLine.get__localZeroPoint = function() {
  if (org.apache.royale.textLayout.compose.TextFlowLine._localZeroPoint == null)
    org.apache.royale.textLayout.compose.TextFlowLine._localZeroPoint = new org.apache.royale.geom.Point(0, 0);
  return org.apache.royale.textLayout.compose.TextFlowLine._localZeroPoint;
};


/**
 * @nocollapse
 * @type {org.apache.royale.geom.Point}
 */
org.apache.royale.textLayout.compose.TextFlowLine.localOnePoint;


org.apache.royale.textLayout.compose.TextFlowLine.get__localOnePoint = function() {
  if (org.apache.royale.textLayout.compose.TextFlowLine._localOnePoint == null)
    org.apache.royale.textLayout.compose.TextFlowLine._localOnePoint = new org.apache.royale.geom.Point(1, 0);
  return org.apache.royale.textLayout.compose.TextFlowLine._localOnePoint;
};


/**
 * @nocollapse
 * @type {org.apache.royale.geom.Point}
 */
org.apache.royale.textLayout.compose.TextFlowLine.rlLocalOnePoint;


org.apache.royale.textLayout.compose.TextFlowLine.get__rlLocalOnePoint = function() {
  if (org.apache.royale.textLayout.compose.TextFlowLine._rlLocalOnePoint == null)
    org.apache.royale.textLayout.compose.TextFlowLine._rlLocalOnePoint = new org.apache.royale.geom.Point(0, 1);
  return org.apache.royale.textLayout.compose.TextFlowLine._rlLocalOnePoint;
};


Object.defineProperties(org.apache.royale.textLayout.compose.TextFlowLine, /** @lends {org.apache.royale.textLayout.compose.TextFlowLine} */ {
/**
 * @type {org.apache.royale.utils.ObjectMap}
 */
selectionBlockCache: {
get: org.apache.royale.textLayout.compose.TextFlowLine.get__selectionBlockCache},
/**
 * @type {Array}
 */
alignments: {
get: org.apache.royale.textLayout.compose.TextFlowLine.get__alignments},
/**
 * @type {org.apache.royale.geom.Point}
 */
localZeroPoint: {
get: org.apache.royale.textLayout.compose.TextFlowLine.get__localZeroPoint},
/**
 * @type {org.apache.royale.geom.Point}
 */
localOnePoint: {
get: org.apache.royale.textLayout.compose.TextFlowLine.get__localOnePoint},
/**
 * @type {org.apache.royale.geom.Point}
 */
rlLocalOnePoint: {
get: org.apache.royale.textLayout.compose.TextFlowLine.get__rlLocalOnePoint}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextFlowLine', qName: 'org.apache.royale.textLayout.compose.TextFlowLine', kind: 'class' }], interfaces: [org.apache.royale.textLayout.compose.ITextFlowLine] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'height': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'composable': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'heightTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'outerTargetWidthTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'ascentTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'targetWidthTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'textHeightTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'lineOffsetTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'lineExtentTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'hasGraphicElement': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'hasNumberLine': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'numberLinePosition': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'textHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'x': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'xTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'y': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'yTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'location': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'controller': { type: 'org.apache.royale.textLayout.container.IContainerController', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'columnIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'ascent': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'descent': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'lineOffset': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'paragraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'absoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'textBlockStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'textLength': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'spaceBefore': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'spaceAfter': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'outerTargetWidth': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'targetWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'validity': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'unjustifiedTextWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'lineExtent': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'accumulatedLineExtent': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'accumulatedMinimumStart': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'alignment': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'textLineExists': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'adornCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'}
      };
    },
    methods: function () {
      return {
        'TextFlowLine': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ,'org.apache.royale.textLayout.elements.IParagraphElement', false ,'Number', true ,'Number', true ,'int', true ,'int', true ]; }},
        'initialize': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IParagraphElement', false ,'Number', true ,'Number', true ,'int', true ,'int', true ,'org.apache.royale.text.engine.ITextLine', true ]; }},
        'setXYAndHeight': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'setController': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'setAbsoluteStart': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'int', false ]; }},
        'setTextLength': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'int', false ]; }},
        'getBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'isDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'clearDamage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'damage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ]; }},
        'testLineVisible': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'int', false ,'int', false ,'int', false ,'int', false ]; }},
        'oldTestLineVisible': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'int', false ,'int', false ,'int', false ,'int', false ]; }},
        'cacheLineBounds': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'hasLineBounds': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'peekTextLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine'},
        'getTextLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'Boolean', true ]; }},
        'recreateTextLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.text.engine.ITextBlock', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'createShape': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'createAdornments': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ,'org.apache.royale.text.engine.ITextLine', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'getLineLeading': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ]; }},
        'getLineTypographicAscent': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'getCSSLineBox': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ,'org.apache.royale.textLayout.compose.ISWFContext', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.text.engine.ITextLine', true ]; }},
        'calculateSelectionBounds': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ,'Array', false ,'int', false ,'int', false ,'String', false ,'Array', false ]; }},
        'getRomanSelectionHeightAndVerticalAdjustment': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }},
        'convertLineRectToContainer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ,'Boolean', false ]; }},
        '|constrainRectToColumn': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'org.apache.royale.geom.Rectangle', false ,'org.apache.royale.geom.Rectangle', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'hiliteBlockSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.graphics.ICompoundGraphic', false ,'org.apache.royale.textLayout.edit.SelectionFormat', false ,'org.apache.royale.core.IParentIUIBase', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }},
        'hilitePointSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionFormat', false ,'int', false ,'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }},
        'computePointSelectionRectangle': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'int', false ,'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'Boolean', false ]; }},
        'selectionWillIntersectScrollRect': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./TextFlowLine.js.map


/**
 * @constructor
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache = function() {
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.SelectionCache__begIdx = -1;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.SelectionCache__endIdx = -1;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.SelectionCache__selectionBlocks = null;


/**
 * @param {org.apache.royale.geom.Rectangle} drawRect
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.pushSelectionBlock = function(drawRect) {
  if (!this.SelectionCache__selectionBlocks)
    this.SelectionCache__selectionBlocks = new Array();
  this.SelectionCache__selectionBlocks.push(drawRect.clone());
};


/**
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.clear = function() {
  this.SelectionCache__selectionBlocks = null;
  this.SelectionCache__begIdx = -1;
  this.SelectionCache__endIdx = -1;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.begIdx;


org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.get__begIdx = function() {
  return this.SelectionCache__begIdx;
};


org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.set__begIdx = function(val) {
  this.SelectionCache__begIdx = val;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.endIdx;


org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.get__endIdx = function() {
  return this.SelectionCache__endIdx;
};


org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.set__endIdx = function(val) {
  this.SelectionCache__endIdx = val;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.selectionBlocks;


org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.get__selectionBlocks = function() {
  return this.SelectionCache__selectionBlocks;
};


Object.defineProperties(org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype, /** @lends {org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype} */ {
/**
 * @type {number}
 */
begIdx: {
get: org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.get__begIdx,
set: org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.set__begIdx},
/**
 * @type {number}
 */
endIdx: {
get: org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.get__endIdx,
set: org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.set__endIdx},
/**
 * @type {Array}
 */
selectionBlocks: {
get: org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.get__selectionBlocks}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SelectionCache', qName: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'begIdx': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache'},
        'endIdx': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache'},
        'selectionBlocks': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache'}
      };
    },
    methods: function () {
      return {
        'SelectionCache': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache'},
        'pushSelectionBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ]; }},
        'clear': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.TextFlowLine.SelectionCache.prototype.ROYALE_COMPILE_FLAGS = 10;
