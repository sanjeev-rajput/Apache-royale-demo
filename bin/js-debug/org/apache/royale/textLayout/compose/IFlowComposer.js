/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/IFlowComposer.as
 * org.apache.royale.textLayout.compose.IFlowComposer
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.IFlowComposer');
/* Royale Dependency List: org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IContainerFormattedElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,XML*/




/**
 * @interface
 */
org.apache.royale.textLayout.compose.IFlowComposer = function() {
};
/**  * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.rootElement;
/**
 * @param {org.apache.royale.textLayout.elements.IContainerFormattedElement} newRootElement
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.setRootElement = function(newRootElement) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.damageAbsoluteStart;
/** 
 * Composes the content of the root element and updates the display.  
 *
 * <p>Text layout is typically conducted in two phases: composition and display. In the composition phase,
 * the flow composer calculates how many lines are necesary to display the content as well as the position of these 
 * lines in the flow's display containers. In the display phase, 
 * the flow composer updates the display object children of its containers. The <code>updateAllControllers()</code>
 * method is expected to carry out both phases. An efficient implementation will keep track of changes to content
 * so that a full cycle of composition and display is only performed when necessary.</p>
 * 
 * <p>This method updates all the text lines and the display list immediately and synchronously.</p>
 *
 * <p>If the contents of any container is changed, the method must return <code>true</code>.</p>
 * 
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.updateAllControllers = function() {
};
/** 
 * Composes and updates the display up to and including the container at the specified index.
 * 
 * <p>The <code>updateToController()</code> method is expected to both compose the content and 
 * update the display so that all containers up to and including the container at the specified index are current.
 * For example, if you have a chain of twenty containers and specify an index of 10, 
 * <code>updateToController()</code> must ensures that the first through the tenth (indexes 0-9) containers
 * are composed and displayed. Composition can stop at that point. If <code>controllerIndex</code> 
 * is -1 (or not specified), then all containers should be updated.</p>
 *
 * <p>This method updates all the text lines and the display list immediately and synchronously.</p>
 * 
 * <p>If the contents of any container is changed, the method must return <code>true</code>.</p>
 * 
 * @asparam controllerIndex index of the last container to update, by default will update all containers
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @param {number=} index
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.updateToController = function(index) {
};
/** 
 * Sets the focus to the container that contains the location specified by the <code>absolutePosition</code>
 * parameter. 
 *
 * <p>It is the responsibility of the implementation to define what setting the focus means. For example, an 
 * implementation could use the built-in <code>focus</code> property of the Stage object (as long as the
 * containers were InteractiveObjects) or the implementation could manage the focus some other way.</p>
 * 
 * @asparam absolutePosition Specifies the position in the text flow of the container to receive focus.
 * @asparam preferPrevious If true and the position is the before the first character in a container, sets focus to the end of 
 *  the previous container.
 * 
 * @see flash.display.Stage#focus
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.setFocus = function(absolutePosition, preferPrevious) {
};
/** 
 * Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
 * lines in the flow's display containers.
 * 
 * <p>Implementations of this method should not update the display, but should save the results so that subsequent
 * calls to <code>compose()</code> or <code>updateAllControllers()</code> do not perform an additional recomposition
 * if the flow content has not changed.</p>
 * 
 * <p>If the contents of any container have changed, the method must return <code>true</code>.</p>
 * 
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see #updateAllControllers()
 * @see #updateToController()
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.compose = function() {
};
/** 
 * Composes the content of the root element up to the specified position.
 * 
 * <p>If the contents of any container up to and including the container holding the content at the specified
 * position has changed, the method returns <code>true</code>. If <code>absolutePosition</code> is greater than the length of the TextFlow 
 * (or not specified), then the entire flow is composed.</p>
 * 
 * @asparam absolutePosition compose at least up to this position in the TextFlow. By default or if absolutePosition is past the end of the flow compose to the end of the flow.
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see #updateAllControllers()
 * @see #updateToController()
 * @param {number=} absolutePosition
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.composeToPosition = function(absolutePosition) {
};
/** 
 * Composes the content of the root element up to and including the container at the specified index.
 * 
 * <p>If the contents of any container up to and including the container at the specified
 * index has changed, the method returns <code>true</code>. If <code>index</code> is greater than the number of controllers
 * (or not specified), then all containers are composed.</p>
 * 
 * @asparam controllerIndex compose at least up to this container in the TextFlow. If controllerIndex is greater than the number of controllers, compose to the end of the last container.
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see #updateAllControllers()
 * @see #updateToController()
 * @param {number=} index
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.composeToController = function(index) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.numControllers;
/** 
 * Adds a controller to this IFlowComposer instance.
 *
 * <p>The container is added to the end of the container list.</p>
 * 
 * @asparam controller The ContainerController object to add.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.addController = function(controller) {
};
/** 
 * Adds a controller to this IFlowComposer instance at the specified index.
 *
 * <p>The list of controllers is 0-based (the first controller has an index of 0).</p>
 * 
 * @asparam controller The ContainerController object to add.
 * @asparam index A numeric index that specifies the position in the controller list at which to insert the ContainerController object.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} index
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.addControllerAt = function(controller, index) {
};
/** 
 * Removes a controller from this IFlowComposer instance. 
 * 
 * @asparam controller The ContainerController instance to remove.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.removeController = function(controller) {
};
/** 
 * Removes the controller at the specified index from this IFlowComposer instance.
 *
 * @asparam index The index of the ContainerController object to remove.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.removeControllerAt = function(index) {
};
org.apache.royale.textLayout.compose.IFlowComposer.prototype.removeAllControllers = function() {
};
/** 
 * Returns the ContainerController object at the specified index. 
 * 
 * @asparam index The index of the ContainerController object to return.
 * @asreturn 	the ContainerController object at the specified position.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.getControllerAt = function(index) {
};
/** 
 * Returns the index of the specified ContainerController object. 
 * 
 * @asparam controller A reference to the ContainerController object to find.
 * @asreturn the index of the specified ContainerController object or -1 if the controller is not attached to this flow composer.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @return {number}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.getControllerIndex = function(controller) {
};
/** 
 * Returns the index of the controller containing the content at the specified position. 
 * 
 * <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
 * the value in <code>absolutePosition</code> is a position between the last character of one 
 * container and the first character of the next, then the preceding container is returned if
 * the <code>preferPrevious</code> parameter is set to <code>true</code> and the later container is returned if
 * the <code>preferPrevious</code> parameter is set to <code>false</code>.</p>
 *
 * <p>The method must return -1 if the content at the specified position is not in any container or is outside
 * the range of positions in the text flow.</p>
 * 
 * @asparam absolutePosition The position of the content for which the container index is sought.
 * @asparam preferPrevious Specifies which container index to return when the position is between the last element in 
 * one container and the first element in the next.
 * 
 * @asreturn 	the index of the container controller or -1 if not found.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 * @return {number}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.findControllerIndexAtPosition = function(absolutePosition, preferPrevious) {
};
/** 
 * Returns the sequential line number of the ITextFlowLine object that contains the content at the specified position. 
 * 
 * <p>The number of the first line is 0 and the number of the last line is equal to the number of lines minus one.
 * If the position specified in <code>absolutePosition</code> is past the end of the text flow, this method must return
 * the number that will be assigned to the next new line added to the text flow (which is equal to the number of current lines).</p>
 *
 * <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
 * the value in <code>absolutePosition</code> is a position between the last line of one 
 * container and the first line of the next, then the preceding container is returned if
 * the <code>preferPrevious</code> parameter is set to <code>true</code> and the later container is returned if
 * the <code>preferPrevious</code> parameter is set to <code>false</code>.</p>
 * 
 * @asparam absolutePosition	The position of the content for which you want the text line.
 * @asparam preferPrevious Specifies which container index to return when the position is between the last line in 
 * one container and the first line in the next.
 *
 * @asreturn the index of the text line at the specified position. If not found, treats as past the end and returns the
 * number of lines.
 * 	 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 * @return {number}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.findLineIndexAtPosition = function(absolutePosition, preferPrevious) {
};
/** 
 * Returns the ITextFlowLine object containing the content at the specified position.
 *
 * <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
 * the value in <code>absolutePosition</code> is a position between the last element of one 
 * line and the first element of the next, then the preceding line is returned if
 * the <code>preferPrevious</code> parameter is set to <code>true</code> and the later line is returned if
 * the <code>preferPrevious</code> parameter is set to <code>false</code>.</p>
 * 
 * @asparam absolutePosition	The position of the content for which you want the ITextFlowLine object.
 * @asparam preferPrevious		Specifies which line to return when the position is between the last element of 
 * one line and the first element of the next.
 *
 * @asreturn	the ITextFlowLine containing the content at the specified position, or null if not found.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 * @return {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.findLineAtPosition = function(absolutePosition, preferPrevious) {
};
/** 
 * Returns the line with the specified line number. 
 *
 * <p>The list of lines is numbered from zero to the number of lines minus one. If the value in <code>index</code>
 * is outside the bounds of the list of lines, then this function returns <code>null</code>.</p>
 * 
 * @asparam index		The line number of the ITextFlowLine object to return.
 * @asreturn	the ITextFlowLine with the specified line number, or <code>null</code>, if not found.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.getLineAt = function(index) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.numLines;
/** 
 * Indicates whether any ITextFlowLine objects between the beginning of the flow and the line containing the content at 
 * the specified position are marked as damaged. 
 *
 * @asparam absolutePosition the last position in the area of interest
 * @asreturn 	true if any of the ITextFlowLine objects from the start of the flow up to the line containing the content at
 * <code>absolutePosition</code> are marked as damaged.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.isDamaged = function(absolutePosition) {
};
/**
 * Indicates whether any ITextFlowLine objects between the beginning of the flow and the line containing the content at
 * the specified position are marked as damaged OR if there are other clues that the textFlow should be rebuilt.
 *
 * @asparam absolutePosition the last position in the area of interest
 * @asreturn 	true if any of the ITextFlowLine objects from the start of the flow up to the line containing the content at
 * <code>absolutePosition</code> are marked as damaged OR if there are other reasons to believe the textFlow is damaged.
 *
 * @see org.apache.royale.textLayout.compose.IFlowComposer#isDamaged()
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.isPotentiallyDamaged = function(absolutePosition) {
};
/**  * @type {boolean}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.composing;
/**  * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.swfContext;
/**
 * Called by the TextFlow when the interaction manager changes. 
 * 
 * <p>Implementations of IFlowComposer should update event listeners and properties
 * that reference the interaction manager.</p>
 * 
 * @asparam newInteractionManager The new ISelectionManager instance.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.edit.ISelectionManager} newInteractionManager
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.interactionManagerChanged = function(newInteractionManager) {
};
/** Update the lengths in the lines to maintain mapping to the TextFlow. 
 * 
 * @asparam startPosition beginning of change in length
 * @asparam deltaLength change in number of characters.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} startPosition
 * @param {number} deltaLength
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.updateLengths = function(startPosition, deltaLength) {
};
/** Mark lines as damaged and needing a recompose.
 * @asparam damageStart beginning of range to damage
 * @asparam damageLength number of characters to damage
 * @asparam damageType type of damage.  One of org.apache.royale.textLayout.compose.FlowDamageType
 * @see org.apache.royale.textLayout.compose.FlowDamageType
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} startPosition
 * @param {number} damageLength
 * @param {string} damageType
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.damage = function(startPosition, damageLength, damageType) {
};
/**
 * @return {org.apache.royale.textLayout.elements.IBackgroundManager}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.createBackgroundManager = function() {
};
/**  * @type {Array}
 */org.apache.royale.textLayout.compose.IFlowComposer.prototype.lines;
/**
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} newLine
 * @param {number} workIndex
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.addLine = function(newLine, workIndex) {
};
/**
 * @param {org.apache.royale.textLayout.elements.IListItemElement} listItemElement
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} curParaElement
 * @param {org.apache.royale.textLayout.compose.ISWFContext} swfContext
 * @param {number} totalStartIndent
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.createNumberLine = function(listItemElement, curParaElement, swfContext, totalStartIndent) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IFlowComposer', qName: 'org.apache.royale.textLayout.compose.IFlowComposer', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'rootElement': { type: 'org.apache.royale.textLayout.elements.IContainerFormattedElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'damageAbsoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'numControllers': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'numLines': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'composing': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'swfContext': { type: 'org.apache.royale.textLayout.compose.ISWFContext', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'lines': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'}
      };
    },
    methods: function () {
      return {
        'setRootElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IContainerFormattedElement', false ]; }},
        'updateAllControllers': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'updateToController': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', true ]; }},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'compose': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'composeToPosition': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', true ]; }},
        'composeToController': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', true ]; }},
        'addController': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'addControllerAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'removeController': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'removeControllerAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'removeAllControllers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'getControllerAt': { type: 'org.apache.royale.textLayout.container.IContainerController', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'getControllerIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'findControllerIndexAtPosition': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'findLineIndexAtPosition': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'findLineAtPosition': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'getLineAt': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'isDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'isPotentiallyDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'interactionManagerChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.edit.ISelectionManager', false ]; }},
        'updateLengths': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'damage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'int', false ,'int', false ,'String', false ]; }},
        'createBackgroundManager': { type: 'org.apache.royale.textLayout.elements.IBackgroundManager', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer'},
        'addLine': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'int', false ]; }},
        'createNumberLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.IFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IListItemElement', false ,'org.apache.royale.textLayout.elements.IParagraphElement', false ,'org.apache.royale.textLayout.compose.ISWFContext', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.IFlowComposer.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./IFlowComposer.js.map
