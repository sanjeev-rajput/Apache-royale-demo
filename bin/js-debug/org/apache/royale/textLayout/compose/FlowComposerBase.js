/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/FlowComposerBase.as
 * org.apache.royale.textLayout.compose.FlowComposerBase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.FlowComposerBase');
/* Royale Dependency List: org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.FlowDamageType,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.TextFlowLine,org.apache.royale.textLayout.compose.TextFlowTableBlock,org.apache.royale.textLayout.compose.TextLineRecycler,org.apache.royale.textLayout.compose.utils.ContextUtil,org.apache.royale.textLayout.compose.utils.NumberlineUtil,org.apache.royale.textLayout.elements.ConfigSettings,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.utils.Language,XML*/




/** Constructor. 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 */
org.apache.royale.textLayout.compose.FlowComposerBase = function() {
  this.org_apache_royale_textLayout_compose_FlowComposerBase__lines = new Array();
  this._swfContext = null;
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.org_apache_royale_textLayout_compose_FlowComposerBase__lines;


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype._textFlow;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype._damageAbsoluteStart = 0;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype._swfContext;


/** 
 * @copy IFlowComposer#getLineAt()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.getLineAt = function(index) {
  return this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[index];
};


/**
 * Initialize the lines for the TextFlow.  Creates a single ITextFlowLine with no content. @asprivate
 * @protected
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.initializeLines = function() {
  var /** @type {org.apache.royale.textLayout.elements.IBackgroundManager} */ backgroundManager = this._textFlow ? this._textFlow.backgroundManager : null;
  if (org.apache.royale.textLayout.compose.TextLineRecycler.textLineRecyclerEnabled) {
    var foreachiter0_target = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var line = foreachiter0_target[foreachiter0];
    {
      var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = line.peekTextLine();
      if (textLine && !textLine.parent) {
        if (textLine.validity != "invalid") {
          var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = textLine.textBlock;
          
          textBlock.releaseLines(textBlock.firstLine, textBlock.lastLine);
        }
        textLine.userData = null;
        org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(textLine);
        if (backgroundManager)
          backgroundManager.removeLineFromCache(textLine);
      }
    }}
    
  }
  this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(0);
  this._damageAbsoluteStart = 0;
  
};


/** Make sure that there is a ITextFlowLine for all the content - even if compose has stopped early. @asprivate 
 * @protected
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.finalizeLinesAfterCompose = function() {
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line;
  if (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length == 0) {
    line = new org.apache.royale.textLayout.compose.TextFlowLine(null, null);
    line.setTextLength(this.textFlow.textLength);
    this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.push(line);
  } else {
    line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length - 1];
    var /** @type {number} */ lineEnd = (line.absoluteStart + line.textLength) >> 0;
    if (lineEnd < this.textFlow.textLength) {
      line = new org.apache.royale.textLayout.compose.TextFlowLine(null, null);
      line.setAbsoluteStart(lineEnd);
      line.setTextLength((this.textFlow.textLength - lineEnd) >> 0);
      this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.push(line);
    }
  }
};


/** 
 * @copy IFlowComposer#updateLengths()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} startPosition
 * @param {number} deltaLength
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.updateLengths = function(startPosition, deltaLength) {
  var /** @type {number} */ MAX_VALUE = 2147483647;
  if (this.numLines == 0)
    return;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line;
  var /** @type {number} */ lineIdx = this.findLineIndexAtPosition(startPosition);
  var /** @type {number} */ damageStart = MAX_VALUE;
  if (deltaLength > 0) {
    if (lineIdx == this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length) {
      line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length - 1];
      
      line.setTextLength((line.textLength + deltaLength) >> 0);
    } else {
      line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[lineIdx++];
      line.setTextLength((line.textLength + deltaLength) >> 0);
    }
    damageStart = line.absoluteStart;
  } else {
    var /** @type {number} */ lenToDel = (-deltaLength) >> 0;
    var /** @type {number} */ curPos = 0;
    while (true) {
      line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[lineIdx];
      line.setAbsoluteStart((line.absoluteStart + lenToDel + deltaLength) >> 0);
      curPos = (startPosition > line.absoluteStart ? startPosition : line.absoluteStart);
      var /** @type {number} */ lineEndIdx = (line.absoluteStart + line.textLength) >> 0;
      var /** @type {number} */ deleteChars = 0;
      if (curPos + lenToDel <= lineEndIdx) {
        if (curPos == line.absoluteStart)
          deleteChars = lenToDel;
        else if (curPos == startPosition)
          deleteChars = lenToDel; else {
          
        }
      } else {
        if (curPos == line.absoluteStart)
          deleteChars = line.textLength;
        else
          deleteChars = (lineEndIdx - curPos) >> 0;
      }
      if (curPos == line.absoluteStart && curPos + deleteChars == lineEndIdx) {
        lenToDel -= deleteChars;
        this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(lineIdx, 1);
      } else {
        if (damageStart > line.absoluteStart)
          damageStart = line.absoluteStart;
        line.setTextLength((line.textLength - deleteChars) >> 0);
        lenToDel -= deleteChars;
        lineIdx++;
      }
      
      if (lenToDel <= 0)
        break;
    }
  }
  for (; lineIdx < this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length; lineIdx++) {
    line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[lineIdx];
    if (deltaLength >= 0)
      line.setAbsoluteStart((line.absoluteStart + deltaLength) >> 0);
    else
      line.setAbsoluteStart((line.absoluteStart > -deltaLength ? line.absoluteStart + deltaLength : 0) >> 0);
  }
  if (this._damageAbsoluteStart > damageStart)
    this._damageAbsoluteStart = damageStart;
};


/** 
 * @copy IFlowComposer#damage()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} startPosition
 * @param {number} damageLength
 * @param {string} damageType
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.damage = function(startPosition, damageLength, damageType) {
  if (org.apache.royale.textLayout.elements.ConfigSettings.usesDiscretionaryHyphens) {
    damageLength += startPosition;
    startPosition = 0;
  }
  if (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length == 0 || this.textFlow.textLength == 0)
    return;
  if (startPosition == this.textFlow.textLength)
    return;
  
  var /** @type {number} */ lineIndex = this.findLineIndexAtPosition(startPosition);
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.textFlow.findLeaf(startPosition);
  if (leaf && lineIndex > 0)
    lineIndex--;
  if (this.lines[lineIndex].absoluteStart < this._damageAbsoluteStart)
    this._damageAbsoluteStart = (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[lineIndex].absoluteStart) >> 0;
  
  while (lineIndex < this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length) {
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[lineIndex];
    if (line.absoluteStart >= startPosition + damageLength)
      break;
    line.damage(damageType);
    lineIndex++;
  }
};


/**
 * @copy IFlowComposer#isDamaged()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.isDamaged = function(absolutePosition) {
  if (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length == 0)
    return true;
  
  return this._damageAbsoluteStart <= absolutePosition && this._damageAbsoluteStart != this.textFlow.textLength;
};


/**
 * @copy IFlowComposer#isPotentiallyDamaged()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.isPotentiallyDamaged = function(absolutePosition) {
  return this.isDamaged(absolutePosition);
};


/** 
 * @copy IFlowComposer#findLineIndexAtPosition()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 * @return {number}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.findLineIndexAtPosition = function(absolutePosition, preferPrevious) {
  preferPrevious = typeof preferPrevious !== 'undefined' ? preferPrevious : false;
  var /** @type {number} */ lo = 0;
  var /** @type {number} */ hi = (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length - 1) >> 0;
  while (lo <= hi) {
    var /** @type {number} */ mid = (Math.floor((lo + hi) / 2)) >> 0;
    var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[mid];
    if (line.absoluteStart <= absolutePosition) {
      if (preferPrevious) {
        if (line.absoluteStart + line.textLength >= absolutePosition)
          return mid;
      } else {
        if (line.absoluteStart + line.textLength > absolutePosition)
          return mid;
      }
      lo = (mid + 1) >> 0;
    }
    else
      hi = (mid - 1) >> 0;
  }
  return (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length) >> 0;
};


/**
 * @copy IFlowComposer#findLineAtPosition()
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 * @return {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.findLineAtPosition = function(absolutePosition, preferPrevious) {
  preferPrevious = typeof preferPrevious !== 'undefined' ? preferPrevious : false;
  return this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[this.findLineIndexAtPosition(absolutePosition, preferPrevious)];
};


/**
 * add a new line 
 * Add a new line to the list of composed lines for the frame. Lines are sorted
 * by the start location, and each line has a span. The start of the next line
 * has to match the start of the previous line + the span of the previous line.
 * The last line needs to end at the end of the text. Therefore, when we add a
 * new line, we may need to adjust the span and/or start locations of other lines 
 * in the text.
 * @asprivate
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} newLine
 * @param {number} workIndex
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.addLine = function(newLine, workIndex) {
  var /** @type {number} */ MAX_VALUE = 2147483647;
  
  
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ workLine = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[workIndex];
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ afterLine;
  var /** @type {number} */ damageStart = MAX_VALUE;
  if (this._damageAbsoluteStart == newLine.absoluteStart)
    this._damageAbsoluteStart = (newLine.absoluteStart + newLine.textLength) >> 0;
  if (workLine == null)
    this.lines.push(newLine);
  else if (org.apache.royale.utils.Language.is(workLine, org.apache.royale.textLayout.compose.TextFlowTableBlock) && workLine != newLine)
    this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(workIndex, 1, newLine); else if (org.apache.royale.utils.Language.is(newLine, org.apache.royale.textLayout.compose.TextFlowTableBlock)) {
    if (workLine != newLine) {
      this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(workIndex, 0, newLine);
      if (workLine.absoluteStart == newLine.absoluteStart)
        workLine.setAbsoluteStart((workLine.absoluteStart + 1) >> 0);
    }
  } else if (workLine.absoluteStart != newLine.absoluteStart) {
    if (workLine.absoluteStart + workLine.textLength > newLine.absoluteStart + newLine.textLength) {
      afterLine = new org.apache.royale.textLayout.compose.TextFlowLine(null, newLine.paragraph);
      afterLine.setAbsoluteStart((newLine.absoluteStart + newLine.textLength) >> 0);
      var /** @type {number} */ oldCharCount = workLine.textLength;
      workLine.setTextLength((newLine.absoluteStart - workLine.absoluteStart) >> 0);
      
      afterLine.setTextLength(((oldCharCount - newLine.textLength) - workLine.textLength) >> 0);
      
      this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(workIndex + 1, 0, newLine, afterLine);
    } else {
      
      workLine.setTextLength((newLine.absoluteStart - workLine.absoluteStart) >> 0);
      
      afterLine = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[workIndex + 1];
      afterLine.setTextLength(((newLine.absoluteStart + newLine.textLength) - afterLine.absoluteStart) >> 0);
      
      afterLine.setAbsoluteStart((newLine.absoluteStart + newLine.textLength) >> 0);
      this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(workIndex + 1, 0, newLine);
    }
    damageStart = workLine.absoluteStart;
  } else if (workLine.textLength > newLine.textLength) {
    workLine.setTextLength((workLine.textLength - newLine.textLength) >> 0);
    
    workLine.setAbsoluteStart((newLine.absoluteStart + newLine.textLength) >> 0);
    workLine.damage("invalid");
    this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(workIndex, 0, newLine);
    damageStart = workLine.absoluteStart;
  } else {
    var /** @type {number} */ deleteCount = 1;
    if (workLine.textLength != newLine.textLength) {
      var /** @type {number} */ amtRemaining = ((newLine.textLength - workLine.textLength)) >> 0;
      var /** @type {number} */ nextLine = (workIndex + 1) >> 0;
      while (amtRemaining > 0) {
        afterLine = this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[nextLine];
        if (amtRemaining < afterLine.textLength) {
          afterLine.setTextLength((afterLine.textLength - amtRemaining) >> 0);
          afterLine.damage("invalid");
          break;
        } else {
          deleteCount++;
          amtRemaining -= afterLine.textLength;
          nextLine++;
          afterLine = nextLine < this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length ? this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[nextLine] : null;
        }
      }
      if (afterLine && afterLine.absoluteStart != newLine.absoluteStart + newLine.textLength) {
        afterLine.setAbsoluteStart((newLine.absoluteStart + newLine.textLength) >> 0);
        afterLine.damage("invalid");
        
      }
      damageStart = (newLine.absoluteStart + newLine.textLength) >> 0;
    }
    if (org.apache.royale.textLayout.compose.TextLineRecycler.textLineRecyclerEnabled) {
      var /** @type {org.apache.royale.textLayout.elements.IBackgroundManager} */ backgroundManager = this.textFlow.backgroundManager;
      for (var /** @type {number} */ recycleIdx = workIndex; recycleIdx < workIndex + deleteCount; recycleIdx++) {
        var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_compose_FlowComposerBase__lines[recycleIdx], org.apache.royale.textLayout.compose.ITextFlowLine, true).peekTextLine();
        if (textLine && !textLine.parent) {
          
          if (textLine.validity != "valid") {
            textLine.userData = null;
            org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(textLine);
            if (backgroundManager)
              backgroundManager.removeLineFromCache(textLine);
          }
        }
      }
    }
    this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.splice(workIndex, deleteCount, newLine);
  }
  if (this._damageAbsoluteStart > damageStart)
    this._damageAbsoluteStart = damageStart;
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.elements.IBackgroundManager}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.createBackgroundManager = function() {
  return null;
};


/**
 * @param {org.apache.royale.textLayout.elements.IListItemElement} listItemElement
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} curParaElement
 * @param {org.apache.royale.textLayout.compose.ISWFContext} swfContext
 * @param {number} totalStartIndent
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.createNumberLine = function(listItemElement, curParaElement, swfContext, totalStartIndent) {
  return org.apache.royale.textLayout.compose.utils.NumberlineUtil.createNumberLine(listItemElement, curParaElement, swfContext, totalStartIndent);
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.lines;


org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__lines = function() {
  return this.org_apache_royale_textLayout_compose_FlowComposerBase__lines;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.numLines;


org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__numLines = function() {
  return (this.org_apache_royale_textLayout_compose_FlowComposerBase__lines.length) >> 0;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.textFlow;


org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__textFlow = function() {
  return this._textFlow;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.damageAbsoluteStart;


org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__damageAbsoluteStart = function() {
  return this._damageAbsoluteStart;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.swfContext;


org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__swfContext = function() {
  return this._swfContext;
};


org.apache.royale.textLayout.compose.FlowComposerBase.prototype.set__swfContext = function(context) {
  if (context != this._swfContext) {
    if (this.textFlow) {
      var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ newBaseContext = org.apache.royale.textLayout.compose.utils.ContextUtil.computeBaseSWFContext(context);
      var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ oldBaseContext = org.apache.royale.textLayout.compose.utils.ContextUtil.computeBaseSWFContext(this._swfContext);
      this._swfContext = context;
      if (newBaseContext != oldBaseContext) {
        this.damage(0, this.textFlow.textLength, org.apache.royale.textLayout.compose.FlowDamageType.INVALID);
        this.textFlow.invalidateAllFormats();
      }
    }
    else
      this._swfContext = context;
  }
};


Object.defineProperties(org.apache.royale.textLayout.compose.FlowComposerBase.prototype, /** @lends {org.apache.royale.textLayout.compose.FlowComposerBase.prototype} */ {
/**
 * @type {Array}
 */
lines: {
get: org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__lines},
/**
 * @type {number}
 */
numLines: {
get: org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__numLines},
/**
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
textFlow: {
get: org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__textFlow},
/**
 * @type {number}
 */
damageAbsoluteStart: {
get: org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__damageAbsoluteStart},
/**
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
swfContext: {
get: org.apache.royale.textLayout.compose.FlowComposerBase.prototype.get__swfContext,
set: org.apache.royale.textLayout.compose.FlowComposerBase.prototype.set__swfContext}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FlowComposerBase', qName: 'org.apache.royale.textLayout.compose.FlowComposerBase', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'lines': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'},
        'numLines': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'},
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'},
        'damageAbsoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'},
        'swfContext': { type: 'org.apache.royale.textLayout.compose.ISWFContext', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'}
      };
    },
    methods: function () {
      return {
        'FlowComposerBase': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'},
        'getLineAt': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ]; }},
        'updateLengths': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'damage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ,'int', false ,'String', false ]; }},
        'isDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ]; }},
        'isPotentiallyDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ]; }},
        'findLineIndexAtPosition': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'findLineAtPosition': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'addLine': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'int', false ]; }},
        'createBackgroundManager': { type: 'org.apache.royale.textLayout.elements.IBackgroundManager', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase'},
        'createNumberLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.FlowComposerBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IListItemElement', false ,'org.apache.royale.textLayout.elements.IParagraphElement', false ,'org.apache.royale.textLayout.compose.ISWFContext', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.FlowComposerBase.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./FlowComposerBase.js.map
