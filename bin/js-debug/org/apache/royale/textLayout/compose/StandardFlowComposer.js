/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/StandardFlowComposer.as
 * org.apache.royale.textLayout.compose.StandardFlowComposer
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.StandardFlowComposer');
/* Royale Dependency List: org.apache.royale.core.IParentIUIBase,org.apache.royale.textLayout.compose.FlowDamageType,org.apache.royale.textLayout.compose.IComposer,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.container.ScrollPolicy,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.elements.BackgroundManager,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IContainerFormattedElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.events.CompositionCompleteEvent,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.utils.ComposeUtils,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.compose.FlowComposerBase');
goog.require('org.apache.royale.textLayout.compose.IFlowComposer');



/** 
 * Creates a StandardFlowComposer object. 
 *
 * <p>To use an StandardFlowComposer object, assign it to the
 * <code>flowComposer</code> property of a TextFlow object. Call the <code>updateAllControllers()</code>
 * method to lay out and display the text in the containers attached to the flow composer.</p>
 * 
 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.compose.FlowComposerBase}
 * @implements {org.apache.royale.textLayout.compose.IFlowComposer}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer = function() {
  
  this.org_apache_royale_textLayout_compose_StandardFlowComposer_lastBPDirectionScrollPosition = Number.NEGATIVE_INFINITY;
  org.apache.royale.textLayout.compose.StandardFlowComposer.base(this, 'constructor');
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList = [];
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing = false;
};
goog.inherits(org.apache.royale.textLayout.compose.StandardFlowComposer, org.apache.royale.textLayout.compose.FlowComposerBase);


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype._rootElement;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.org_apache_royale_textLayout_compose_StandardFlowComposer__composing;


/** 
 * Returns the absolute position of the first content element in the specified ContainerController object.
 *
 * <p>A position is calculated by counting the division between two characters or other elements of a text flow. 
 * The position preceding the first element of a flow is zero. An absolute position is the position
 * counting from the beginning of the flow.</p>
 * 
 * @asparam controller A ContainerController object associated with this flow composer.
 * @asreturn the position before the first character or graphic in the ContainerController.
 *
 *  
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @return {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.getAbsoluteStart = function(controller) {
  var /** @type {number} */ stopIdx = this.getControllerIndex(controller);
  
  var /** @type {number} */ rslt = this._rootElement.getAbsoluteStart();
  for (var /** @type {number} */ idx = 0; idx < stopIdx; idx++)
    rslt += (this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[idx].textLength) >> 0;
  return rslt;
};


/** @copy IFlowComposer#setRootElement()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITextFlow
 * @param {org.apache.royale.textLayout.elements.IContainerFormattedElement} newRootElement
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.setRootElement = function(newRootElement) {
  if (this._rootElement != newRootElement) {
    if (org.apache.royale.utils.Language.is(newRootElement, org.apache.royale.textLayout.elements.ITextFlow) && newRootElement.flowComposer != this)
      newRootElement.flowComposer = this; else {
      this.clearCompositionResults();
      this.detachAllContainers();
      this._rootElement = newRootElement;
      this._textFlow = this._rootElement ? this._rootElement.getTextFlow() : null;
      this.attachAllContainers();
    }
  }
};


/** @asprivate 
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.detachAllContainers = function() {
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ cont;
  var foreachiter0_target = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;
  for (var foreachiter0 in foreachiter0_target) 
  {
  cont = foreachiter0_target[foreachiter0];
  {
    cont.dispose();
  }}
  
};


/** @asprivate 
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.attachAllContainers = function() {
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ cont;
  var foreachiter1_target = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;
  for (var foreachiter1 in foreachiter1_target) 
  {
  cont = foreachiter1_target[foreachiter1];
  
    cont.setRootElement(this._rootElement);}
  
  if (this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.length > 0 && this._textFlow) {
    var /** @type {org.apache.royale.core.IParentIUIBase} */ curContainer;
    for (var /** @type {number} */ i = 0; i < this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.length; ++i) {
      curContainer = this.getControllerAt(i).container;
    }
  }
  this.clearCompositionResults();
};


/** @copy IFlowComposer#addController()
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.addController = function(controller) {
  
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.push(org.apache.royale.utils.Language.as(controller, org.apache.royale.textLayout.container.IContainerController, true));
  if (this.numControllers == 1) {
    this.attachAllContainers();
  } else {
    controller.setRootElement(this._rootElement);
    if (this.textFlow) {
      controller = this.getControllerAt((this.numControllers - 2) >> 0);
      var /** @type {number} */ damageStart = controller.absoluteStart;
      var /** @type {number} */ damageLen = controller.textLength;
      if (damageLen == 0) {
        if (damageStart != this.textFlow.textLength)
          damageLen++; else if (damageStart != 0) {
          damageStart--;
          damageLen++;
        }
      }
      if (damageLen)
        this.textFlow.damage(damageStart, damageLen, org.apache.royale.textLayout.compose.FlowDamageType.GEOMETRY, false);
    }
  }
};


/** @copy IFlowComposer#addControllerAt()
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {number} index
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.addControllerAt = function(controller, index) {
  
  this.detachAllContainers();
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.splice(index, 0, org.apache.royale.utils.Language.as(controller, org.apache.royale.textLayout.container.IContainerController, true));
  this.attachAllContainers();
};


/** Removes a trailing controller with no content without doing any damage 
 * @private
 * @param {number} index
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.org_apache_royale_textLayout_compose_StandardFlowComposer_fastRemoveController = function(index) {
  if (index == -1)
    return true;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ cont = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[index];
  if (!cont)
    return true;
  if (!this._textFlow || cont.absoluteStart == this._textFlow.textLength) {
    cont.setRootElement(null);
    this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.splice(index, 1);
    return true;
  }
  return false;
};


/** @copy IFlowComposer#removeController()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.removeController = function(controller) {
  var /** @type {number} */ index = this.getControllerIndex(controller);
  if (!this.org_apache_royale_textLayout_compose_StandardFlowComposer_fastRemoveController(index)) {
    this.detachAllContainers();
    this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.splice(index, 1);
    this.attachAllContainers();
  }
};


/** @copy IFlowComposer#removeControllerAt()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.removeControllerAt = function(index) {
  if (!this.org_apache_royale_textLayout_compose_StandardFlowComposer_fastRemoveController(index)) {
    this.detachAllContainers();
    this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.splice(index, 1);
    this.attachAllContainers();
  }
};


/** @copy IFlowComposer#removeAllControllers()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.removeAllControllers = function() {
  this.detachAllContainers();
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.splice(0, this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.length);
};


/** @copy IFlowComposer#getControllerAt()  
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.getControllerAt = function(index) {
  return this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[index];
};


/** @copy IFlowComposer#getControllerIndex()  
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @return {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.getControllerIndex = function(controller) {
  for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.length; idx++) {
    if (this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[idx] == controller)
      return idx;
  }
  return -1;
};


/** 
 * Returns the index of the controller containing the content at the specified position. 
 * 
 * <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
 * the value in <code>absolutePosition</code> is a position between the last character of one 
 * container and the first character of the next, then the preceding container is returned if
 * the <code>preferPrevious</code> parameter is set to <code>true</code> and the later container is returned if
 * the <code>preferPrevious</code> parameter is set to <code>false</code>.</p>
 *
 * <p>The method returns -1 if the content at the specified position is not in any container or is outside
 * the range of positions in the text flow.</p>
 * 
 * @asparam absolutePosition The position of the content for which the container index is sought.
 * @asparam preferPrevious Specifies which container index to return when the position is between the last element in 
 * one container and the first element in the next.
 * 
 * @asreturn 	the index of the container controller or -1 if not found.
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} preferPrevious
 * @return {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.findControllerIndexAtPosition = function(absolutePosition, preferPrevious) {
  preferPrevious = typeof preferPrevious !== 'undefined' ? preferPrevious : false;
  var /** @type {number} */ lo = 0;
  var /** @type {number} */ hi = (this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.length - 1) >> 0;
  while (lo <= hi) {
    var /** @type {number} */ mid = (Math.floor((lo + hi) / 2)) >> 0;
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ cont = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[mid];
    if (cont.absoluteStart <= absolutePosition) {
      if (preferPrevious) {
        if (cont.absoluteStart + cont.textLength >= absolutePosition) {
          while (mid != 0 && cont.absoluteStart == absolutePosition) {
            mid--;
            cont = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[mid];
          }
          return mid;
        }
      } else {
        if (cont.absoluteStart == absolutePosition && cont.textLength != 0) {
          while (mid != 0) {
            cont = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[mid - 1];
            if (cont.textLength != 0)
              break;
            mid--;
          }
          return mid;
        }
        if (cont.absoluteStart + cont.textLength > absolutePosition)
          return mid;
      }
      lo = (mid + 1) >> 0;
    }
    else
      hi = (mid - 1) >> 0;
  }
  return -1;
};


/** Clear whatever computed values are left from the last composition, in the flow composer and
 * in each of its controllers. @asprivate
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.clearCompositionResults = function() {
  this.initializeLines();
  var foreachiter2_target = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var cont = foreachiter2_target[foreachiter2];
  
    cont.clearCompositionResults();}
  
};


/** 
 * Composes the content of the root element and updates the display.  
 *
 * <p>Text layout is conducted in two phases: composition and display. In the composition phase,
 * the flow composer calculates how many lines are necessary to display the content as well as the position of these 
 * lines in the flow's display containers. In the display phase, 
 * the flow composer updates the display object children of its containers. The <code>updateAllControllers()</code>
 * method initiates both phases in sequence. The StandardFlowComposer keeps track of changes to content
 * so that a full cycle of composition and display is only performed when necessary.</p>
 * 
 * <p>This method updates all the text lines and the display list immediately and synchronously.</p>
 *
 * <p>If the contents of any container is changed, the method returns <code>true</code>.</p>
 * 
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.updateAllControllers = function() {
  return this.updateToController();
};


/** 
 * Composes and updates the display up to and including the container at the specified index.
 * 
 * <p>The <code>updateToController()</code> method composes the content and 
 * updates the display of all containers up to and including the container at the specified index.
 * For example, if you have a chain of 20 containers and specify an index of 10, 
 * <code>updateToController()</code> ensures that the first through the tenth (indexes 0-9) 
 * containers are composed and displayed. Composition stops at that point. If <code>controllerIndex</code> 
 * is -1 (or not specified), then all containers are updated.</p>
 *
 * <p>This method updates all the text lines and the display list immediately and synchronously.</p>
 * 
 * <p>If the contents of any container is changed, the method returns <code>true</code>.</p>
 * 
 * @asparam index index of the last container to update (by default updates all containers)
 * @asreturn <code>true</code>, if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITableCellElement
 *
 * @param {number=} index
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.updateToController = function(index) {
  index = typeof index !== 'undefined' ? index : 2147483647;
  if (this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing)
    return false;
  var /** @type {number} */ cellHeight = 0;
  if (this.textFlow.nestedInTable()) {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this.getControllerAt(0);
    if (controller)
      cellHeight = controller.container.height;
  }
  var /** @type {org.apache.royale.textLayout.edit.ISelectionManager} */ sm = this.textFlow.interactionManager;
  if (sm)
    sm.flushPendingOperations();
  
  this.org_apache_royale_textLayout_compose_StandardFlowComposer_internalCompose(-1, index);
  var /** @type {boolean} */ shapesDamaged = this.areShapesDamaged();
  if (shapesDamaged)
    this.org_apache_royale_textLayout_compose_StandardFlowComposer_updateCompositionShapes();
  if (cellHeight && controller.container.height != cellHeight) {
    var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = this.textFlow.parentElement.table;
    table.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, table, 0, table.textLength);
    table.getTextFlow().flowComposer.updateAllControllers();
    if (sm && sm.focused)
      controller.setFocus();
  }
  if (sm)
    sm.refreshSelection();
  return shapesDamaged;
};


/** 
 * Sets the focus to the container that contains the location specified by the <code>absolutePosition</code>
 * parameter. 
 *
 * <p>The StandardFlowComposer calls the <code>setFocus()</code> method of the ContainerController object
 * containing the specified text flow position.</p>
 * 
 * @asparam absolutePosition Specifies the position in the text flow of the container to receive focus.
 * @asparam leanLeft If true and the position is before the first character in a container, sets focus to the end of
 *  the previous container.
 * 
 * @see flash.display.Stage#focus
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {boolean=} leanLeft
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.setFocus = function(absolutePosition, leanLeft) {
  leanLeft = typeof leanLeft !== 'undefined' ? leanLeft : false;
  var /** @type {number} */ idx = this.findControllerIndexAtPosition(absolutePosition, leanLeft);
  if (idx == -1)
    idx = (this.numControllers - 1) >> 0;
  if (idx != -1)
    this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList[idx].setFocus();
};


/**
 * Called by the TextFlow when the interaction manager changes. 
 * 
 * <p>This function is called automatically. Your code does not typically need to call this
 * method. Classes that extend StandardFlowComposer can override this method to update
 * event listeners and other properties that depend on the interaction manager.</p>
 * 
 * @asparam newInteractionManager The new ISelectionManager instance.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.edit.ISelectionManager} newInteractionManager
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.interactionManagerChanged = function(newInteractionManager) {
  var foreachiter3_target = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;
  for (var foreachiter3 in foreachiter3_target) 
  {
  var controller = foreachiter3_target[foreachiter3];
  
    controller.interactionManagerChanged(newInteractionManager);}
  
};


/**
 * @private
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.org_apache_royale_textLayout_compose_StandardFlowComposer_updateCompositionShapes = function() {
  var foreachiter4_target = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var controller = foreachiter4_target[foreachiter4];
  
    controller.updateCompositionShapes();}
  
};


/** @asprivate Override required because we may be damaged if the last container has scrolling 
 * @override
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.isPotentiallyDamaged = function(absolutePosition) {
  if (!org.apache.royale.textLayout.compose.StandardFlowComposer.superClass_.isPotentiallyDamaged.apply(this, [absolutePosition])) {
    if (absolutePosition == this._textFlow.textLength) {
      var /** @type {org.apache.royale.textLayout.container.IContainerController} */ container = this.getControllerAt((this.numControllers - 1) >> 0);
      if (container && (container.verticalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF || container.horizontalScrollPolicy != org.apache.royale.textLayout.container.ScrollPolicy.OFF))
        return true;
    }
    return false;
  }
  return true;
};


/** Returns true if composition is necessary, false otherwise 
 * @protected
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.preCompose = function() {
  
  this.rootElement.preCompose();
  
  if (this.numLines == 0)
    this.initializeLines();
  return this.isDamaged((this.rootElement.getAbsoluteStart() + this.rootElement.textLength) >> 0);
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.compose.IComposer}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.getComposeState = function() {
  return org.apache.royale.textLayout.utils.ComposeUtils.getComposeState();
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.compose.IComposer} state
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.releaseComposeState = function(state) {
  org.apache.royale.textLayout.utils.ComposeUtils.releaseComposeState(state);
};


/** @asprivate Return the first damaged controller 
 * @param {number} composeToPosition
 * @param {number} controllerEndIndex
 * @return {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.callTheComposer = function(composeToPosition, controllerEndIndex) {
  if (this._damageAbsoluteStart == this.rootElement.getAbsoluteStart() + this.rootElement.textLength)
    return this.getControllerAt((this.numControllers - 1) >> 0);
  var /** @type {org.apache.royale.textLayout.compose.IComposer} */ state = this.getComposeState();
  var /** @type {number} */ lastComposedPosition = state.composeTextFlow(this.textFlow, composeToPosition, controllerEndIndex);
  if (this._damageAbsoluteStart < lastComposedPosition)
    this._damageAbsoluteStart = lastComposedPosition;
  
  this.finalizeLinesAfterCompose();
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ startController = state.startController;
  this.releaseComposeState(state);
  if (this.textFlow.hasEventListener(org.apache.royale.textLayout.events.CompositionCompleteEvent.COMPOSITION_COMPLETE))
    this.textFlow.dispatchEvent(new org.apache.royale.textLayout.events.CompositionCompleteEvent(org.apache.royale.textLayout.events.CompositionCompleteEvent.COMPOSITION_COMPLETE, false, false, this.textFlow, 0, lastComposedPosition));
  
  return startController;
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.org_apache_royale_textLayout_compose_StandardFlowComposer_lastBPDirectionScrollPosition;


/**
 * @private
 * @param {string} bp
 * @param {org.apache.royale.textLayout.container.IContainerController} cont
 * @return {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.getBPDirectionScrollPosition = function(bp, cont) {
  return bp == org.apache.royale.textLayout.formats.BlockProgression.TB ? cont.verticalScrollPosition : cont.horizontalScrollPosition;
};


/** Bottleneck function for all types of compose. Does the work of compose, no matter how it is called. @asprivate 
 * @asreturn first controller with changed shapes
 * @private
 * @param {number=} composeToPosition
 * @param {number=} composeToControllerIndex
 * @return {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.org_apache_royale_textLayout_compose_StandardFlowComposer_internalCompose = function(composeToPosition, composeToControllerIndex) {
  composeToPosition = typeof composeToPosition !== 'undefined' ? composeToPosition : -1;
  composeToControllerIndex = typeof composeToControllerIndex !== 'undefined' ? composeToControllerIndex : -1;
  var /** @type {string} */ bp;
  var /** @type {org.apache.royale.textLayout.edit.ISelectionManager} */ sm = this.textFlow.interactionManager;
  if (sm)
    sm.flushPendingOperations();
  
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing = true;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ startController;
  try {
    if (this.preCompose()) {
      if (this.textFlow && this.numControllers != 0) {
        var /** @type {number} */ damageLimit = this._textFlow.textLength;
        composeToControllerIndex = (Math.min(composeToControllerIndex, this.numControllers - 1)) >> 0;
        if (composeToPosition != -1 || composeToControllerIndex != -1) {
          if (composeToControllerIndex < 0) {
            if (composeToPosition >= 0)
              damageLimit = composeToPosition;
          } else {
            var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = this.getControllerAt(composeToControllerIndex);
            if (controller.textLength != 0)
              damageLimit = (controller.absoluteStart + controller.textLength) >> 0;
            if (composeToControllerIndex == this.numControllers - 1) {
              bp = org.apache.royale.utils.Language.string(this.rootElement.computedFormat.blockProgression);
              var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ lastVisibleLine = controller.getLastVisibleLine();
              if (lastVisibleLine && org.apache.royale.textLayout.compose.StandardFlowComposer.getBPDirectionScrollPosition(bp, controller) == this.org_apache_royale_textLayout_compose_StandardFlowComposer_lastBPDirectionScrollPosition)
                damageLimit = (lastVisibleLine.absoluteStart + lastVisibleLine.textLength) >> 0;
            }
          }
        }
        this.org_apache_royale_textLayout_compose_StandardFlowComposer_lastBPDirectionScrollPosition = Number.NEGATIVE_INFINITY;
        if (this._damageAbsoluteStart < damageLimit) {
          startController = this.callTheComposer(composeToPosition, composeToControllerIndex);
          if (startController) {
            var /** @type {number} */ idx = this.getControllerIndex(startController);
            while (idx < this.numControllers)
              this.getControllerAt(idx++).shapesInvalid = true;
          }
        }
      }
    }
  } catch (e) {
    this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing = false;
    throw e;
  }
  this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing = false;
  if (controller && composeToControllerIndex == this.numControllers - 1) {
    this.org_apache_royale_textLayout_compose_StandardFlowComposer_lastBPDirectionScrollPosition = org.apache.royale.textLayout.compose.StandardFlowComposer.getBPDirectionScrollPosition(bp, controller);
  }
  return startController;
};


/** @asprivate 
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.areShapesDamaged = function() {
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ cont;
  var foreachiter5_target = this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList;
  for (var foreachiter5 in foreachiter5_target) 
  {
  cont = foreachiter5_target[foreachiter5];
  {
    if (cont.shapesInvalid)
      return true;
  }}
  
  return false;
};


/** 
 * Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
 * lines in the flow's display containers.
 * 
 * <p>The <code>compose()</code> method only composes content if it has changed since the last composition operation. 
 * Results are saved so that subsequent
 * calls to <code>compose()</code> or <code>updateAllControllers()</code> do not perform an additional recomposition
 * if the flow content has not changed.</p>
 * 
 * <p>If the contents of any container have changed, the method returns <code>true</code>.</p>
 * 
 * @asreturn true if anything changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see #updateAllControllers()
 * @see #updateToController()
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.compose = function() {
  return this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing ? false : this.org_apache_royale_textLayout_compose_StandardFlowComposer_internalCompose() != null;
};


/** @copy IFlowComposer#composeToPosition()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number=} absolutePosition
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.composeToPosition = function(absolutePosition) {
  absolutePosition = typeof absolutePosition !== 'undefined' ? absolutePosition : 2147483647;
  return this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing ? false : this.org_apache_royale_textLayout_compose_StandardFlowComposer_internalCompose(absolutePosition, -1) != null;
};


/** @copy IFlowComposer#composeToController()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number=} index
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.composeToController = function(index) {
  index = typeof index !== 'undefined' ? index : 2147483647;
  return this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing ? false : this.org_apache_royale_textLayout_compose_StandardFlowComposer_internalCompose(-1, index) != null;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.createBackgroundManager = function() {
  return new org.apache.royale.textLayout.elements.BackgroundManager();
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.composing;


org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.get__composing = function() {
  return this.org_apache_royale_textLayout_compose_StandardFlowComposer__composing;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.rootElement;


org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.get__rootElement = function() {
  return this._rootElement;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.numControllers;


org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.get__numControllers = function() {
  return (this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList ? this.org_apache_royale_textLayout_compose_StandardFlowComposer__controllerList.length : 0) >> 0;
};


Object.defineProperties(org.apache.royale.textLayout.compose.StandardFlowComposer.prototype, /** @lends {org.apache.royale.textLayout.compose.StandardFlowComposer.prototype} */ {
/**
 * @type {boolean}
 */
composing: {
get: org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.get__composing},
/**
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
rootElement: {
get: org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.get__rootElement},
/**
 * @type {number}
 */
numControllers: {
get: org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.get__numControllers}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'StandardFlowComposer', qName: 'org.apache.royale.textLayout.compose.StandardFlowComposer', kind: 'class' }], interfaces: [org.apache.royale.textLayout.compose.IFlowComposer] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'composing': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'rootElement': { type: 'org.apache.royale.textLayout.elements.IContainerFormattedElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'numControllers': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'}
      };
    },
    methods: function () {
      return {
        'StandardFlowComposer': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'getAbsoluteStart': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'setRootElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IContainerFormattedElement', false ]; }},
        'detachAllContainers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'attachAllContainers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'addController': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'addControllerAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'removeController': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'removeControllerAt': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'removeAllControllers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'getControllerAt': { type: 'org.apache.royale.textLayout.container.IContainerController', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'getControllerIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ]; }},
        'findControllerIndexAtPosition': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'clearCompositionResults': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'updateAllControllers': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'updateToController': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', true ]; }},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', false ,'Boolean', true ]; }},
        'interactionManagerChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.edit.ISelectionManager', false ]; }},
        'isPotentiallyDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', false ]; }},
        'getComposeState': { type: 'org.apache.royale.textLayout.compose.IComposer', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'releaseComposeState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'org.apache.royale.textLayout.compose.IComposer', false ]; }},
        'callTheComposer': { type: 'org.apache.royale.textLayout.container.IContainerController', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'areShapesDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'compose': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'},
        'composeToPosition': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', true ]; }},
        'composeToController': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer', parameters: function () { return [ 'int', true ]; }},
        'createBackgroundManager': { type: 'org.apache.royale.textLayout.elements.IBackgroundManager', declaredBy: 'org.apache.royale.textLayout.compose.StandardFlowComposer'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.StandardFlowComposer.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./StandardFlowComposer.js.map
