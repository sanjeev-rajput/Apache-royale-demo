/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/ITextFlowLine.as
 * org.apache.royale.textLayout.compose.ITextFlowLine
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.ITextFlowLine');
/* Royale Dependency List: org.apache.royale.core.IParentIUIBase,org.apache.royale.geom.Rectangle,org.apache.royale.graphics.ICompoundGraphic,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.edit.SelectionFormat,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.formats.ITextLayoutFormat,XML*/

goog.require('org.apache.royale.textLayout.compose.IVerticalJustificationLine');



/**
 * @interface
 * @extends {org.apache.royale.textLayout.compose.IVerticalJustificationLine}
 */
org.apache.royale.textLayout.compose.ITextFlowLine = function() {
};
/**  * @type {boolean}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.composable;
/**
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} paragraph
 * @param {number=} outerTargetWidth
 * @param {number=} lineOffset
 * @param {number=} absoluteStart
 * @param {number=} numChars
 * @param {org.apache.royale.text.engine.ITextLine=} textLine
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.initialize = function(paragraph, outerTargetWidth, lineOffset, absoluteStart, numChars, textLine) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.heightTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.outerTargetWidthTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.ascentTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.targetWidthTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.textHeightTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.lineOffsetTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.lineExtentTW;
/**  * @type {boolean}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.hasGraphicElement;
/**  * @type {boolean}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.hasNumberLine;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.numberLinePosition;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.textHeight;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.xTW;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.yTW;
/**
 * @param {number} lineX
 * @param {number} lineY
 * @param {number} lineHeight
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.setXYAndHeight = function(lineX, lineY, lineHeight) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.location;
/**  * @type {org.apache.royale.textLayout.container.IContainerController}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.controller;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.columnIndex;
/**
 * @param {org.apache.royale.textLayout.container.IContainerController} cont
 * @param {number} colNumber
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.setController = function(cont, colNumber) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.lineOffset;
/**  * @type {org.apache.royale.textLayout.elements.IParagraphElement}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.paragraph;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.absoluteStart;
/**
 * @param {number} val
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.setAbsoluteStart = function(val) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.textBlockStart;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.textLength;
/**
 * @param {number} val
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.setTextLength = function(val) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.spaceBefore;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.spaceAfter;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.outerTargetWidth;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.targetWidth;
/**
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.getBounds = function() {
};
/**  * @type {string}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.validity;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.unjustifiedTextWidth;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.lineExtent;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.accumulatedLineExtent;
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.accumulatedMinimumStart;
/**  * @type {string}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.alignment;
/**
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.isDamaged = function() {
};
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.clearDamage = function() {
};
/**
 * @param {string} damageType
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.damage = function(damageType) {
};
/**
 * @param {string} wmode
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {number}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.testLineVisible = function(wmode, x, y, w, h) {
};
/**
 * @param {string} wmode
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.oldTestLineVisible = function(wmode, x, y, w, h) {
};
/**
 * @param {string} wmode
 * @param {number} bndsx
 * @param {number} bndsy
 * @param {number} bndsw
 * @param {number} bndsh
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.cacheLineBounds = function(wmode, bndsx, bndsy, bndsw, bndsh) {
};
/**
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.hasLineBounds = function() {
};
/**  * @type {boolean}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.textLineExists;
/**
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.peekTextLine = function() {
};
/**
 * @param {boolean=} forceValid
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.getTextLine = function(forceValid) {
};
/**
 * @param {org.apache.royale.text.engine.ITextBlock} textBlock
 * @param {org.apache.royale.text.engine.ITextLine} previousLine
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.recreateTextLine = function(textBlock, previousLine) {
};
/**
 * @param {string} bp
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.createShape = function(bp, textLine) {
};
/**
 * @param {string} blockProgression
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.createAdornments = function(blockProgression, elem, elemStart, textLine, numberLine) {
};
/**
 * @param {string} bp
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @return {number}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.getLineLeading = function(bp, elem, elemStart) {
};
/**
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.getLineTypographicAscent = function(elem, elemStart, textLine) {
};
/**
 * @param {string} bp
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} elem
 * @param {number} elemStart
 * @param {org.apache.royale.textLayout.compose.ISWFContext} swfContext
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} effectiveListMarkerFormat
 * @param {org.apache.royale.text.engine.ITextLine=} numberLine
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.getCSSLineBox = function(bp, elem, elemStart, swfContext, effectiveListMarkerFormat, numberLine) {
};
/**
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {Array} rectArray
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {string} blockProgression
 * @param {Array} heightAndAdj
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.calculateSelectionBounds = function(textLine, rectArray, begIdx, endIdx, blockProgression, heightAndAdj) {
};
/**
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @return {Array}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.getRomanSelectionHeightAndVerticalAdjustment = function(prevLine, nextLine) {
};
/**
 * @param {org.apache.royale.geom.Rectangle} rect
 * @param {boolean} constrainShape
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.convertLineRectToContainer = function(rect, constrainShape) {
};
/**
 * @param {org.apache.royale.graphics.ICompoundGraphic} selObj
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.hiliteBlockSelection = function(selObj, selFormat, container, begIdx, endIdx, prevLine, nextLine) {
};
/**
 * @param {org.apache.royale.textLayout.edit.SelectionFormat} selFormat
 * @param {number} idx
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.hilitePointSelection = function(selFormat, idx, container, prevLine, nextLine) {
};
/**
 * @param {number} idx
 * @param {org.apache.royale.core.IParentIUIBase} container
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @param {boolean} constrainSelRect
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.computePointSelectionRectangle = function(idx, container, prevLine, nextLine, constrainSelRect) {
};
/**
 * @param {org.apache.royale.geom.Rectangle} scrollRect
 * @param {number} begIdx
 * @param {number} endIdx
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} prevLine
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} nextLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.selectionWillIntersectScrollRect = function(scrollRect, begIdx, endIdx, prevLine, nextLine) {
};
/**  * @type {number}
 */org.apache.royale.textLayout.compose.ITextFlowLine.prototype.adornCount;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ITextFlowLine', qName: 'org.apache.royale.textLayout.compose.ITextFlowLine', kind: 'interface' }], interfaces: [org.apache.royale.textLayout.compose.IVerticalJustificationLine] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'composable': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'heightTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'outerTargetWidthTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'ascentTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'targetWidthTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'textHeightTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'lineOffsetTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'lineExtentTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'hasGraphicElement': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'hasNumberLine': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'numberLinePosition': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'textHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'xTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'yTW': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'location': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'controller': { type: 'org.apache.royale.textLayout.container.IContainerController', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'columnIndex': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'lineOffset': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'paragraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'absoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'textBlockStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'textLength': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'spaceBefore': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'spaceAfter': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'outerTargetWidth': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'targetWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'validity': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'unjustifiedTextWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'lineExtent': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'accumulatedLineExtent': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'accumulatedMinimumStart': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'alignment': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'textLineExists': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'adornCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'}
      };
    },
    methods: function () {
      return {
        'initialize': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IParagraphElement', false ,'Number', true ,'Number', true ,'int', true ,'int', true ,'org.apache.royale.text.engine.ITextLine', true ]; }},
        'setXYAndHeight': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'setController': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.container.IContainerController', false ,'int', false ]; }},
        'setAbsoluteStart': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'int', false ]; }},
        'setTextLength': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'int', false ]; }},
        'getBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'isDamaged': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'clearDamage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'damage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ]; }},
        'testLineVisible': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'int', false ,'int', false ,'int', false ,'int', false ]; }},
        'oldTestLineVisible': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'int', false ,'int', false ,'int', false ,'int', false ]; }},
        'cacheLineBounds': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'hasLineBounds': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'peekTextLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine'},
        'getTextLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'Boolean', true ]; }},
        'recreateTextLine': { type: 'org.apache.royale.text.engine.ITextLine', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.text.engine.ITextBlock', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'createShape': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'createAdornments': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ,'org.apache.royale.text.engine.ITextLine', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'getLineLeading': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ]; }},
        'getLineTypographicAscent': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        'getCSSLineBox': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowLeafElement', false ,'int', false ,'org.apache.royale.textLayout.compose.ISWFContext', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.text.engine.ITextLine', true ]; }},
        'calculateSelectionBounds': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ,'Array', false ,'int', false ,'int', false ,'String', false ,'Array', false ]; }},
        'getRomanSelectionHeightAndVerticalAdjustment': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }},
        'convertLineRectToContainer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ,'Boolean', false ]; }},
        'hiliteBlockSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.graphics.ICompoundGraphic', false ,'org.apache.royale.textLayout.edit.SelectionFormat', false ,'org.apache.royale.core.IParentIUIBase', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }},
        'hilitePointSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionFormat', false ,'int', false ,'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }},
        'computePointSelectionRectangle': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'int', false ,'org.apache.royale.core.IParentIUIBase', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'Boolean', false ]; }},
        'selectionWillIntersectScrollRect': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.ITextFlowLine', parameters: function () { return [ 'org.apache.royale.geom.Rectangle', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.ITextFlowLine.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ITextFlowLine.js.map
