/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/compose/BaseCompose.as
 * org.apache.royale.textLayout.compose.BaseCompose
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.compose.BaseCompose');
/* Royale Dependency List: org.apache.royale.core.IParentIUIBase,org.apache.royale.geom.Matrix,org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.Constants,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.engine.TextBaseline,org.apache.royale.text.engine.TextLineCreationResult,org.apache.royale.textLayout.compose.FloatCompositionData,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.compose.ITextFlowTableBlock,org.apache.royale.textLayout.compose.IVerticalJustificationLine,org.apache.royale.textLayout.compose.Parcel,org.apache.royale.textLayout.compose.ParcelList,org.apache.royale.textLayout.compose.SWFContext,org.apache.royale.textLayout.compose.Slug,org.apache.royale.textLayout.compose.TextFlowLineLocation,org.apache.royale.textLayout.compose.TextLineRecycler,org.apache.royale.textLayout.compose.VerticalJustifier,org.apache.royale.textLayout.compose.utils.TextLineUtil,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IContainerFormattedElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IInlineGraphicElement,org.apache.royale.textLayout.elements.ILinkElement,org.apache.royale.textLayout.elements.IListElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableColElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITableRowElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.LeadingUtils,org.apache.royale.textLayout.elements.OverflowPolicy,org.apache.royale.textLayout.formats.BaselineOffset,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.BreakStyle,org.apache.royale.textLayout.formats.ClearFloats,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.Float,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.LeadingModel,org.apache.royale.textLayout.formats.ListStylePosition,org.apache.royale.textLayout.formats.TextAlign,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.formats.VerticalAlign,org.apache.royale.textLayout.utils.BackgroundUtil,org.apache.royale.textLayout.utils.LocaleUtil,org.apache.royale.textLayout.utils.Twips,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.Language,XML*/
goog.provide('org.apache.royale.textLayout.compose.BaseCompose.AlignData');
goog.provide('org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment');

goog.require('org.apache.royale.textLayout.compose.IComposer');



/**
 * @constructor
 * @implements {org.apache.royale.textLayout.compose.IComposer}
 */
org.apache.royale.textLayout.compose.BaseCompose = function() {

this._lineSlug = new org.apache.royale.textLayout.compose.Slug();
};


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.BaseCompose.AlignData}
 */
org.apache.royale.textLayout.compose.BaseCompose._savedAlignData;


/**
 * @private
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} tfl
 * @return {org.apache.royale.textLayout.compose.BaseCompose.AlignData}
 */
org.apache.royale.textLayout.compose.BaseCompose.createAlignData = function(tfl) {
  if (org.apache.royale.textLayout.compose.BaseCompose._savedAlignData) {
    var /** @type {org.apache.royale.textLayout.compose.BaseCompose.AlignData} */ rslt = org.apache.royale.textLayout.compose.BaseCompose._savedAlignData;
    rslt.textFlowLine = tfl;
    org.apache.royale.textLayout.compose.BaseCompose._savedAlignData = null;
    return rslt;
  }
  return new org.apache.royale.textLayout.compose.BaseCompose.AlignData(tfl);
};


/**
 * @private
 * @param {org.apache.royale.textLayout.compose.BaseCompose.AlignData} ad
 */
org.apache.royale.textLayout.compose.BaseCompose.releaseAlignData = function(ad) {
  ad.textLine = null;
  ad.textFlowLine = null;
  org.apache.royale.textLayout.compose.BaseCompose._savedAlignData = ad;
};


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.ParcelList}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._parcelList;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__correctTextLength = false;


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.IFlowLeafElement}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curElement;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curElementStart = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curElementOffset = 0;


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curParaElement;


/**
 * @protected
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curParaFormat;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curParaStart = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curLineStart = 0;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel = "";


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._lastLineLeadingModel = "";


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._lastLineLeading;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._lastLineDescent;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._paragraphSpaceCarried;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._verticalSpaceCarried;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._blockProgression;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._atColumnStart;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._textIndent;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__controllerTop;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__controllerRight;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._contentLogicalExtent;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._contentCommittedExtent;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._contentCommittedHeight;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._workingContentLogicalExtent;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._workingContentExtent;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._workingContentHeight;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._workingTotalDepth;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._workingParcelIndex = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._workingParcelLogicalTop;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._accumulatedMinimumStart;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._parcelLogicalTop;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._parcelLeft;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._parcelTop;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._parcelRight;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._parcelBottom;


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._textFlow;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__releaseLineCreationData;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.IFlowComposer}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._flowComposer;


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.IContainerFormattedElement}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._rootElement;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._stopComposePos = 0;


/**
 * @protected
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._startController;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._startComposePosition = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._controllerVisibleBoundsXTW = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._controllerVisibleBoundsYTW = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._controllerVisibleBoundsWidthTW = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._controllerVisibleBoundsHeightTW = 0;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._forceILGs;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._lastGoodStart = 0;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._linePass = 0;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._paragraphContainsVisibleLines;


/**
 * @protected
 * @nocollapse
 * @type {org.apache.royale.textLayout.compose.Slug}
 */
org.apache.royale.textLayout.compose.BaseCompose._savedLineSlug;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.Slug}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._lineSlug;


/**
 * @protected
 * @nocollapse
 * @type {org.apache.royale.textLayout.compose.Slug}
 */
org.apache.royale.textLayout.compose.BaseCompose._floatSlug;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._pushInFloats;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__alignLines;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.Parcel}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curParcel;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curParcelStart = 0;


/**
 * @protected
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curInteractiveObjects = null;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._measuring;


/**
 * @protected
 * @type {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._curLine;


/**
 * @protected
 * @type {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._previousLine;


/**
 * @protected
 * @type {org.apache.royale.textLayout.elements.IListItemElement}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype._listItemElement;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose__firstLineDescentAndLeading;


/**
 * @protected
 * @return {org.apache.royale.textLayout.compose.ParcelList}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.createParcelList = function() {
  return null;
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.compose.ParcelList} list
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.releaseParcelList = function(list) {
};


/** prevent any leaks. @asprivate 
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.releaseAnyReferences = function() {
  this._curElement = null;
  this._curParaElement = null;
  this._curParaFormat = null;
  this._flowComposer = null;
  this._parcelList = null;
  this._rootElement = null;
  this._startController = null;
  this._textFlow = null;
  this._previousLine = null;
  this._curLine = null;
};


/** Initialize for a composition that will compose up through the controllerEndIndex, or all the way to the end of the flow
 * @asparam composer
 * @asparam composeToPosition 	-1 means not specified.  0 means request to compose nothing, >0 specifies a position to force compose to
 * @asparam controllerStartIndex	index of the first controller to compose for, derived class allows -1 for default 
 * @asparam controllerEndIndex	index of the last controller to compose for, or -1 to compose through all controllers
 * @protected
 * @param {org.apache.royale.textLayout.compose.IFlowComposer} composer
 * @param {number} composeToPosition
 * @param {number} controllerStartIndex
 * @param {number} controllerEndIndex
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.initializeForComposer = function(composer, composeToPosition, controllerStartIndex, controllerEndIndex) {
  
  if (!org.apache.royale.textLayout.compose.BaseCompose._savedLineSlug)
    this._lineSlug = new org.apache.royale.textLayout.compose.Slug(); else {
    this._lineSlug = org.apache.royale.textLayout.compose.BaseCompose._savedLineSlug;
    org.apache.royale.textLayout.compose.BaseCompose._savedLineSlug = null;
  }
  this._parcelList = this.createParcelList();
  this._paragraphSpaceCarried = 0;
  this._blockProgression = org.apache.royale.utils.Language.string(composer.rootElement.computedFormat.blockProgression);
  this._stopComposePos = (composeToPosition >= 0 ? Math.min(this._textFlow.textLength, composeToPosition) : this._textFlow.textLength) >> 0;
  if (controllerStartIndex < 0)
    controllerStartIndex = 0;
  this._parcelList.beginCompose(composer, controllerStartIndex, controllerEndIndex, composeToPosition > 0);
  this._contentLogicalExtent = 0;
  this._contentCommittedExtent = 0;
  this._contentCommittedHeight = 0;
  this._accumulatedMinimumStart = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  this._parcelLogicalTop = NaN;
  this._linePass = 0;
  this._lastGoodStart = -1;
  if (this._pushInFloats)
    this._pushInFloats.length = 0;
  this._listItemElement = null;
};


/**
 * @royaleignorecoercion org.apache.royale.textLayout.elements.IParagraphElement
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ITextFlow
 * @private
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} elem
 * @param {number} absStart
 * @param {boolean=} isInTable
 * @param {number=} startChildIdx
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_composeBlockElement = function(elem, absStart, isInTable, startChildIdx) {
  isInTable = typeof isInTable !== 'undefined' ? isInTable : false;
  startChildIdx = typeof startChildIdx !== 'undefined' ? startChildIdx : -1;
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child;
  var /** @type {boolean} */ rslt;
  var /** @type {boolean} */ isInTableCell = false;
  if (elem && elem.className == "TextFlow" && elem.parentElement && elem.parentElement.className == "TableCellElement")
    isInTableCell = true;
  var /** @type {number} */ cellSpacing = 0;
  if (isInTableCell) {
    var /** @type {org.apache.royale.textLayout.elements.ITableCellElement} */ tableCell = elem.parentElement;
    var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = tableCell.table;
    cellSpacing = Number(table.cellSpacing != undefined ? table.cellSpacing : 0);
  }
  var /** @type {number} */ idx = 0;
  if (startChildIdx != -1)
    idx = startChildIdx;
  if (absStart != this._curElementStart + this._curElementOffset) {
    idx = elem.findChildIndexAtPosition(((this._curElementStart + this._curElementOffset) - absStart) >> 0);
    child = elem.getChildAt(idx);
    absStart += child.parentRelativeStart;
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ previousElement = this._textFlow.findLeaf((this._startComposePosition - 1) >> 0);
    if (previousElement) {
      var /** @type {Object} */ previousParagraph = previousElement.getParagraph();
      if (previousParagraph && previousParagraph != this._curElement.getParagraph())
        if (previousParagraph.paddingBottom != undefined)
          this._parcelList.addTotalDepth(Number(previousParagraph.paddingBottom));
    }
  }
  var /** @type {boolean} */ composeEntireElement = (absStart == this._curElementStart + this._curElementOffset);
  for (; idx < elem.numChildren && (absStart <= this._stopComposePos || !this.parcelList.atLast()); idx++) {
    child = elem.getChildAt(idx);
    if (child.computedFormat.clearFloats != org.apache.royale.textLayout.formats.ClearFloats.NONE) {
      var /** @type {number} */ adjustedDepth = this._curParcel.applyClear(org.apache.royale.utils.Language.string(child.computedFormat.clearFloats), this._parcelList.totalDepth, org.apache.royale.utils.Language.string(child.computedFormat.direction));
      this._parcelList.addTotalDepth(adjustedDepth);
      this._verticalSpaceCarried = 0;
    }
    var /** @type {number} */ boxLeftIndent;
    var /** @type {number} */ boxRightIndent;
    var /** @type {number} */ boxTopIndent;
    var /** @type {number} */ boxBottomIndent;
    if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
      boxLeftIndent = child.getEffectivePaddingTop() + child.getEffectiveBorderTopWidth() + child.getEffectiveMarginTop();
      boxRightIndent = child.getEffectivePaddingBottom() + child.getEffectiveBorderBottomWidth() + child.getEffectiveMarginBottom();
      boxTopIndent = child.getEffectivePaddingRight() + child.getEffectiveBorderRightWidth() + child.getEffectiveMarginRight();
      boxBottomIndent = child.getEffectivePaddingLeft() + child.getEffectiveBorderLeftWidth() + child.getEffectiveMarginLeft();
    } else {
      boxLeftIndent = child.getEffectivePaddingLeft() + child.getEffectiveBorderLeftWidth() + child.getEffectiveMarginLeft();
      boxRightIndent = child.getEffectivePaddingRight() + child.getEffectiveBorderRightWidth() + child.getEffectiveMarginRight();
      boxTopIndent = child.getEffectivePaddingTop() + child.getEffectiveBorderTopWidth() + child.getEffectiveMarginTop();
      boxBottomIndent = child.getEffectivePaddingBottom() + child.getEffectiveBorderBottomWidth() + child.getEffectiveMarginBottom();
      if (isInTableCell) {
        boxLeftIndent += cellSpacing;
        boxRightIndent += cellSpacing;
        boxTopIndent += cellSpacing;
        boxBottomIndent += cellSpacing;
      }
    }
    
    this._parcelList.pushLeftMargin(boxLeftIndent);
    this._parcelList.pushRightMargin(boxRightIndent);
    if (composeEntireElement && boxTopIndent > this._verticalSpaceCarried)
      this._parcelList.addTotalDepth(boxTopIndent - this._verticalSpaceCarried);
    this._verticalSpaceCarried = Math.max(boxTopIndent, 0);
    if (child.className == "ParagraphElement") {
      var /** @type {Object} */ para = child;
      if (!this._atColumnStart && para.computedFormat.columnBreakBefore == org.apache.royale.textLayout.formats.BreakStyle.ALWAYS) {
        this.advanceToNextParcel();
      }
      if (!(this._atColumnStart && this._parcelList.currentParcel != null && this._parcelList.currentParcel.columnIndex == 0) && para.computedFormat.containerBreakBefore == org.apache.royale.textLayout.formats.BreakStyle.ALWAYS) {
        this.advanceToNextContainer();
      }
      if (!this.composeParagraphElement(para, absStart)) {
        org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock(this._textFlow, elem);
        return false;
      }
      if (!(this._atColumnStart && this._parcelList.currentParcel != null && this._parcelList.currentParcel.columnIndex == 0) && para.computedFormat.containerBreakAfter == org.apache.royale.textLayout.formats.BreakStyle.ALWAYS) {
        this.advanceToNextContainer();
      }
      if (!this._atColumnStart && para.computedFormat.columnBreakAfter == org.apache.royale.textLayout.formats.BreakStyle.ALWAYS) {
        this.advanceToNextParcel();
      }
    } else if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.IListElement)) {
      rslt = this.org_apache_royale_textLayout_compose_BaseCompose_composeBlockElement(org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowGroupElement, true), absStart);
      if (!rslt) {
        org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock(this._textFlow, elem);
        return false;
      }
    } else if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.IListItemElement)) {
      var /** @type {org.apache.royale.textLayout.elements.IListItemElement} */ savedListItemElement = this._listItemElement;
      this._listItemElement = child;
      rslt = this.org_apache_royale_textLayout_compose_BaseCompose_composeBlockElement(org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowGroupElement, true), absStart);
      this._listItemElement = savedListItemElement;
      if (!rslt) {
        org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock(this._textFlow, elem);
        return false;
      }
    } else {
      if (!this.org_apache_royale_textLayout_compose_BaseCompose_composeBlockElement(org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowGroupElement, true), absStart)) {
        org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock(this._textFlow, elem);
        return false;
      }
    }
    if (boxBottomIndent > this._verticalSpaceCarried)
      this._parcelList.addTotalDepth(boxBottomIndent - this._verticalSpaceCarried);
    this._verticalSpaceCarried = Math.max(boxBottomIndent, 0);
    this._parcelList.popLeftMargin(boxLeftIndent);
    this._parcelList.popRightMargin(boxRightIndent);
    composeEntireElement = true;
    absStart += child.textLength;
  }
  var /** @type {string} */ className = elem.className;
  if (!(className == "TableElement" || className == "TableRowElement" || className == "TableCellElement"))
    org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock(this._textFlow, elem);
  return true;
};


/** @asprivate
 * Compose a entire table element
 * In  : TableElement, table's absStart position, isInTable
 * Out : Boolean value, composition result, true - successful, false - failed
 * @private
 * @param {org.apache.royale.textLayout.elements.ITableElement} tableElement
 * @param {number} absStart
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_composeTableElement = function(tableElement, absStart) {
  if (this._curLine && this._curLine.paragraph == this._curParaElement)
    var /** @type {number} */ spaceBefore = 0;
  else
    spaceBefore = Number(isNaN(this._curParaElement.computedFormat.paragraphSpaceBefore) ? 0 : this._curParaElement.computedFormat.paragraphSpaceBefore);
  spaceBefore = this._atColumnStart ? 0 : spaceBefore;
  var /** @type {number} */ spaceCarried = this._atColumnStart ? 0 : this._paragraphSpaceCarried;
  if (spaceBefore != 0 || spaceCarried != 0)
    this._parcelList.addTotalDepth(Math.max(spaceBefore, spaceCarried));
  this._paragraphSpaceCarried = 0;
  if (this._verticalSpaceCarried != 0)
    this._verticalSpaceCarried = 0;
  this._parcelList.getLineSlug(this._lineSlug, 0, 1, this._textIndent, this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR);
  tableElement.normalizeColumnWidths(this._lineSlug.width);
  tableElement.composeCells();
  var /** @type {number} */ totalRowHeight = 0;
  var /** @type {Array} */ curRow = tableElement.getNextRow();
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowTableBlock} */ curTableBlock = tableElement.getFirstBlock();
  curTableBlock.clear();
  curTableBlock.y = this._parcelList.totalDepth;
  var /** @type {number} */ adjustTop = isNaN(this._lastLineDescent) ? 0 : this._lastLineDescent;
  curTableBlock.y += adjustTop;
  curTableBlock.x = this._lineSlug.leftMargin;
  var /** @type {number} */ lineOffset = (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) ? this._lineSlug.leftMargin : this._lineSlug.rightMargin;
  curTableBlock.initialize(this._curParaElement, this._lineSlug.width, lineOffset - this._parcelList.insideListItemMargin, tableElement.getAbsoluteStart(), 1);
  var /** @type {boolean} */ blockToAdd = true;
  while (curRow) {
    var /** @type {number} */ rIdx = curRow[0].rowIndex;
    var /** @type {org.apache.royale.textLayout.elements.ITableRowElement} */ curRowElem = tableElement.getRowAt(rIdx);
    var /** @type {number} */ rowHeight = curRowElem.composedHeight;
    if (this._parcelList.currentParcel == null) {
      blockToAdd = false;
      break;
    }
    var foreachiter0_target = curRow;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var cell = foreachiter0_target[foreachiter0];
    {
      cell.y = totalRowHeight;
      var /** @type {org.apache.royale.textLayout.elements.ITableColElement} */ col = tableElement.getColumnAt(cell.colIndex);
      if (col) {
        cell.x = col.x;
      }
      tableElement.addCellToBlock(cell, curTableBlock);
    }}
    
    this._parcelList.addTotalDepth(rowHeight);
    curRow = tableElement.getNextRow();
    totalRowHeight += rowHeight;
  }
  if (this._parcelList.currentParcel && blockToAdd) {
    curTableBlock.height = totalRowHeight;
    this.endTableBlock(curTableBlock);
  }
  return true;
};


/** Called when we are finished composing a line, and it is committed. Handler for derived classes to override default behavior.  
 * @protected
 * @param {org.apache.royale.textLayout.compose.ITextFlowTableBlock} block
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.endTableBlock = function(block) {
  this._curLine = block;
  block.setController(this._curParcel.controller, this._curParcel.columnIndex);
  org.apache.royale.textLayout.utils.BackgroundUtil.collectTableBlock(this._textFlow, block, this._parcelList.currentParcel.controller);
  this._contentCommittedExtent = Math.max(this._contentCommittedExtent, this._workingContentExtent);
  this._contentCommittedHeight = Math.max(this._contentCommittedHeight, this._workingContentHeight);
  this._contentLogicalExtent = Math.max(this._contentLogicalExtent, this._workingContentLogicalExtent);
  if (!this._measuring)
    this._contentLogicalExtent = this._contentCommittedExtent;
  if (this._pushInFloats)
    this._pushInFloats.length = 0;
  this._atColumnStart = false;
  this._linePass = 0;
  if (!isNaN(this._workingParcelLogicalTop))
    this._parcelLogicalTop = this._workingParcelLogicalTop;
};


/**
 * Compose the flow into the text container. Starts at the root element,
 * and composes elements until either there are no more elements, or the
 * text container is full. It will compose only the lines which are
 * marked invalid, so that existing lines that are unchanged are not
 * recomposed.
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {number} composeToPosition
 * @param {number} controllerEndIndex
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeTextFlow = function(textFlow, composeToPosition, controllerEndIndex) {
  this._textFlow = textFlow;
  if (this._textFlow && this._textFlow.backgroundManager)
    this._textFlow.backgroundManager.clearBlockRecord();
  this.org_apache_royale_textLayout_compose_BaseCompose__releaseLineCreationData = textFlow.configuration.releaseLineCreationData;
  this._flowComposer = this._textFlow.flowComposer;
  this._rootElement = textFlow;
  this._curElementOffset = 0;
  this._curElement = this._rootElement.getFirstLeaf();
  this._curElementStart = 0;
  this._curParcel = null;
  this.initializeForComposer(this._flowComposer, composeToPosition, -1, controllerEndIndex);
  this.org_apache_royale_textLayout_compose_BaseCompose_resetControllerBounds();
  this._curElement = this._textFlow.findLeaf(this._startComposePosition);
  this._curElementStart = this._curElement.getAbsoluteStart();
  this._curElementOffset = (this._startComposePosition - this._curElementStart) >> 0;
  for (var /** @type {number} */ cidx = (this._flowComposer.getControllerIndex(this._startController) + 1) >> 0; cidx <= controllerEndIndex; cidx++) {
    this._flowComposer.getControllerAt(cidx).clearCompositionResults();
  }
  if (this._startComposePosition <= this._startController.absoluteStart || !this.org_apache_royale_textLayout_compose_BaseCompose_advanceToComposeStartPosition()) {
    if (this._startComposePosition > this._startController.absoluteStart) {
      this._startComposePosition = this._startController.absoluteStart;
      this._curElement = this._textFlow.findLeaf(this._startComposePosition);
      this._curElementStart = this._curElement.getAbsoluteStart();
      this._curElementOffset = (this._startComposePosition - this._curElementStart) >> 0;
    }
    if (this._startComposePosition == this._curElement.getParagraph().getAbsoluteStart())
      this._previousLine = null; else {
      var /** @type {number} */ startLineIndex = this._flowComposer.findLineIndexAtPosition((this._startComposePosition - 1) >> 0);
      var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line = this._flowComposer.getLineAt(startLineIndex);
      this._previousLine = line.getTextLine(true);
    }
    this.advanceToNextParcel();
    if (this._curParcel)
      this._curParcel.controller.clearFloatsAt(0);
  }
  this._startController.clearComposedLines((this._curElementStart + this._curElementOffset) >> 0);
  this._curParcelStart = this._startController.absoluteStart;
  this.composeInternal(this._rootElement, 0);
  for (;;) {
    if (this.parcelList.atEnd()) {
      this.parcelHasChanged(null);
      break;
    }
    var /** @type {org.apache.royale.textLayout.compose.Parcel} */ nextParcel = this.parcelList.getParcelAt((this.parcelList.currentParcelIndex + 1) >> 0);
    this.advanceToNextParcel();
    this.org_apache_royale_textLayout_compose_BaseCompose__correctTextLength = false;
  }
  this.releaseParcelList(this._parcelList);
  this._parcelList = null;
  org.apache.royale.textLayout.compose.BaseCompose._savedLineSlug = this._lineSlug;
  return (this._curElementStart + this._curElementOffset) >> 0;
};


/**
 * @private
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_advanceToComposeStartPosition = function() {
  var /** @type {number} */ startLineIndex = this._flowComposer.findLineIndexAtPosition((this._startComposePosition - 1) >> 0);
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ curLine = this._flowComposer.getLineAt(startLineIndex);
  if (curLine.controller && curLine.controller.numFloats) {
    
    if (this._measuring)
      return false;
  }
  this._curLine = curLine;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ previousElement = (this._curElementOffset == 0) ? this._curElement.getPreviousLeaf() : this._curElement;
  this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel = previousElement.getParagraph().getEffectiveLeadingModel();
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ curElem = this._textFlow.findLeaf(this._curLine.absoluteStart);
  var /** @type {number} */ curElemStart = curElem.getAbsoluteStart();
  this.calculateLeadingParameters(curElem, curElemStart, org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(this._curLine.getTextLine()));
  if (this._startComposePosition == this._curElement.getParagraph().getAbsoluteStart())
    this._previousLine = null;
  else
    this._previousLine = this._curLine.getTextLine(true);
  
  
  this._paragraphSpaceCarried = this._curLine.spaceAfter;
  this.commitLastLineState(this._curLine);
  var /** @type {number} */ startParcel = (this._curLine.columnIndex == -1 ? 0 : this._curLine.columnIndex) >> 0;
  this._curParcel = this._parcelList.currentParcel;
  var /** @type {number} */ floatIndex = 0;
  for (var /** @type {number} */ parcelIndex = -1; parcelIndex < startParcel; ++parcelIndex) {
    this.advanceToNextParcel();
    this._curParcelStart = this._curParcel.controller.absoluteStart;
    var /** @type {number} */ numFloats = this._curParcel.controller.numFloats;
    if (numFloats) {
      for (; floatIndex < numFloats; ++floatIndex) {
        var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = this._curParcel.controller.getFloatAt(floatIndex);
        if (floatInfo.columnIndex > this._curParcel.columnIndex)
          break;
        if (floatInfo.floatType != org.apache.royale.textLayout.formats.Float.NONE && floatInfo.absolutePosition < this._startComposePosition) {
          var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ ilg = this._textFlow.findLeaf(floatInfo.absolutePosition);
          var /** @type {number} */ logicalHeight = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) ? ilg.elementWidthWithMarginsAndPadding() : ilg.elementHeightWithMarginsAndPadding();
          this._curParcel.knockOut(floatInfo.knockOutWidth, floatInfo.depth - this._lastLineDescent, floatInfo.depth + logicalHeight, floatInfo.floatType == org.apache.royale.textLayout.formats.Float.LEFT);
        }
      }
    }
    this._curParcel.controller.clearFloatsAt(this._startComposePosition);
  }
  this._curParcelStart = (this._curElementStart + this._curElementOffset) >> 0;
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB)
    this._parcelList.addTotalDepth(this._curLine.y + this._curLine.ascent - this._curParcel.y);
  else
    this._parcelList.addTotalDepth(this._curParcel.right - this._curLine.x);
  this._atColumnStart = false;
  var /** @type {number} */ lineIndex = this._flowComposer.findLineIndexAtPosition(this._startController.absoluteStart);
  
  this.org_apache_royale_textLayout_compose_BaseCompose_initializeContentBounds(lineIndex, startLineIndex);
  return true;
};


/**
 * @private
 * @param {number} lineIndex
 * @param {number} lastLineToCheck
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_initializeContentBounds = function(lineIndex, lastLineToCheck) {
  var /** @type {number} */ columnIndex = -1;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line;
  
  this._parcelLogicalTop = this.computeTextFlowLineMinimumLogicalTop(this._flowComposer.getLineAt(lineIndex), null);
  if (this._measuring) {
    for (; lineIndex <= lastLineToCheck; ++lineIndex) {
      line = this._flowComposer.getLineAt(lineIndex);
      if (line.columnIndex != columnIndex) {
        columnIndex = line.columnIndex;
        this._contentLogicalExtent = 0;
        this._contentCommittedExtent = 0;
        this._accumulatedMinimumStart = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
      }
      var /** @type {number} */ lineExtent = line.lineExtent;
      this._contentLogicalExtent = Math.max(this._contentLogicalExtent, lineExtent);
      if (line.alignment == org.apache.royale.textLayout.formats.TextAlign.LEFT && !line.hasNumberLine)
        this._contentCommittedExtent = Math.max(this._contentCommittedExtent, lineExtent); else {
        var /** @type {org.apache.royale.textLayout.compose.BaseCompose.AlignData} */ alignData = org.apache.royale.textLayout.compose.BaseCompose.createAlignData(line);
        alignData.textLine = line.getTextLine(true);
        alignData.textAlign = line.alignment;
        var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ paraFormat = line.paragraph.computedFormat;
        alignData.rightSideGap = this.org_apache_royale_textLayout_compose_BaseCompose_getRightSideGap(line, line.alignment != org.apache.royale.textLayout.formats.TextAlign.LEFT);
        alignData.leftSideGap = this.org_apache_royale_textLayout_compose_BaseCompose_getLeftSideGap(line);
        alignData.textIndent = Number(paraFormat.textIndent);
        alignData.lineWidth = lineExtent - (alignData.rightSideGap + alignData.leftSideGap);
        if (!this.org_apache_royale_textLayout_compose_BaseCompose__alignLines)
          this.org_apache_royale_textLayout_compose_BaseCompose__alignLines = [];
        this.org_apache_royale_textLayout_compose_BaseCompose__alignLines.push(alignData);
      }
    }
    
  } else {
    line = this._flowComposer.getLineAt(lastLineToCheck);
    this._contentLogicalExtent = this._contentCommittedExtent = line.accumulatedLineExtent;
    this._accumulatedMinimumStart = line.accumulatedMinimumStart;
    if (this._parcelList.currentParcelIndex > 0 && this._parcelList.currentParcel.columnIndex > 0) {
      if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB)
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom = this._curParcel.controller.compositionHeight;
      else
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft = 0 - this._curParcel.controller.compositionWidth;
      if (this._textFlow.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.RTL)
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight = this._curParcel.controller.compositionWidth;
    }
  }
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} line
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.computeTextFlowLineMinimumLogicalTop = function(line, textLine) {
  if (line.hasGraphicElement) {
    var /** @type {number} */ pos = line.absoluteStart;
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leafElement = this._textFlow.findLeaf(pos);
    var /** @type {number} */ adjustedAscent = line.getLineTypographicAscent(leafElement, leafElement.getAbsoluteStart(), textLine);
    var /** @type {number} */ parcelTop = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) ? line.x + adjustedAscent : line.y + line.ascent - adjustedAscent;
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controller = line.controller;
    var /** @type {number} */ lineEnd = (pos + line.textLength) >> 0;
    if (controller.numFloats > 0) {
      while (pos < lineEnd) {
        var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = controller.getFloatAtPosition(pos);
        if (floatInfo) {
          parcelTop = Math.min(parcelTop, floatInfo.depth);
          pos = (floatInfo.absolutePosition + 1) >> 0;
        }
        else
          break;
      }
    }
    return parcelTop;
  }
  return NaN;
};


/**
 * @private
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_resetControllerBounds = function() {
  this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight = -org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom = -org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} composeRoot
 * @param {number} absStart
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeInternal = function(composeRoot, absStart) {
  this.org_apache_royale_textLayout_compose_BaseCompose_composeBlockElement(composeRoot, absStart);
};


/** @asprivate
 * Compose a single paragraph. If no lines in the paragraph are going to be visible, 
 * then the TextLines are released for later reuse.
 * @protected
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} elem
 * @param {number} absStart
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeParagraphElement = function(elem, absStart) {
  this._curParaElement = elem;
  this._curParaStart = absStart;
  this._curLineStart = absStart;
  this._curParaFormat = elem.computedFormat;
  
  this._paragraphContainsVisibleLines = (this._curElementStart + this._curElementOffset != this._curParaStart);
  if (this._paragraphContainsVisibleLines) {
    this._curLineStart = (this._curElementStart + this._curElementOffset) >> 0;
  }
  var /** @type {boolean} */ success = this.composeParagraphElementIntoLines();
  var /** @type {boolean} */ okToRelease = true;
  if (!this._paragraphContainsVisibleLines) {
    var /** @type {Array} */ textBlocks = elem.getTextBlocks();
    var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
    var foreachiter1_target = textBlocks;
    for (var foreachiter1 in foreachiter1_target) 
    {
    var textBlock = foreachiter1_target[foreachiter1];
    {
      for (textLine = textBlock.lastLine; textLine && okToRelease; textLine = textLine.previousLine) {
        if (textLine.parent)
          okToRelease = false;
      }
      if (okToRelease) {
        for (textLine = textBlock.lastLine; textLine;) {
          textBlock.releaseLines(textLine, textLine);
          textLine.userData = null;
          org.apache.royale.textLayout.compose.TextLineRecycler.addLineForReuse(textLine);
          if (this._textFlow.backgroundManager)
            this._textFlow.backgroundManager.removeLineFromCache(textLine);
          textLine = textBlock.lastLine;
        }
        elem.releaseTextBlock(textBlock);
      }
    }}
    
  }
  if (this.releaseLineCreationData && !okToRelease)
    elem.releaseLineCreationData();
  org.apache.royale.textLayout.utils.BackgroundUtil.collectBlock(this._textFlow, elem);
  return success;
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} paragraph
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.getFirstIndentCharPos = function(paragraph) {
  var /** @type {number} */ pos = 0;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = paragraph.getFirstLeaf();
  while (leaf && (leaf.className == "InlineGraphicElement") && (org.apache.royale.utils.Language.as(leaf, org.apache.royale.textLayout.elements.IInlineGraphicElement, true).effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE)) {
    pos += leaf.textLength;
    leaf = leaf.getNextLeaf();
  }
  return pos;
};


/** Compose the lines in the paragraph. 
 * Updates the _paragraphContainsVisibleLines flag if the paragraph contains at least one visible line.
 * Returns true if composition should continue, false if all space is used and composition should stop. 
 * @protected
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeParagraphElementIntoLines = function() {
  if (this._curParaElement.getTextBlock().content == null)
    this._curParaElement.createContentElement();
  var /** @type {boolean} */ result = true;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
  var /** @type {number} */ leftMargin;
  var /** @type {number} */ rightMargin;
  var /** @type {number} */ firstLineIndent = 0;
  if (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) {
    leftMargin = Number(this._curParaFormat.paragraphStartIndent);
    rightMargin = Number(this._curParaFormat.paragraphEndIndent);
  } else {
    leftMargin = Number(this._curParaFormat.paragraphEndIndent);
    rightMargin = Number(this._curParaFormat.paragraphStartIndent);
  }
  this._parcelList.pushLeftMargin(leftMargin);
  this._parcelList.pushRightMargin(rightMargin);
  var /** @type {number} */ firstIndentCharPos = this._curParaStart;
  if (this.preProcessILGs((this._curElementStart - this._curParaStart) >> 0))
    firstIndentCharPos = (this.getFirstIndentCharPos(this._curParaElement) + this._curParaStart) >> 0;
  while (result) {
    if (this._parcelList.atEnd()) {
      result = false;
      break;
    }
    this.startLine();
    if (!this._forceILGs)
      this.processFloatsAtLineStart();
    this._textIndent = Number((this._curElementStart + this._curElementOffset <= firstIndentCharPos) ? this._curParaFormat.textIndent : 0);
    if (this._parcelList.atEnd()) {
      result = false;
      break;
    }
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curChild = this._curParaElement.getChildAt(this._curParaElement.findChildIndexAtPosition((this._curElementStart - this._curParaStart) >> 0));
    if (curChild.className == "TableElement") {
      if (!this.org_apache_royale_textLayout_compose_BaseCompose_composeTableElement(curChild, this._curElementStart))
        return false;
      this._curElementOffset = 0;
      this._curElementStart += this._curElement.textLength;
      this._curElement = this._curElement.getNextLeaf();
      this._curLineStart++;
      this._previousLine = null;
      if (this._curElement.className == "SpanElement" && org.apache.royale.utils.Language.as(this._curElement, org.apache.royale.textLayout.elements.ISpanElement, true).hasParagraphTerminator && this._curElement.textLength == 1) {
        this._curElementOffset = 0;
        this._curElementStart += this._curElement.textLength;
        this._curElement = this._curElement.getNextLeaf();
        return true;
      }
    }
    textLine = this.composeNextLine();
    if (textLine == null) {
      result = false;
      break;
    }
    
    var /** @type {string} */ textAlignment = org.apache.royale.utils.Language.string(this._curParaFormat.textAlign);
    if (textAlignment == org.apache.royale.textLayout.formats.TextAlign.JUSTIFY) {
      var /** @type {number} */ location = this._curLine.location;
      if (location == org.apache.royale.textLayout.compose.TextFlowLineLocation.LAST || location == org.apache.royale.textLayout.compose.TextFlowLineLocation.ONLY)
        textAlignment = org.apache.royale.utils.Language.string(this._curParaFormat.textAlignLast);
    }
    switch (textAlignment) {
      case org.apache.royale.textLayout.formats.TextAlign.START:
        textAlignment = (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) ? org.apache.royale.textLayout.formats.TextAlign.LEFT : org.apache.royale.textLayout.formats.TextAlign.RIGHT;
        break;
      case org.apache.royale.textLayout.formats.TextAlign.END:
        textAlignment = (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) ? org.apache.royale.textLayout.formats.TextAlign.RIGHT : org.apache.royale.textLayout.formats.TextAlign.LEFT;
        break;
    }
    var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(textLine);
    var /** @type {boolean} */ needAlignData = !!((numberLine && org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) || textAlignment == org.apache.royale.textLayout.formats.TextAlign.CENTER || textAlignment == org.apache.royale.textLayout.formats.TextAlign.RIGHT);
    if (textLine.hasTabs) {
      if (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) {
        if (!numberLine || org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.INSIDE)
          needAlignData = false;
        textAlignment = org.apache.royale.textLayout.formats.TextAlign.LEFT;
      } else {
        needAlignData = true;
        textAlignment = org.apache.royale.textLayout.formats.TextAlign.RIGHT;
      }
    }
    var /** @type {org.apache.royale.textLayout.compose.BaseCompose.AlignData} */ alignData;
    if (needAlignData) {
      alignData = org.apache.royale.textLayout.compose.BaseCompose.createAlignData(this._curLine);
      alignData.textLine = textLine;
      alignData.textAlign = textAlignment;
    }
    var /** @type {number} */ spaceBefore = this._atColumnStart && (this._curParaFormat.leadingModel != org.apache.royale.textLayout.formats.LeadingModel.BOX) ? 0 : this._curLine.spaceBefore;
    var /** @type {number} */ spaceCarried = this._atColumnStart ? 0 : this._paragraphSpaceCarried;
    if (spaceBefore != 0 || spaceCarried != 0)
      this._parcelList.addTotalDepth(Math.max(spaceBefore, spaceCarried));
    this._paragraphSpaceCarried = 0;
    if (this._verticalSpaceCarried != 0)
      this._verticalSpaceCarried = 0;
    this._parcelList.addTotalDepth(this._curLine.height);
    alignData = this.org_apache_royale_textLayout_compose_BaseCompose_calculateLineAlignmentAndBounds(textLine, numberLine, alignData);
    if (alignData) {
      if (!this.org_apache_royale_textLayout_compose_BaseCompose__alignLines)
        this.org_apache_royale_textLayout_compose_BaseCompose__alignLines = [];
      this.org_apache_royale_textLayout_compose_BaseCompose__alignLines.push(alignData);
      this._curLine.alignment = textAlignment;
    }
    
    if (firstLineIndent != 0) {
      if (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR)
        this._parcelList.popLeftMargin(firstLineIndent);
      else
        this._parcelList.popRightMargin(firstLineIndent);
      firstLineIndent = 0;
    }
    if (!this.processFloatsAtLineEnd(textLine) || !this._curLine) {
      this.resetLine(textLine);
      continue;
    }
    this.endLine(textLine);
    this._lastGoodStart = -1;
    if (this.isLineVisible(textLine)) {
      this._curParcel.controller.addComposedLine(textLine);
      this._paragraphContainsVisibleLines = true;
    }
    if (this._parcelList.atEnd()) {
      result = false;
      break;
    }
    this._previousLine = textLine;
    this._curElementOffset = (this._curLine.absoluteStart + this._curLine.textLength - this._curElementStart) >> 0;
    if (this._curElementOffset >= this._curElement.textLength) {
      do {
        if (this._curParaElement.hasInteractiveChildren()) {
          var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curElement = this._curElement;
          while (curElement && (curElement != this._curParaElement)) {
            if (curElement.className == "LinkElement") {
            } else if (curElement.hasActiveEventMirror()) {
            }
            curElement = curElement.parent;
          }
        }
        this._curElementOffset -= this._curElement.textLength;
        this._curElementStart += this._curElement.textLength;
        this._curElement = this._curElement.getNextLeaf();
        if (this._curElementStart == this._curParaStart + this._curParaElement.textLength)
          break;
        
      } while (this._curElementOffset >= this._curElement.textLength || this._curElement.textLength == 0);
    }
    this._paragraphSpaceCarried = this._curLine.spaceAfter;
    if (this._curElementStart == this._curParaStart + this._curParaElement.textLength)
      break;
  }
  this._parcelList.popLeftMargin(leftMargin);
  this._parcelList.popRightMargin(rightMargin);
  if (firstLineIndent != 0) {
    if (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR)
      this._parcelList.popLeftMargin(firstLineIndent);
    else
      this._parcelList.popRightMargin(firstLineIndent);
    firstLineIndent = 0;
  }
  this._previousLine = null;
  return result;
};


/** @asprivate 
 * @protected
 * @param {number} targetWidth
 * @param {boolean} allowEmergencyBreaks
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.createTextLine = function(targetWidth, allowEmergencyBreaks) {
  var /** @type {number} */ lineOffset = (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) ? this._lineSlug.leftMargin : this._lineSlug.rightMargin;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = null;
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = this._curParaElement.getTextBlockAtPosition(this._curElement.getElementRelativeStart(this._curParaElement));
  textLine = this.swfContext.callInContext(org.apache.royale.utils.Language.closure(textBlock.createTextLine, textBlock, 'createTextLine'), textBlock, [this._previousLine, targetWidth, lineOffset, true]);
  
  if (!allowEmergencyBreaks && textBlock.textLineCreationResult == org.apache.royale.text.engine.TextLineCreationResult.EMERGENCY)
    textLine = null;
  if (textLine == null)
    return null;
  
  this._curLine.initialize(this._curParaElement, targetWidth, lineOffset - this._parcelList.insideListItemMargin, this._curLineStart, textLine.rawTextLength, textLine);
  
  return textLine;
};


/** Called when we are about to compose a line. Handler for derived classes to override default behavior. 
 * @protected
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.startLine = function() {
  this._workingContentExtent = 0;
  this._workingContentHeight = 0;
  this._workingContentLogicalExtent = 0;
  this._workingParcelIndex = this._parcelList.currentParcelIndex;
  this._workingTotalDepth = this.parcelList.totalDepth;
  this._workingParcelLogicalTop = NaN;
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.isLineVisible = function(textLine) {
  return org.apache.royale.utils.Language.is(this._curParcel.controller.testLineVisible(this._blockProgression, this._controllerVisibleBoundsXTW, this._controllerVisibleBoundsYTW, this._controllerVisibleBoundsWidthTW, this._controllerVisibleBoundsHeightTW, this._curLine, textLine), org.apache.royale.text.engine.ITextLine);
};


/** Called when we are finished composing a line, and it is committed. Handler for derived classes to override default behavior.  
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.endLine = function(textLine) {
  this._curLineStart += this._curLine.textLength;
  this._contentCommittedExtent = Math.max(this._contentCommittedExtent, this._workingContentExtent);
  this._contentCommittedHeight = Math.max(this._contentCommittedHeight, this._workingContentHeight);
  this._contentLogicalExtent = Math.max(this._contentLogicalExtent, this._workingContentLogicalExtent);
  if (!this._measuring)
    this._contentLogicalExtent = this._contentCommittedExtent;
  if (this._pushInFloats)
    this._pushInFloats.length = 0;
  this._atColumnStart = false;
  this._linePass = 0;
  if (!isNaN(this._workingParcelLogicalTop))
    this._parcelLogicalTop = this._workingParcelLogicalTop;
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.resetLine = function(textLine) {
  if (this._textFlow.backgroundManager)
    this._textFlow.backgroundManager.removeLineFromCache(textLine);
  if (this._workingParcelIndex != this.parcelList.currentParcelIndex) {
    this._linePass = 0;
    if (this._pushInFloats)
      this._pushInFloats.length = 0;
  }
  else
    ++this._linePass;
  this.parcelList.addTotalDepth(this._workingTotalDepth - this._parcelList.totalDepth);
  this._workingTotalDepth = this.parcelList.totalDepth;
};


/**
 * @protected
 * @param {number} startPos
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.preProcessILGs = function(startPos) {
  if (!this._curParcel)
    return false;
  var /** @type {boolean} */ foundFloat = false;
  var /** @type {boolean} */ verticalText = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL);
  this._forceILGs = (this._parcelList.explicitLineBreaks || (verticalText && this._curParcel.controller.measureHeight) || (!verticalText && this._curParcel.controller.measureWidth));
  for (var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this._curParaElement.findLeaf(startPos); leaf; leaf = leaf.getNextLeaf(this._curParaElement)) {
    if (leaf.className == "InlineGraphicElement") {
      var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ inlineGraphic = leaf;
      inlineGraphic.setEffectiveFloat(org.apache.royale.utils.Language.string(this._forceILGs ? org.apache.royale.textLayout.formats.Float.NONE : inlineGraphic.computedFloat));
      foundFloat = true;
    }
  }
  return foundFloat;
};


/**
 * @protected
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.processFloatsAtLineStart = function() {
  if (this._forceILGs)
    return;
  if (this._pushInFloats && this._pushInFloats.length > 0) {
    for (var /** @type {number} */ i = 0; i < this._pushInFloats.length; ++i) {
      var /** @type {number} */ pos = (this._pushInFloats[i]) >> 0;
      var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this._textFlow.findLeaf(pos);
      
      if (!this.composeFloat(leaf, false))
        this._pushInFloats.length = i;
    }
  }
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.processFloatsAtLineEnd = function(textLine) {
  if (!textLine.hasGraphicElement && this._linePass <= 0)
    return true;
  if (this._pushInFloats && this._pushInFloats.length > 0) {
    var /** @type {number} */ floatPosition = (this._pushInFloats[this._pushInFloats.length - 1]) >> 0;
    if (this._curLine.absoluteStart + this._curLine.textLength <= floatPosition) {
      for (var /** @type {number} */ floatIndex = (this._pushInFloats.length - 1) >> 0; floatIndex >= 0; --floatIndex) {
        floatPosition = (this._pushInFloats[floatIndex]) >> 0;
        var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ elem = this._textFlow.findLeaf(floatPosition);
        var /** @type {number} */ logicalFloatHeight = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) ? elem.elementWidth + elem.getEffectivePaddingLeft() + elem.getEffectivePaddingRight() : elem.elementHeightWithMarginsAndPadding();
        var /** @type {org.apache.royale.textLayout.compose.FloatCompositionData} */ floatInfo = this._curLine.controller.getFloatAtPosition(floatPosition);
        if (floatInfo && floatInfo.absolutePosition == floatPosition) {
          var /** @type {number} */ adjustTop = isNaN(this._lastLineDescent) ? 0 : this._lastLineDescent;
          this._curParcel.removeKnockOut(floatInfo.knockOutWidth, floatInfo.depth - adjustTop, floatInfo.depth + logicalFloatHeight, floatInfo.floatType == org.apache.royale.textLayout.formats.Float.LEFT);
        }
      }
      this._curLine.controller.clearFloatsAt((this._pushInFloats[0]) >> 0);
      --this._pushInFloats.length;
      return false;
    }
  }
  var /** @type {number} */ elementStart = this._curElementStart;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ element = this._curElement;
  var /** @type {number} */ endPos = (this._curLine.absoluteStart + this._curLine.textLength) >> 0;
  var /** @type {number} */ skipCount = 0;
  var /** @type {boolean} */ hasInlines = false;
  while (elementStart < endPos) {
    if (element.className == "InlineGraphicElement") {
      var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ inlineGraphic = org.apache.royale.utils.Language.as(element, org.apache.royale.textLayout.elements.IInlineGraphicElement, true);
      if (inlineGraphic.computedFloat == org.apache.royale.textLayout.formats.Float.NONE || this._forceILGs)
        hasInlines = true; else {
        if (this._linePass == 0) {
          if (!this._pushInFloats)
            this._pushInFloats = [];
          this._pushInFloats.push(elementStart);
        }
        else if (this._pushInFloats.indexOf(elementStart) >= 0)
          ++skipCount; else {
          if (!this.composeFloat(inlineGraphic, true)) {
            this.advanceToNextParcel();
            return false;
          }
        }
      }
    }
    elementStart += element.textLength;
    element = element.getNextLeaf();
  }
  var /** @type {boolean} */ completed = (skipCount >= (this._pushInFloats ? this._pushInFloats.length : 0));
  if (completed && hasInlines)
    this.processInlinesAtLineEnd(textLine);
  return completed;
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.processInlinesAtLineEnd = function(textLine) {
  var /** @type {number} */ elementStart = this._curElementStart;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ element = this._curElement;
  var /** @type {number} */ endPos = (this._curLine.absoluteStart + this._curLine.textLength) >> 0;
  while (elementStart < endPos) {
    if (element.className == "InlineGraphicElement") {
      var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ inlineGraphic = element;
      if (inlineGraphic.computedFloat == org.apache.royale.textLayout.formats.Float.NONE || this._forceILGs)
        this.composeInlineGraphicElement(inlineGraphic, textLine);
    }
    elementStart += element.textLength;
    element = element.getNextLeaf();
  }
};


/**
 *  @royaleignorecoercion org.apache.royale.core.IParentIUIBase
 * @protected
 * @param {org.apache.royale.textLayout.elements.IInlineGraphicElement} inlineGraphic
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeInlineGraphicElement = function(inlineGraphic, textLine) {
  var /** @type {number} */ marginAndPaddingX = this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? -inlineGraphic.getEffectivePaddingRight() : inlineGraphic.getEffectivePaddingLeft();
  var /** @type {number} */ marginAndPaddingY = inlineGraphic.getEffectivePaddingTop();
  var /** @type {Object} */ fteInline = inlineGraphic.placeholderGraphic.parent;
  var /** @type {org.apache.royale.geom.Matrix} */ matrix;
  this._curParcel.controller.addFloatAt((this._curParaStart + inlineGraphic.getElementRelativeStart(this._curParaElement)) >> 0, inlineGraphic.graphic, org.apache.royale.textLayout.formats.Float.NONE, marginAndPaddingX, marginAndPaddingY, fteInline ? fteInline.alpha : 1, matrix, this._parcelList.totalDepth, 0, this._curParcel.columnIndex, textLine);
  if (this._curParaElement.hasInteractiveChildren()) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curElement = inlineGraphic;
    while (curElement && (curElement != this._curParaElement)) {
      if (org.apache.royale.utils.Language.is(curElement, org.apache.royale.textLayout.elements.ILinkElement)) {
      } else if (curElement.hasActiveEventMirror()) {
      }
      curElement = curElement.parent;
    }
  }
  return true;
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.elements.IInlineGraphicElement} elem
 * @param {boolean} afterLine
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeFloat = function(elem, afterLine) {
  if (elem.elementHeight == 0 || elem.elementWidth == 0)
    return true;
  if (this._lastGoodStart == -1)
    this._lastGoodStart = (this._curElementStart + this._curElementOffset) >> 0;
  var /** @type {boolean} */ verticalText = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL);
  var /** @type {number} */ effectiveLastLineDescent = 0;
  if ((afterLine || !this._atColumnStart) && !isNaN(this._lastLineDescent))
    effectiveLastLineDescent = this._lastLineDescent;
  var /** @type {number} */ spaceBefore = 0;
  if (this._curLine && this._curParaElement != this._curLine.paragraph && !this._atColumnStart)
    spaceBefore = Math.max(this._curParaElement.computedFormat.paragraphSpaceBefore, this._paragraphSpaceCarried);
  var /** @type {number} */ totalDepth = this._parcelList.totalDepth + spaceBefore + effectiveLastLineDescent;
  if (!org.apache.royale.textLayout.compose.BaseCompose._floatSlug)
    org.apache.royale.textLayout.compose.BaseCompose._floatSlug = new org.apache.royale.textLayout.compose.Slug();
  var /** @type {number} */ logicalFloatWidth;
  var /** @type {number} */ logicalFloatHeight;
  if (verticalText) {
    logicalFloatWidth = elem.elementHeight + elem.getEffectivePaddingTop() + elem.getEffectivePaddingBottom();
    logicalFloatHeight = elem.elementWidth + elem.getEffectivePaddingLeft() + elem.getEffectivePaddingRight();
  } else {
    logicalFloatWidth = elem.elementWidthWithMarginsAndPadding();
    logicalFloatHeight = elem.elementHeightWithMarginsAndPadding();
  }
  var /** @type {number} */ floatPosition = elem.getAbsoluteStart();
  var /** @type {boolean} */ floatFits = this._parcelList.fitFloat(org.apache.royale.textLayout.compose.BaseCompose._floatSlug, totalDepth, logicalFloatWidth, logicalFloatHeight);
  if (!floatFits && (this._curParcel.fitAny || this._curParcel.fitsInHeight(totalDepth, org.apache.royale.utils.Language._int(logicalFloatHeight))) && (!this._curLine || this._curLine.absoluteStart == floatPosition || afterLine))
    floatFits = true;
  if (floatFits) {
    var /** @type {string} */ floatType = org.apache.royale.utils.Language.string(elem.computedFloat);
    if (floatType == org.apache.royale.textLayout.formats.Float.START)
      floatType = (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) ? org.apache.royale.textLayout.formats.Float.LEFT : org.apache.royale.textLayout.formats.Float.RIGHT;
    else if (floatType == org.apache.royale.textLayout.formats.Float.END)
      floatType = (this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR) ? org.apache.royale.textLayout.formats.Float.RIGHT : org.apache.royale.textLayout.formats.Float.LEFT;
    var /** @type {org.apache.royale.geom.Rectangle} */ floatRect = this.org_apache_royale_textLayout_compose_BaseCompose_calculateFloatBounds(elem, verticalText, floatType);
    if (verticalText) {
      this._workingContentExtent = Math.max(this._workingContentExtent, floatRect.bottom + elem.getEffectivePaddingLeft() + elem.getEffectivePaddingRight());
      this._workingContentHeight = Math.max(this._workingContentHeight, org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth + floatRect.width + elem.getEffectivePaddingTop() + elem.getEffectivePaddingBottom());
      this._workingContentLogicalExtent = Math.max(this._workingContentLogicalExtent, floatRect.bottom);
      this._accumulatedMinimumStart = Math.min(this._accumulatedMinimumStart, floatRect.y);
    } else {
      this._workingContentExtent = Math.max(this._workingContentExtent, floatRect.right + elem.getEffectivePaddingLeft() + elem.getEffectivePaddingRight());
      this._workingContentHeight = Math.max(this._workingContentHeight, org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth + floatRect.height + elem.getEffectivePaddingTop() + elem.getEffectivePaddingBottom());
      this._workingContentLogicalExtent = Math.max(this._workingContentLogicalExtent, floatRect.right);
      this._accumulatedMinimumStart = Math.min(this._accumulatedMinimumStart, floatRect.x);
    }
    if (floatPosition == this._curParcelStart)
      this._workingParcelLogicalTop = org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth;
    var /** @type {number} */ knockOutWidth = ((floatType == org.apache.royale.textLayout.formats.Float.LEFT) ? org.apache.royale.textLayout.compose.BaseCompose._floatSlug.leftMargin : org.apache.royale.textLayout.compose.BaseCompose._floatSlug.rightMargin) + logicalFloatWidth;
    var /** @type {number} */ adjustTop = isNaN(this._lastLineDescent) ? 0 : this._lastLineDescent;
    this._curParcel.knockOut(knockOutWidth, org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth - adjustTop, org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth + logicalFloatHeight, floatType == org.apache.royale.textLayout.formats.Float.LEFT);
    this._curParcel.controller.addFloatAt(floatPosition, elem.graphic, floatType, floatRect.x, floatRect.y, Number(elem.computedFormat.textAlpha), null, org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth, knockOutWidth, this._curParcel.columnIndex, this._curParcel.controller.container);
    
  }
  return floatFits;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IInlineGraphicElement} elem
 * @param {boolean} verticalText
 * @param {string} floatType
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_calculateFloatBounds = function(elem, verticalText, floatType) {
  var /** @type {org.apache.royale.geom.Rectangle} */ floatRect = new org.apache.royale.geom.Rectangle();
  if (verticalText) {
    floatRect.x = ((this._curParcel.right - org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth) - elem.elementWidth) - elem.getEffectivePaddingRight();
    floatRect.y = (floatType == org.apache.royale.textLayout.formats.Float.LEFT) ? (this._curParcel.y + org.apache.royale.textLayout.compose.BaseCompose._floatSlug.leftMargin + elem.getEffectivePaddingTop()) : (this._curParcel.bottom - org.apache.royale.textLayout.compose.BaseCompose._floatSlug.rightMargin - elem.getEffectivePaddingBottom() - elem.elementHeight);
    floatRect.width = elem.elementWidth;
    floatRect.height = elem.elementHeight;
  } else {
    floatRect.x = (floatType == org.apache.royale.textLayout.formats.Float.LEFT) ? this._curParcel.x + org.apache.royale.textLayout.compose.BaseCompose._floatSlug.leftMargin + elem.getEffectivePaddingLeft() : this._curParcel.right - org.apache.royale.textLayout.compose.BaseCompose._floatSlug.rightMargin - elem.getEffectivePaddingRight() - elem.elementWidth;
    floatRect.y = this._curParcel.y + org.apache.royale.textLayout.compose.BaseCompose._floatSlug.depth + elem.getEffectivePaddingTop();
    floatRect.width = elem.elementWidth;
    floatRect.height = elem.elementHeight;
  }
  return floatRect;
};


/**
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_calculateLineWidthExplicit = function(textLine) {
  var /** @type {boolean} */ isRTL = this._curParaElement.computedFormat.direction == org.apache.royale.textLayout.formats.Direction.RTL;
  var /** @type {number} */ lastAtom = (textLine.atomCount - 1) >> 0;
  var /** @type {boolean} */ endOfParagraph = this._curLine.absoluteStart + this._curLine.textLength == this._curParaStart + this._curParaElement.textLength;
  if (endOfParagraph && !isRTL)
    --lastAtom;
  var /** @type {org.apache.royale.geom.Rectangle} */ bounds = textLine.getAtomBounds((lastAtom >= 0 ? lastAtom : 0) >> 0);
  var /** @type {number} */ lineWidth = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) ? (lastAtom >= 0 ? bounds.right : bounds.left) : (lastAtom >= 0 ? bounds.bottom : bounds.top);
  if (isRTL) {
    bounds = textLine.getAtomBounds((lastAtom != 0 && endOfParagraph ? 1 : 0) >> 0);
    lineWidth -= (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) ? bounds.left : bounds.top;
  }
  return lineWidth;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} curLine
 * @param {boolean} aligned
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_getRightSideGap = function(curLine, aligned) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ elem = curLine.paragraph;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ paraFormat = elem.computedFormat;
  var /** @type {number} */ rightSideGap = Number(paraFormat.direction == org.apache.royale.textLayout.formats.Direction.RTL ? paraFormat.paragraphStartIndent : paraFormat.paragraphEndIndent);
  if (paraFormat.direction == org.apache.royale.textLayout.formats.Direction.RTL && (curLine.location & org.apache.royale.textLayout.compose.TextFlowLineLocation.FIRST)) {
    rightSideGap += Number(paraFormat.textIndent);
    if (curLine.hasNumberLine && elem.getParentByType("ListItemElement").computedFormat.listStylePosition == org.apache.royale.textLayout.formats.ListStylePosition.INSIDE) {
      var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = curLine.getTextLine(true);
      var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(textLine);
      rightSideGap += org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
    }
  }
  do {
    rightSideGap += this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB ? elem.getEffectivePaddingRight() + elem.getEffectiveBorderRightWidth() + elem.getEffectiveMarginRight() : elem.getEffectivePaddingBottom() + elem.getEffectiveBorderBottomWidth() + elem.getEffectiveMarginBottom();
    elem = elem.parent;
  } while (!org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITextFlow));
  return rightSideGap;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} curLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_getLeftSideGap = function(curLine) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ elem = curLine.paragraph;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ paraFormat = elem.computedFormat;
  var /** @type {number} */ leftSideGap = Number(paraFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR ? paraFormat.paragraphStartIndent : paraFormat.paragraphEndIndent);
  if (paraFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR && (curLine.location & org.apache.royale.textLayout.compose.TextFlowLineLocation.FIRST)) {
    leftSideGap += Number(paraFormat.textIndent);
    if (curLine.hasNumberLine && elem.getParentByType("ListItemElement").computedFormat.listStylePosition == org.apache.royale.textLayout.formats.ListStylePosition.INSIDE) {
      var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine = curLine.getTextLine(true);
      var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(textLine);
      leftSideGap += org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
    }
  }
  do {
    leftSideGap += this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB ? elem.getEffectivePaddingLeft() + elem.getEffectiveBorderLeftWidth() + elem.getEffectiveMarginLeft() : elem.getEffectivePaddingTop() + elem.getEffectiveBorderTopWidth() + elem.getEffectiveMarginTop();
    elem = elem.parent;
  } while (!org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITextFlow));
  return leftSideGap;
};


/** @asprivate 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 * @param {org.apache.royale.textLayout.compose.BaseCompose.AlignData} alignData
 * @return {org.apache.royale.textLayout.compose.BaseCompose.AlignData}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_calculateLineAlignmentAndBounds = function(textLine, numberLine, alignData) {
  var /** @type {number} */ lineWidth = textLine.textWidth;
  if (org.apache.royale.textLayout.elements.GlobalSettings.alwaysCalculateWhitespaceBounds || this._parcelList.explicitLineBreaks)
    lineWidth = this.org_apache_royale_textLayout_compose_BaseCompose_calculateLineWidthExplicit(textLine);
  var /** @type {number} */ rightSideGap = this._lineSlug.rightMargin;
  var /** @type {number} */ leftSideGap = this._lineSlug.leftMargin;
  var /** @type {number} */ delta = 0;
  
  
  if (alignData) {
    alignData.rightSideGap = rightSideGap;
    alignData.leftSideGap = leftSideGap;
    alignData.lineWidth = lineWidth;
    alignData.textIndent = Number(this._curParaFormat.textIndent);
    var /** @type {number} */ extraSpace;
    var /** @type {number} */ coord;
    if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      
      if (!this._measuring) {
        var /** @type {number} */ textLineWidth = textLine.textWidth;
        extraSpace = this._curParcel.width - leftSideGap - rightSideGap - textLineWidth;
        if (alignData.textAlign != org.apache.royale.textLayout.formats.TextAlign.LEFT) {
          delta = (alignData.textAlign == org.apache.royale.textLayout.formats.TextAlign.CENTER ? extraSpace / 2 : extraSpace);
          coord = this._curParcel.x + leftSideGap + delta;
        }
        else
          coord = this._curParcel.x + leftSideGap + extraSpace;
        if (alignData.textAlign != org.apache.royale.textLayout.formats.TextAlign.LEFT) {
          this._curLine.x = coord;
          textLine.x = coord;
        }
        else
          textLine.x = this._curLine.x;
        if (numberLine && org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) {
          numberLine.x = org.apache.royale.textLayout.compose.BaseCompose.computeNumberLineAlignment(alignData, textLine.textWidth, textLine.x, numberLine, coord, delta, extraSpace);
          
          this._curLine.numberLinePosition = numberLine.x;
        }
        org.apache.royale.textLayout.compose.BaseCompose.releaseAlignData(alignData);
        alignData = null;
      }
    } else {
      
      if (!this._measuring) {
        extraSpace = this._curParcel.height - leftSideGap - rightSideGap - textLine.textWidth;
        if (alignData.textAlign != org.apache.royale.textLayout.formats.TextAlign.LEFT) {
          delta = (alignData.textAlign == org.apache.royale.textLayout.formats.TextAlign.CENTER ? extraSpace / 2 : extraSpace);
          coord = this._curParcel.y + leftSideGap + delta;
        }
        else
          coord = this._curParcel.y + leftSideGap + extraSpace;
        if (alignData.textAlign != org.apache.royale.textLayout.formats.TextAlign.LEFT) {
          this._curLine.y = coord;
          textLine.y = coord;
        }
        else
          textLine.y = this._curLine.y;
        if (numberLine && org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) {
          numberLine.y = org.apache.royale.textLayout.compose.BaseCompose.computeNumberLineAlignment(alignData, textLine.textWidth, textLine.y, numberLine, coord, delta, extraSpace);
          
          this._curLine.numberLinePosition = numberLine.y;
        }
        org.apache.royale.textLayout.compose.BaseCompose.releaseAlignData(alignData);
        alignData = null;
      }
    }
  }
  var /** @type {number} */ lineExtent = lineWidth + leftSideGap + rightSideGap + delta;
  this._curLine.lineExtent = lineExtent;
  this._workingContentLogicalExtent = Math.max(this._workingContentLogicalExtent, lineExtent);
  this._curLine.accumulatedLineExtent = Math.max(this._contentLogicalExtent, this._workingContentLogicalExtent);
  if (!alignData) {
    var /** @type {number} */ edgeAdjust = Number(this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR ? Math.max(this._curLine.lineOffset, 0) : this._curParaFormat.paragraphEndIndent);
    edgeAdjust = this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? this._curLine.y - edgeAdjust : this._curLine.x - edgeAdjust;
    if (numberLine) {
      var /** @type {number} */ numberLineStart = this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB ? numberLine.x + this._curLine.x : numberLine.y + this._curLine.y;
      edgeAdjust = Math.min(edgeAdjust, numberLineStart);
      if (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) {
        var /** @type {number} */ numberLineMaxExtent = numberLineStart + org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
        numberLineMaxExtent -= lineExtent;
        if (numberLineMaxExtent > 0)
          delta += numberLineMaxExtent;
      }
    }
    this._workingContentExtent = Math.max(this._workingContentExtent, lineWidth + leftSideGap + Math.max(0, rightSideGap) + delta);
    this._curLine.accumulatedMinimumStart = this._accumulatedMinimumStart = Math.min(this._accumulatedMinimumStart, edgeAdjust);
  }
  if (this._curLine.absoluteStart == this._curParcelStart && isNaN(this._workingParcelLogicalTop))
    this._workingParcelLogicalTop = this.computeTextFlowLineMinimumLogicalTop(this._curLine, textLine);
  return alignData;
};


/** @asprivate - align the numberline so that its position is independent of the textAlign property 
 * @nocollapse
 * @param {org.apache.royale.textLayout.compose.BaseCompose.AlignData} alignData
 * @param {number} textLineWidth
 * @param {number} textLineOffset
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 * @param {number} coord
 * @param {number} delta
 * @param {number} extraSpace
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.computeNumberLineAlignment = function(alignData, textLineWidth, textLineOffset, numberLine, coord, delta, extraSpace) {
  var /** @type {number} */ rslt;
  if (alignData.textAlign == org.apache.royale.textLayout.formats.TextAlign.CENTER) {
    if (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineParagraphDirection(numberLine) == org.apache.royale.textLayout.formats.Direction.LTR)
      rslt = -(numberLine.textWidth + org.apache.royale.textLayout.compose.utils.TextLineUtil.getListEndIndent(numberLine) + delta) - alignData.textIndent;
    else
      rslt = textLineWidth + org.apache.royale.textLayout.compose.utils.TextLineUtil.getListEndIndent(numberLine) + (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine) - numberLine.textWidth) + (coord - delta + extraSpace - textLineOffset) + alignData.textIndent;
  } else if (alignData.textAlign == org.apache.royale.textLayout.formats.TextAlign.RIGHT) {
    if (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineParagraphDirection(numberLine) == org.apache.royale.textLayout.formats.Direction.LTR)
      rslt = -(numberLine.textWidth + org.apache.royale.textLayout.compose.utils.TextLineUtil.getListEndIndent(numberLine) + delta) - alignData.textIndent;
    else
      rslt = textLineWidth + org.apache.royale.textLayout.compose.utils.TextLineUtil.getListEndIndent(numberLine) + (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine) - numberLine.textWidth) + alignData.textIndent;
  } else {
    if (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineParagraphDirection(numberLine) == org.apache.royale.textLayout.formats.Direction.LTR)
      rslt = -(numberLine.textWidth + org.apache.royale.textLayout.compose.utils.TextLineUtil.getListEndIndent(numberLine)) - alignData.textIndent;
    else
      rslt = textLineWidth + org.apache.royale.textLayout.compose.utils.TextLineUtil.getListEndIndent(numberLine) + (org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine) - numberLine.textWidth) + (coord - textLineOffset) + alignData.textIndent;
  }
  return rslt;
};


/**
 * @protected
 * @return {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.composeNextLine = function() {
  
  return null;
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {boolean} isNewLine
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.fitLineToParcel = function(textLine, isNewLine, numberLine) {
  var /** @type {number} */ composeYCoord = this._lineSlug.depth;
  this._curLine.setController(this._curParcel.controller, this._curParcel.columnIndex);
  var /** @type {number} */ spaceBefore = Math.max(this._curLine.spaceBefore, this._paragraphSpaceCarried);
  for (;;) {
    this.finishComposeLine(textLine, numberLine);
    if (this._parcelList.getLineSlug(this._lineSlug, spaceBefore + (this._parcelList.atLast() && this._textFlow.configuration.overflowPolicy != org.apache.royale.textLayout.elements.OverflowPolicy.FIT_DESCENDERS ? this._curLine.height - this._curLine.ascent : this._curLine.height + this._curLine.descent), 1, this._textIndent, this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR)) {
      if ((org.apache.royale.textLayout.utils.Twips.to(this._lineSlug.width) == this._curLine.outerTargetWidthTW) && (this._lineSlug.depth != composeYCoord)) {
        this.finishComposeLine(textLine, numberLine);
      }
      break;
    }
    spaceBefore = this._curLine.spaceBefore;
    if (this._pushInFloats && this._parcelList.currentParcel.fitAny && this._pushInFloats.length > 0)
      break;
    for (;;) {
      this.advanceToNextParcel();
      if (!this._curLine || this._parcelList.atEnd())
        return false;
      if (this._parcelList.getLineSlug(this._lineSlug, 0, 1, this._textIndent, this._curParaFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR)) {
        composeYCoord = this._lineSlug.depth;
        break;
      }
    }
    this._curLine.setController(this._curParcel.controller, this._curParcel.columnIndex);
  }
  if (org.apache.royale.textLayout.utils.Twips.to(this._lineSlug.width) != this._curLine.outerTargetWidthTW)
    return false;
  if (isNewLine) {
    if (numberLine)
      org.apache.royale.textLayout.compose.utils.TextLineUtil.initializeNumberLinePosition(numberLine, this._listItemElement, this._curParaElement, textLine.textWidth);
    this._curLine.createAdornments(this._blockProgression, this._curElement, this._curElementStart, textLine, numberLine);
  }
  return true;
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.elements.IFlowLeafElement} curElement
 * @param {number} curElementStart
 * @param {org.apache.royale.text.engine.ITextLine=} numberLine
 * @return {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.calculateLeadingParameters = function(curElement, curElementStart, numberLine) {
  numberLine = typeof numberLine !== 'undefined' ? numberLine : null;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ effectiveListMarkerFormat;
  if (numberLine)
    effectiveListMarkerFormat = org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineSpanFormat(numberLine);
  if (this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel == org.apache.royale.textLayout.formats.LeadingModel.BOX) {
    var /** @type {org.apache.royale.geom.Rectangle} */ lineBox = this._curLine.getCSSLineBox(this._blockProgression, curElement, curElementStart, this._textFlow.flowComposer.swfContext, effectiveListMarkerFormat, numberLine);
    this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading = lineBox ? lineBox.bottom : 0;
    return lineBox ? -lineBox.top : 0;
  }
  this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading = this._curLine.getLineLeading(this._blockProgression, curElement, curElementStart);
  if (effectiveListMarkerFormat)
    this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading = Math.max(this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading, org.apache.royale.textLayout.formats.TextLayoutFormat.lineHeightProperty.computeActualPropertyValue(effectiveListMarkerFormat.lineHeight, effectiveListMarkerFormat.fontSize * effectiveListMarkerFormat.yScale));
  return 0;
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} curTextLine
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.finishComposeLine = function(curTextLine, numberLine) {
  var /** @type {number} */ lineHeight = 0;
  var /** @type {number} */ rise;
  var /** @type {number} */ run;
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    rise = (this._curParcel.x + this._curParcel.width) - this._lineSlug.depth;
    run = this._curParcel.y;
  } else {
    rise = this._curParcel.y + this._lineSlug.depth;
    run = this._curParcel.x;
  }
  run += this._lineSlug.leftMargin;
  this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel = this._curParaElement.getEffectiveLeadingModel();
  var /** @type {number} */ secondaryLeadingParameter = this.calculateLeadingParameters(this._curElement, this._curElementStart, numberLine);
  if (this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel == org.apache.royale.textLayout.formats.LeadingModel.BOX) {
    lineHeight += this._atColumnStart ? 0 : this._lastLineDescent;
    lineHeight += secondaryLeadingParameter;
  } else {
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ containerAttrs = this._curParcel.controller.computedFormat;
    var /** @type {Object} */ baselineType = org.apache.royale.textLayout.formats.BaselineOffset.LINE_HEIGHT;
    if (this._atColumnStart) {
      if (containerAttrs.firstBaselineOffset != org.apache.royale.textLayout.formats.BaselineOffset.AUTO && containerAttrs.verticalAlign != org.apache.royale.textLayout.formats.VerticalAlign.BOTTOM && containerAttrs.verticalAlign != org.apache.royale.textLayout.formats.VerticalAlign.MIDDLE) {
        baselineType = containerAttrs.firstBaselineOffset;
        var /** @type {string} */ firstBaselineOffsetBasis = org.apache.royale.textLayout.utils.LocaleUtil.leadingModel(org.apache.royale.utils.Language.string(containerAttrs.locale)) == org.apache.royale.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN ? org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM : org.apache.royale.text.engine.TextBaseline.ROMAN;
        lineHeight -= curTextLine.getBaselinePosition(firstBaselineOffsetBasis);
      } else {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel == org.apache.royale.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD) {
          lineHeight += Math.round(curTextLine.descent) + Math.round(curTextLine.ascent);
          if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB)
            lineHeight = Math.round(rise + lineHeight) - rise;
          else
            lineHeight = rise - Math.round(rise - lineHeight);
          baselineType = 0;
        } else {
          baselineType = org.apache.royale.textLayout.formats.BaselineOffset.ASCENT;
          if (curTextLine.hasGraphicElement) {
            var /** @type {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment} */ firstLineAdjustment = this.org_apache_royale_textLayout_compose_BaseCompose_getLineAdjustmentForInline(curTextLine, this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel, true);
            if (firstLineAdjustment != null) {
              if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
                firstLineAdjustment.rise = -(firstLineAdjustment.rise);
              }
              this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading += firstLineAdjustment.leading;
              rise += firstLineAdjustment.rise;
            }
          }
          lineHeight -= curTextLine.getBaselinePosition(org.apache.royale.text.engine.TextBaseline.ROMAN);
        }
      }
    }
    if (baselineType == org.apache.royale.textLayout.formats.BaselineOffset.ASCENT) {
      
      var /** @type {number} */ curLineAscent = this._curLine.getLineTypographicAscent(this._curElement, this._curElementStart, curTextLine);
      if (numberLine) {
        
        lineHeight += Math.max(curLineAscent, org.apache.royale.textLayout.compose.utils.TextLineUtil.getTextLineTypographicAscent(numberLine, null, 0, 0));
      }
      else
        lineHeight += curLineAscent;
    } else {
      if (baselineType == org.apache.royale.textLayout.formats.BaselineOffset.LINE_HEIGHT) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel == org.apache.royale.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD) {
          lineHeight += Math.round(this._lastLineDescent) + Math.round(curTextLine.ascent) + Math.round(curTextLine.descent) + Math.round(this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading);
        } else if (this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel == org.apache.royale.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP) {
          lineHeight += this._lastLineDescent + curTextLine.ascent + this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading;
        } else {
          var /** @type {boolean} */ curLeadingDirectionUp = this._atColumnStart ? true : org.apache.royale.textLayout.elements.LeadingUtils.useUpLeadingDirection(this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel);
          var /** @type {boolean} */ prevLeadingDirectionUp = this._atColumnStart || this._lastLineLeadingModel == "" ? true : org.apache.royale.textLayout.elements.LeadingUtils.useUpLeadingDirection(this._lastLineLeadingModel);
          if (curLeadingDirectionUp) {
            lineHeight += this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading;
          } else {
            if (!prevLeadingDirectionUp) {
              lineHeight += this._lastLineLeading;
            } else {
              lineHeight += this._lastLineDescent + curTextLine.ascent;
            }
          }
        }
      }
      else
        lineHeight += Number(baselineType);
    }
    if (curTextLine.hasGraphicElement && baselineType != org.apache.royale.textLayout.formats.BaselineOffset.ASCENT) {
      var /** @type {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment} */ adjustment = this.org_apache_royale_textLayout_compose_BaseCompose_getLineAdjustmentForInline(curTextLine, this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel, false);
      if (adjustment != null) {
        if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
          adjustment.rise = -(adjustment.rise);
        }
        this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading += adjustment.leading;
        rise += adjustment.rise;
      }
    }
  }
  this.org_apache_royale_textLayout_compose_BaseCompose__firstLineDescentAndLeading = this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? -lineHeight : lineHeight - curTextLine.ascent;
  rise += this.org_apache_royale_textLayout_compose_BaseCompose__firstLineDescentAndLeading;
  var /** @type {number} */ spaceBefore = this._atColumnStart && (this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel != org.apache.royale.textLayout.formats.LeadingModel.BOX) ? 0 : this._curLine.spaceBefore;
  var /** @type {number} */ spaceCarried = this._atColumnStart ? 0 : this._paragraphSpaceCarried;
  if (spaceBefore != 0 || spaceCarried != 0) {
    var /** @type {number} */ spaceAdjust = Math.max(spaceBefore, spaceCarried);
    rise += this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? -spaceAdjust : spaceAdjust;
  }
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB)
    this._curLine.setXYAndHeight(run, rise, lineHeight);
  else
    this._curLine.setXYAndHeight(rise, run, lineHeight);
};


/** Delayed application of alignment when measuring 
 * @private
 * @param {number} effectiveParcelWidth
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_applyTextAlign = function(effectiveParcelWidth) {
  var /** @type {org.apache.royale.text.engine.ITextLine} */ textLine;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ numberLine;
  var /** @type {org.apache.royale.textLayout.compose.ITextFlowLine} */ line;
  var /** @type {org.apache.royale.textLayout.compose.BaseCompose.AlignData} */ alignData;
  var /** @type {number} */ coord;
  var /** @type {number} */ delta;
  var /** @type {number} */ adjustedLogicalRight;
  var /** @type {number} */ extraSpace;
  var /** @type {number} */ leftSideGap;
  var /** @type {number} */ rightSideGap;
  var /** @type {number} */ numberLineMetric;
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    var foreachiter2_target = this.org_apache_royale_textLayout_compose_BaseCompose__alignLines;
    for (var foreachiter2 in foreachiter2_target) 
    {
    alignData = foreachiter2_target[foreachiter2];
    {
      textLine = alignData.textLine;
      rightSideGap = alignData.rightSideGap;
      leftSideGap = alignData.leftSideGap;
      extraSpace = effectiveParcelWidth - leftSideGap - rightSideGap - textLine.textWidth;
      delta = (alignData.textAlign == org.apache.royale.textLayout.formats.TextAlign.CENTER ? extraSpace / 2 : extraSpace);
      coord = this._curParcel.x + leftSideGap + delta;
      if (alignData.textAlign != org.apache.royale.textLayout.formats.TextAlign.LEFT) {
        line = textLine.userData;
        if (line)
          line.x = coord;
        textLine.x = coord;
      }
      adjustedLogicalRight = alignData.lineWidth + coord + Math.max(rightSideGap, 0);
      this._parcelRight = Math.max(adjustedLogicalRight, this._parcelRight);
      numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(textLine);
      if (numberLine && org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) {
        numberLine.x = org.apache.royale.textLayout.compose.BaseCompose.computeNumberLineAlignment(alignData, textLine.textWidth, textLine.x, numberLine, coord, delta, extraSpace);
        alignData.textFlowLine.numberLinePosition = numberLine.x;
        numberLineMetric = numberLine.x + textLine.x;
        if (numberLineMetric < this._parcelLeft)
          this._parcelLeft = numberLineMetric;
        numberLineMetric += org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
        if (numberLineMetric > this._parcelRight)
          this._parcelRight = numberLineMetric;
      }
    }}
    
  } else {
    var foreachiter3_target = this.org_apache_royale_textLayout_compose_BaseCompose__alignLines;
    for (var foreachiter3 in foreachiter3_target) 
    {
    alignData = foreachiter3_target[foreachiter3];
    {
      textLine = alignData.textLine;
      rightSideGap = alignData.rightSideGap;
      leftSideGap = alignData.leftSideGap;
      extraSpace = effectiveParcelWidth - leftSideGap - rightSideGap - textLine.textWidth;
      delta = (alignData.textAlign == org.apache.royale.textLayout.formats.TextAlign.CENTER ? extraSpace / 2 : extraSpace);
      coord = this._curParcel.y + leftSideGap + delta;
      if (alignData.textAlign != org.apache.royale.textLayout.formats.TextAlign.LEFT) {
        line = textLine.userData;
        if (line)
          line.y = coord;
        textLine.y = coord;
      }
      adjustedLogicalRight = alignData.lineWidth + coord + Math.max(rightSideGap, 0);
      this._parcelBottom = Math.max(adjustedLogicalRight, this._parcelBottom);
      numberLine = org.apache.royale.textLayout.compose.utils.TextLineUtil.findNumberLine(textLine);
      if (numberLine && org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineListStylePosition(numberLine) == org.apache.royale.textLayout.formats.ListStylePosition.OUTSIDE) {
        numberLine.y = org.apache.royale.textLayout.compose.BaseCompose.computeNumberLineAlignment(alignData, textLine.textWidth, textLine.y, numberLine, coord, delta, extraSpace);
        alignData.textFlowLine.numberLinePosition = numberLine.y;
        numberLineMetric = numberLine.y + textLine.y;
        if (numberLineMetric < this._parcelTop)
          this._parcelTop = numberLineMetric;
        numberLineMetric += org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
        if (numberLineMetric > this._parcelBottom)
          this._parcelBottom = numberLineMetric;
      }
    }}
    
  }
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} curLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.commitLastLineState = function(curLine) {
  this._lastLineDescent = this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel == org.apache.royale.textLayout.formats.LeadingModel.BOX ? this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading : curLine.descent;
  this._lastLineLeading = this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeading;
  this._lastLineLeadingModel = this.org_apache_royale_textLayout_compose_BaseCompose__curLineLeadingModel;
};


/**
 * @protected
 * @param {boolean} canVerticalAlign
 * @param {org.apache.royale.textLayout.compose.Parcel} nextParcel
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.doVerticalAlignment = function(canVerticalAlign, nextParcel) {
  
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.finalParcelAdjustment = function(controller) {
  
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {org.apache.royale.textLayout.compose.Parcel} nextParcel
 * @return {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.finishParcel = function(controller, nextParcel) {
  if (this._curParcelStart == this._curElementStart + this._curElementOffset) {
    
    return false;
  }
  var /** @type {number} */ totalDepth = this._parcelList.totalDepth;
  if (this._textFlow.configuration.overflowPolicy == org.apache.royale.textLayout.elements.OverflowPolicy.FIT_DESCENDERS && !isNaN(this._lastLineDescent))
    totalDepth += this._lastLineDescent;
  totalDepth = Math.max(totalDepth, this._contentCommittedHeight);
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    this._parcelLeft = this._curParcel.x;
    this._parcelTop = this._curParcel.y;
    this._parcelRight = this._contentCommittedExtent + this._curParcel.x;
    this._parcelBottom = totalDepth + this._curParcel.y;
  } else {
    this._parcelLeft = this._curParcel.right - totalDepth;
    this._parcelTop = this._curParcel.y;
    this._parcelRight = this._curParcel.right;
    this._parcelBottom = this._contentCommittedExtent + this._curParcel.y;
  }
  if (this.org_apache_royale_textLayout_compose_BaseCompose__alignLines && this.org_apache_royale_textLayout_compose_BaseCompose__alignLines.length > 0) {
    
    this.org_apache_royale_textLayout_compose_BaseCompose_applyTextAlign(this._contentLogicalExtent);
    org.apache.royale.textLayout.compose.BaseCompose.releaseAlignData(this.org_apache_royale_textLayout_compose_BaseCompose__alignLines[0]);
    this.org_apache_royale_textLayout_compose_BaseCompose__alignLines.length = 0;
  }
  var /** @type {boolean} */ canVerticalAlign = false;
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    if (!controller.measureHeight && (!this._curParcel.fitAny || this._curElementStart + this._curElementOffset >= this._textFlow.textLength))
      canVerticalAlign = true;
  } else {
    if (!controller.measureWidth && (!this._curParcel.fitAny || this._curElementStart + this._curElementOffset >= this._textFlow.textLength))
      canVerticalAlign = true;
  }
  this.doVerticalAlignment(canVerticalAlign, nextParcel);
  this.finalParcelAdjustment(controller);
  this._contentLogicalExtent = 0;
  this._contentCommittedExtent = 0;
  this._contentCommittedHeight = 0;
  this._accumulatedMinimumStart = org.apache.royale.text.engine.Constants.MAX_LINE_WIDTH;
  return true;
};


/** apply vj and adjust the parcel bounds 
 * @protected
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 * @param {string} vjType
 * @param {Array} lines
 * @param {number} beginIndex
 * @param {number} numLines
 * @param {number} beginFloatIndex
 * @param {number} endFloatIndex
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.applyVerticalAlignmentToColumn = function(controller, vjType, lines, beginIndex, numLines, beginFloatIndex, endFloatIndex) {
  var /** @type {org.apache.royale.textLayout.compose.IVerticalJustificationLine} */ firstLine = lines[beginIndex];
  var /** @type {org.apache.royale.textLayout.compose.IVerticalJustificationLine} */ lastLine = lines[beginIndex + numLines - 1];
  var /** @type {number} */ firstLineCoord;
  var /** @type {number} */ lastLineCoord;
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    firstLineCoord = firstLine.y;
    lastLineCoord = lastLine.y;
  } else {
    firstLineCoord = firstLine.x;
    lastLineCoord = lastLine.x;
  }
  var /** @type {number} */ firstLineAdjustment = org.apache.royale.textLayout.compose.VerticalJustifier.applyVerticalAlignmentToColumn(controller, vjType, lines, beginIndex, numLines, beginFloatIndex, endFloatIndex);
  if (!isNaN(this._parcelLogicalTop))
    this._parcelLogicalTop += firstLineAdjustment;
  if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    this._parcelTop += firstLine.y - firstLineCoord;
    this._parcelBottom += lastLine.y - lastLineCoord;
  } else {
    this._parcelRight += firstLine.x - firstLineCoord;
    this._parcelLeft += lastLine.x - lastLineCoord;
  }
};


/**
 * @protected
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.finishController = function(controller) {
  var /** @type {number} */ controllerTextLength = (this._curElementStart + this._curElementOffset - controller.absoluteStart) >> 0;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ nextCC = this._flowComposer.getControllerAt((this._flowComposer.getControllerIndex(controller) + 1) >> 0);
  if (nextCC && nextCC.absoluteStart != 0 && this.org_apache_royale_textLayout_compose_BaseCompose__correctTextLength)
    controllerTextLength = (nextCC.absoluteStart - controller.absoluteStart) >> 0;
  if (controllerTextLength != 0) {
    var /** @type {number} */ paddingLeft = controller.getTotalPaddingLeft();
    var /** @type {number} */ paddingTop = controller.getTotalPaddingTop();
    var /** @type {number} */ paddingRight = controller.getTotalPaddingRight();
    var /** @type {number} */ paddingBottom = controller.getTotalPaddingBottom();
    if (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
      if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft > 0) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft < paddingLeft)
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft = 0;
        else
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft -= paddingLeft;
      }
      if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop > 0) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop < paddingTop)
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop = 0;
        else
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop -= paddingTop;
      }
      if (isNaN(controller.compositionWidth))
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight += paddingRight; else if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight < controller.compositionWidth) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight > controller.compositionWidth - paddingRight)
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight = controller.compositionWidth;
        else
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight += paddingRight;
      }
      this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom += paddingBottom;
    } else {
      this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft -= paddingLeft;
      if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop > 0) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop < paddingTop)
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop = 0;
        else
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop -= paddingTop;
      }
      if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight < 0) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight > -paddingRight) {
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight = 0;
        }
        else
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight += paddingRight;
      }
      if (isNaN(controller.compositionHeight))
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom += paddingBottom; else if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom < controller.compositionHeight) {
        if (this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom > controller.compositionHeight - paddingBottom)
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom = controller.compositionHeight;
        else
          this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom += paddingBottom;
      }
    }
    controller.setContentBounds(this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft, this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop, this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight - this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft, this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom - this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop);
  }
  else
    controller.setContentBounds(0, 0, 0, 0);
  controller.setTextLength(controllerTextLength);
  controller.finalParcelStart = this._curParcelStart;
};


/**
 * @private
 * @param {org.apache.royale.textLayout.container.IContainerController} oldController
 * @param {org.apache.royale.textLayout.container.IContainerController} newController
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_clearControllers = function(oldController, newController) {
  var /** @type {number} */ firstToClear = (oldController ? this._flowComposer.getControllerIndex(oldController) + 1 : 0) >> 0;
  var /** @type {number} */ lastToClear = (newController ? this._flowComposer.getControllerIndex(newController) : this._flowComposer.numControllers - 1) >> 0;
  while (firstToClear <= lastToClear) {
    var /** @type {org.apache.royale.textLayout.container.IContainerController} */ controllerToClear = this._flowComposer.getControllerAt(firstToClear);
    controllerToClear.setContentBounds(0, 0, 0, 0);
    controllerToClear.setTextLength(0);
    controllerToClear.clearComposedLines(controllerToClear.absoluteStart);
    controllerToClear.clearFloatsAt(controllerToClear.absoluteStart);
    firstToClear++;
  }
};


/**
 * @protected
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.advanceToNextParcel = function() {
  this.parcelHasChanged(this._parcelList.atLast() ? null : this._parcelList.getParcelAt((this._parcelList.currentParcelIndex + 1) >> 0));
  this._parcelList.next();
};


/** Go to next container
 * @protected
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.advanceToNextContainer = function() {
  var /** @type {org.apache.royale.textLayout.compose.Parcel} */ newParcel = (this._parcelList.atLast() ? null : this._parcelList.getParcelAt((this._parcelList.currentParcelIndex + 1) >> 0));
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ oldController = this._curParcel ? this._curParcel.controller : null;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ newController;
  for (; !this._parcelList.atLast(); this._parcelList.next()) {
    newParcel = (this._parcelList.atLast() ? null : this._parcelList.getParcelAt((this._parcelList.currentParcelIndex + 1) >> 0));
    newController = newParcel ? newParcel.controller : null;
    if (oldController != newController)
      break;
  }
  this.parcelHasChanged(this._parcelList.atLast() ? null : this._parcelList.getParcelAt((this._parcelList.currentParcelIndex + 1) >> 0));
  this._parcelList.next();
};


/** This is called when the parcel has changed 
 * @asparam oldParcel - the parcel we had before (you can get the new parcel from the parcel list)
 * @protected
 * @param {org.apache.royale.textLayout.compose.Parcel} newParcel
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.parcelHasChanged = function(newParcel) {
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ oldController = this._curParcel ? this._curParcel.controller : null;
  var /** @type {org.apache.royale.textLayout.container.IContainerController} */ newController = newParcel ? newParcel.controller : null;
  if (oldController != null && this._lastGoodStart != -1) {
    oldController.clearFloatsAt(this._lastGoodStart);
    this._curLine = null;
    this._linePass = 0;
    this._pushInFloats.length = 0;
  }
  if (this._curParcel != null) {
    if (this.finishParcel(oldController, newParcel)) {
      if (this._parcelLeft < this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft)
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerLeft = this._parcelLeft;
      if (this._parcelRight > this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight)
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerRight = this._parcelRight;
      if (this._parcelTop < this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop)
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerTop = this._parcelTop;
      if (this._parcelBottom > this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom)
        this.org_apache_royale_textLayout_compose_BaseCompose__controllerBottom = this._parcelBottom;
    }
  }
  if (oldController != newController) {
    if (oldController)
      this.finishController(oldController);
    this.org_apache_royale_textLayout_compose_BaseCompose_resetControllerBounds();
    if (this._flowComposer.numControllers > 1) {
      if (oldController == null && this._startController)
        this.org_apache_royale_textLayout_compose_BaseCompose_clearControllers(this._startController, newController);
      else
        this.org_apache_royale_textLayout_compose_BaseCompose_clearControllers(oldController, newController);
    }
    if (newController) {
      
      if (oldController)
        this._startComposePosition = newController.absoluteStart;
      this.org_apache_royale_textLayout_compose_BaseCompose_calculateControllerVisibleBounds(newController);
    }
  }
  this._curParcel = newParcel;
  this._curParcelStart = (this._curElementStart + this._curElementOffset) >> 0;
  this._atColumnStart = true;
  this._workingTotalDepth = 0;
  if (newController) {
    this._verticalSpaceCarried = (this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) ? newController.getTotalPaddingRight() : newController.getTotalPaddingTop();
    this._measuring = this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB && newController.measureWidth || this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL && newController.measureHeight;
  }
};


/** Figure out which part of the controller is currently visible, based on the controller's current size and scroll position. 
 * These values are used later to determine which lines are going to be visible.
 * @private
 * @param {org.apache.royale.textLayout.container.IContainerController} controller
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_calculateControllerVisibleBounds = function(controller) {
  var /** @type {number} */ MAX_VALUE = 2147483647;
  var /** @type {number} */ width = controller.measureWidth ? Number.MAX_VALUE : controller.compositionWidth;
  var /** @type {number} */ xScroll = controller.horizontalScrollPosition;
  this._controllerVisibleBoundsXTW = org.apache.royale.textLayout.utils.Twips.roundTo((this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) ? xScroll - width : xScroll);
  this._controllerVisibleBoundsYTW = org.apache.royale.textLayout.utils.Twips.roundTo(controller.verticalScrollPosition);
  this._controllerVisibleBoundsWidthTW = controller.measureWidth ? MAX_VALUE : org.apache.royale.textLayout.utils.Twips.to(controller.compositionWidth);
  this._controllerVisibleBoundsHeightTW = controller.measureHeight ? MAX_VALUE : org.apache.royale.textLayout.utils.Twips.to(controller.compositionHeight);
};


/** @asprivate 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} curTextLine
 * @param {string} curLeadingDir
 * @param {boolean} isFirstLine
 * @return {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_getLineAdjustmentForInline = function(curTextLine, curLeadingDir, isFirstLine) {
  var /** @type {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment} */ adjustment = null;
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = this._curLine.paragraph;
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ flowElem = this._curElement;
  var /** @type {number} */ curPos = flowElem.getAbsoluteStart();
  var /** @type {number} */ largestPointSize = flowElem.getEffectiveFontSize();
  var /** @type {number} */ largestImg = 0;
  while (flowElem && curPos < this._curLine.absoluteStart + this._curLine.textLength) {
    if (curPos >= this._curLine.absoluteStart || curPos + flowElem.textLength >= this._curLine.absoluteStart) {
      if (flowElem.className == "InlineGraphicElement") {
        var /** @type {org.apache.royale.textLayout.elements.IInlineGraphicElement} */ inlineImg = flowElem;
        if (inlineImg.effectiveFloat == org.apache.royale.textLayout.formats.Float.NONE && !(this._blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL && (flowElem.parent.className == "TCYElement"))) {
          if (largestImg < inlineImg.getEffectiveFontSize()) {
            largestImg = inlineImg.getEffectiveFontSize();
            if (largestImg >= largestPointSize) {
              var /** @type {string} */ domBaseline = org.apache.royale.utils.Language.string(flowElem.computedFormat.dominantBaseline);
              if (domBaseline == org.apache.royale.textLayout.formats.FormatValue.AUTO)
                domBaseline = org.apache.royale.textLayout.utils.LocaleUtil.dominantBaseline(org.apache.royale.utils.Language.string(para.computedFormat.locale));
              if (domBaseline == org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_CENTER) {
                var /** @type {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment} */ curAdjustment = this.org_apache_royale_textLayout_compose_BaseCompose_calculateLinePlacementAdjustment(curTextLine, domBaseline, curLeadingDir, inlineImg, isFirstLine);
                if (!adjustment || Math.abs(curAdjustment.rise) > Math.abs(adjustment.rise) || Math.abs(curAdjustment.leading) > Math.abs(adjustment.leading)) {
                  if (adjustment) {
                    adjustment.rise = curAdjustment.rise;
                    adjustment.leading = curAdjustment.leading;
                  }
                  else
                    adjustment = curAdjustment;
                }
              }
            }
          }
        }
      } else {
        var /** @type {number} */ tempSize = flowElem.getEffectiveFontSize();
        if (largestPointSize <= tempSize) {
          largestPointSize = tempSize;
        }
        if (adjustment && largestImg < largestPointSize) {
          adjustment.leading = 0;
          adjustment.rise = 0;
        }
      }
    }
    curPos += flowElem.textLength;
    flowElem = flowElem.getNextLeaf(para);
  }
  return adjustment;
};


/** @asprivate 
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} curTextLine
 * @param {string} domBaseline
 * @param {string} curLeadingDir
 * @param {org.apache.royale.textLayout.elements.IInlineGraphicElement} inlineImg
 * @param {boolean} isFirstLine
 * @return {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.org_apache_royale_textLayout_compose_BaseCompose_calculateLinePlacementAdjustment = function(curTextLine, domBaseline, curLeadingDir, inlineImg, isFirstLine) {
  var /** @type {org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment} */ curAdjustment = new org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment();
  var /** @type {number} */ imgHeight = inlineImg.getEffectiveLineHeight(this._blockProgression);
  var /** @type {number} */ lineLeading = org.apache.royale.textLayout.formats.TextLayoutFormat.lineHeightProperty.computeActualPropertyValue(inlineImg.computedFormat.lineHeight, curTextLine.textHeight);
  if (domBaseline == org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_CENTER) {
    if (!isFirstLine) {
      curAdjustment.rise += (imgHeight - lineLeading) / 2;
    } else {
      curAdjustment.leading -= (imgHeight - lineLeading) / 2;
    }
  }
  return curAdjustment;
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.pushInsideListItemMargins = function(numberLine) {
  
  if (numberLine && this._listItemElement.computedFormat.listStylePosition == org.apache.royale.textLayout.formats.ListStylePosition.INSIDE) {
    var /** @type {number} */ numberLineWidth = org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
    this._parcelList.pushInsideListItemMargin(numberLineWidth);
  }
};


/**
 * @protected
 * @param {org.apache.royale.text.engine.ITextLine} numberLine
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.popInsideListItemMargins = function(numberLine) {
  
  if (numberLine && this._listItemElement.computedFormat.listStylePosition == org.apache.royale.textLayout.formats.ListStylePosition.INSIDE) {
    var /** @type {number} */ numberLineWidth = org.apache.royale.textLayout.compose.utils.TextLineUtil.getNumberLineInsideLineWidth(numberLine);
    this._parcelList.popInsideListItemMargin(numberLineWidth);
  }
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.compose.ParcelList}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.parcelList;


org.apache.royale.textLayout.compose.BaseCompose.prototype.get__parcelList = function() {
  return this._parcelList;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.startController;


org.apache.royale.textLayout.compose.BaseCompose.prototype.get__startController = function() {
  return this._startController;
};


/**
 * @nocollapse
 * @type {boolean}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.releaseLineCreationData;


org.apache.royale.textLayout.compose.BaseCompose.prototype.get__releaseLineCreationData = function() {
  return this.org_apache_royale_textLayout_compose_BaseCompose__releaseLineCreationData;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.swfContext;


org.apache.royale.textLayout.compose.BaseCompose.prototype.get__swfContext = function() {
  var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ composerContext = this._flowComposer.swfContext;
  return composerContext ? composerContext : org.apache.royale.textLayout.compose.SWFContext.globalSWFContext;
};


Object.defineProperties(org.apache.royale.textLayout.compose.BaseCompose.prototype, /** @lends {org.apache.royale.textLayout.compose.BaseCompose.prototype} */ {
/**
 * @type {org.apache.royale.textLayout.compose.ParcelList}
 */
parcelList: {
get: org.apache.royale.textLayout.compose.BaseCompose.prototype.get__parcelList},
/**
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
startController: {
get: org.apache.royale.textLayout.compose.BaseCompose.prototype.get__startController},
/**
 * @type {boolean}
 */
releaseLineCreationData: {
get: org.apache.royale.textLayout.compose.BaseCompose.prototype.get__releaseLineCreationData},
/**
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
swfContext: {
get: org.apache.royale.textLayout.compose.BaseCompose.prototype.get__swfContext}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BaseCompose', qName: 'org.apache.royale.textLayout.compose.BaseCompose', kind: 'class' }], interfaces: [org.apache.royale.textLayout.compose.IComposer] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'parcelList': { type: 'org.apache.royale.textLayout.compose.ParcelList', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose'},
        'startController': { type: 'org.apache.royale.textLayout.container.IContainerController', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose'},
        'swfContext': { type: 'org.apache.royale.textLayout.compose.ISWFContext', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose'}
      };
    },
    methods: function () {
      return {
        'releaseAnyReferences': { type: 'void', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose'},
        'composeTextFlow': { type: 'int', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ]; }},
        'computeTextFlowLineMinimumLogicalTop': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ITextFlowLine', false ,'org.apache.royale.text.engine.ITextLine', false ]; }},
        '|computeNumberLineAlignment': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose', parameters: function () { return [ 'AlignData', false ,'Number', false ,'Number', false ,'org.apache.royale.text.engine.ITextLine', false ,'Number', false ,'Number', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./BaseCompose.js.map


/**
 * @constructor
 * @param {org.apache.royale.textLayout.compose.ITextFlowLine} tfl
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData = function(tfl) {
  this.textFlowLine = tfl;
};


/**
 * @type {org.apache.royale.textLayout.compose.ITextFlowLine}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.textFlowLine;


/**
 * @type {org.apache.royale.text.engine.ITextLine}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.textLine;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.lineWidth;


/**
 * @type {string}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.textAlign;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.leftSideGap;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.rightSideGap;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.textIndent;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AlignData', qName: 'org.apache.royale.textLayout.compose.BaseCompose.AlignData', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'textFlowLine': { type: 'org.apache.royale.textLayout.compose.ITextFlowLine', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.textFlowLine = v : inst.textFlowLine;}},
        'textLine': { type: 'org.apache.royale.text.engine.ITextLine', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.textLine = v : inst.textLine;}},
        'lineWidth': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.lineWidth = v : inst.lineWidth;}},
        'textAlign': { type: 'String', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.textAlign = v : inst.textAlign;}},
        'leftSideGap': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.leftSideGap = v : inst.leftSideGap;}},
        'rightSideGap': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.rightSideGap = v : inst.rightSideGap;}},
        'textIndent': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.AlignData */ inst, /** * */ v) {return v !== undefined ? inst.textIndent = v : inst.textIndent;}}
      };
    },
    methods: function () {
      return {
        'AlignData': { type: '', declaredBy: 'org.apache.royale.textLayout.compose.BaseCompose.AlignData', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ITextFlowLine', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.AlignData.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @constructor
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment = function() {
};


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment.prototype.rise = 0;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment.prototype.leading = 0;


/**
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment.prototype.lineHeight = 0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LeadingAdjustment', qName: 'org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'rise': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment */ inst, /** * */ v) {return v !== undefined ? inst.rise = v : inst.rise;}},
        'leading': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment */ inst, /** * */ v) {return v !== undefined ? inst.leading = v : inst.leading;}},
        'lineHeight': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment */ inst, /** * */ v) {return v !== undefined ? inst.lineHeight = v : inst.lineHeight;}}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.compose.BaseCompose.LeadingAdjustment.prototype.ROYALE_COMPILE_FLAGS = 10;
