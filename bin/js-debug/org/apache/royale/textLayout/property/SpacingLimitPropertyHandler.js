/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/property/SpacingLimitPropertyHandler.as
 * org.apache.royale.textLayout.property.SpacingLimitPropertyHandler
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.property.SpacingLimitPropertyHandler');
/* Royale Dependency List: org.apache.royale.textLayout.property.PropertyUtil,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.property.PropertyHandler');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.property.PropertyHandler}
 * @param {string} minPercentValue
 * @param {string} maxPercentValue
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler = function(minPercentValue, maxPercentValue) {
  org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.base(this, 'constructor');
  this.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler__minPercentValue = minPercentValue;
  this.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler__maxPercentValue = maxPercentValue;
};
goog.inherits(org.apache.royale.textLayout.property.SpacingLimitPropertyHandler, org.apache.royale.textLayout.property.PropertyHandler);


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler__minPercentValue;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler__maxPercentValue;


/**
 * @override
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.toXMLString = function(val) {
  if (val.hasOwnProperty("optimumSpacing") && val.hasOwnProperty("minimumSpacing") && val.hasOwnProperty("maximumSpacing"))
    return val.optimumSpacing.toString() + ',' + val.minimumSpacing.toString() + ',' + val.maximumSpacing.toString();
  return val.toString();
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler._spacingLimitPattern = /\d+%/g;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler._spacingLimitArrayPattern = /^\s*(\d+%)(\s*,\s*)(\d+%)?(\s*,\s*)(\d+%)?\s*$/;


/**
 * @override
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.owningHandlerCheck = function(newVal) {
  if (org.apache.royale.utils.Language.is(newVal, String)) {
    if (org.apache.royale.textLayout.property.SpacingLimitPropertyHandler._spacingLimitArrayPattern.test(newVal))
      return newVal;
  }
  else if (newVal.hasOwnProperty("optimumSpacing") && newVal.hasOwnProperty("minimumSpacing") && newVal.hasOwnProperty("maximumSpacing"))
    return newVal;
  return undefined;
};


/**
 * @private
 * @param {*} value
 * @return {boolean}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler_checkValue = function(value) {
  var /** @type {number} */ minLegalValue = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(this.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler__minPercentValue);
  var /** @type {number} */ maxLegalValue = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(this.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler__maxPercentValue);
  var /** @type {number} */ optValue = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(value.optimumSpacing);
  if (optValue < minLegalValue || optValue > maxLegalValue)
    return false;
  var /** @type {number} */ minValue = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(value.minimumSpacing);
  if (minValue < minLegalValue || minValue > maxLegalValue)
    return false;
  var /** @type {number} */ maxValue = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(value.maximumSpacing);
  if (maxValue < minLegalValue || maxValue > maxLegalValue)
    return false;
  if (optValue < minValue || optValue > maxValue)
    return false;
  if (minValue > maxValue)
    return false;
  return true;
};


/** parse the input string and create a valid input value 
 * @override
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.setHelper = function(newVal) {
  var /** @type {string} */ s = newVal;
  if (s == null)
    return newVal;
  if (org.apache.royale.textLayout.property.SpacingLimitPropertyHandler._spacingLimitArrayPattern.test(newVal)) {
    var /** @type {Object} */ result = {};
    var /** @type {Array} */ splits = s.match(org.apache.royale.textLayout.property.SpacingLimitPropertyHandler._spacingLimitPattern);
    if (splits.length == 1) {
      result.optimumSpacing = splits[0];
      result.minimumSpacing = result.optimumSpacing;
      result.maximumSpacing = result.optimumSpacing;
    } else if (splits.length == 3) {
      result.optimumSpacing = splits[0];
      result.minimumSpacing = splits[1];
      result.maximumSpacing = splits[2];
    }
    else
      return undefined;
    if (this.org_apache_royale_textLayout_property_SpacingLimitPropertyHandler_checkValue(result))
      return result;
  }
  return undefined;
};


org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.get__className = function() {
  return "SpacingLimitPropertyHandler";
};


org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.get__customXMLStringHandler = function() {
  return true;
};


Object.defineProperties(org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype, /** @lends {org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.get__className},
/**
 * @type {boolean}
 */
customXMLStringHandler: {
get: org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.get__customXMLStringHandler}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SpacingLimitPropertyHandler', qName: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler'},
        'customXMLStringHandler': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler'}
      };
    },
    methods: function () {
      return {
        'SpacingLimitPropertyHandler': { type: '', declaredBy: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'toXMLString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler', parameters: function () { return [ 'Object', false ]; }},
        'owningHandlerCheck': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler', parameters: function () { return [ '*', false ]; }},
        'setHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.SpacingLimitPropertyHandler', parameters: function () { return [ '*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.property.SpacingLimitPropertyHandler.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./SpacingLimitPropertyHandler.js.map
