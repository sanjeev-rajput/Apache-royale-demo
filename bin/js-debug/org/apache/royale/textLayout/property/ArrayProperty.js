/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/property/ArrayProperty.as
 * org.apache.royale.textLayout.property.ArrayProperty
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.property.ArrayProperty');
/* Royale Dependency List: org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.property.PropertyUtil,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.property.Property');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.property.Property}
 * @param {string} nameValue
 * @param {Array} defaultValue
 * @param {boolean} inherited
 * @param {Array} categories
 * @param {Object} mType
 */
org.apache.royale.textLayout.property.ArrayProperty = function(nameValue, defaultValue, inherited, categories, mType) {
  org.apache.royale.textLayout.property.ArrayProperty.base(this, 'constructor', nameValue, defaultValue, inherited, categories);
  this.org_apache_royale_textLayout_property_ArrayProperty__memberType = mType;
  
  
};
goog.inherits(org.apache.royale.textLayout.property.ArrayProperty, org.apache.royale.textLayout.property.Property);


/**
 * @private
 * @type {*}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.org_apache_royale_textLayout_property_ArrayProperty__memberType;


/**
 * @protected
 * @param {Object} val
 * @return {boolean}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.checkArrayTypes = function(val) {
  if (val == null)
    return true;
  if (!org.apache.royale.utils.Language.is(val, Array))
    return false;
  if (this.org_apache_royale_textLayout_property_ArrayProperty__memberType == null)
    return true;
  var foreachiter0_target = val;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var obj = foreachiter0_target[foreachiter0];
  {
    if (!org.apache.royale.utils.Language.is(obj, this.org_apache_royale_textLayout_property_ArrayProperty__memberType))
      return false;
  }}
  
  return true;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.setHelper = function(currVal, newVal) {
  if (newVal === null)
    newVal = undefined;
  if (newVal == undefined || newVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT)
    return newVal;
  if (org.apache.royale.utils.Language.is(newVal, String))
    newVal = this.org_apache_royale_textLayout_property_ArrayProperty_valueFromString(String(newVal));
  if (!this.checkArrayTypes(newVal)) {
    org.apache.royale.textLayout.property.PropertyUtil.errorHandler(this, newVal);
    return currVal;
  }
  return newVal.slice();
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.concatInheritOnlyHelper = function(currVal, concatVal) {
  return (this.inherited && currVal === undefined) || currVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT ? (org.apache.royale.utils.Language.is(concatVal, Array) ? concatVal.slice() : concatVal) : currVal;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.concatHelper = function(currVal, concatVal) {
  if (this.inherited)
    return currVal === undefined || currVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT ? (org.apache.royale.utils.Language.is(concatVal, Array) ? concatVal.slice() : concatVal) : currVal;
  if (currVal === undefined)
    return this.defaultValue;
  return currVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT ? (org.apache.royale.utils.Language.is(concatVal, Array) ? concatVal.slice() : concatVal) : currVal;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.equalHelper = function(v1, v2) {
  if (this.org_apache_royale_textLayout_property_ArrayProperty__memberType != null) {
    var /** @type {Array} */ v1Array = v1;
    var /** @type {Array} */ v2Array = v2;
    if (v1Array && v2Array) {
      if (v1Array.length == v2Array.length) {
        var /** @type {Object} */ desc = this.org_apache_royale_textLayout_property_ArrayProperty__memberType.description;
        for (var /** @type {number} */ i = 0; i < v1Array.length; ++i) {
          if (!org.apache.royale.textLayout.property.PropertyUtil.equalAllHelper(desc, v1[i], v2[i]))
            return false;
        }
        return true;
      }
    }
  }
  return v1 == v2;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.toXMLString = function(val) {
  if (val == org.apache.royale.textLayout.formats.FormatValue.INHERIT)
    return String(val);
  var /** @type {Object} */ desc = this.org_apache_royale_textLayout_property_ArrayProperty__memberType.description;
  var /** @type {string} */ rslt = "";
  var /** @type {boolean} */ addSemi = false;
  var foreachiter1_target = val;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var member = foreachiter1_target[foreachiter1];
  {
    if (addSemi)
      rslt += "; ";
    var /** @type {boolean} */ addComma = false;
    var foreachiter2_target = desc;
    for (var foreachiter2 in foreachiter2_target) 
    {
    var prop = foreachiter2_target[foreachiter2];
    {
      var /** @type {Object} */ memberVal = member[prop.name];
      if (memberVal != null) {
        if (addComma)
          rslt += ", ";
        rslt += prop.name + ":" + prop.toXMLString(memberVal);
        addComma = true;
      }
    }}
    
    addSemi = true;
  }}
  
  return rslt;
};


/** @asprivate 
 * @private
 * @param {string} str
 * @return {*}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.org_apache_royale_textLayout_property_ArrayProperty_valueFromString = function(str) {
  if ((str == null) || (str == ""))
    return null;
  if (str == org.apache.royale.textLayout.formats.FormatValue.INHERIT)
    return str;
  var /** @type {Array} */ result = new Array();
  var /** @type {Object} */ desc = this.org_apache_royale_textLayout_property_ArrayProperty__memberType.description;
  var /** @type {Array} */ attrsAll = str.split('; ');
  var foreachiter3_target = attrsAll;
  for (var foreachiter3 in foreachiter3_target) 
  {
  var attrs = foreachiter3_target[foreachiter3];
  {
    var /** @type {Object} */ obj = new this.org_apache_royale_textLayout_property_ArrayProperty__memberType();
    var /** @type {Array} */ attrsOne = attrs.split(', ');
    var foreachiter4_target = attrsOne;
    for (var foreachiter4 in foreachiter4_target) 
    {
    var attr = foreachiter4_target[foreachiter4];
    {
      var /** @type {Array} */ nameValArr = attr.split(':');
      var /** @type {string} */ propName = org.apache.royale.utils.Language.string(nameValArr[0]);
      var /** @type {string} */ propVal = org.apache.royale.utils.Language.string(nameValArr[1]);
      var foreachiter5_target = desc;
      for (var foreachiter5 in foreachiter5_target) 
      {
      var prop = foreachiter5_target[foreachiter5];
      {
        if (prop.name == propName) {
          obj[propName] = prop.setHelper(propVal, obj[propName]);
          break;
        }
      }}
      
    }}
    
    result.push(obj);
  }}
  
  return result;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.memberType;


org.apache.royale.textLayout.property.ArrayProperty.prototype.get__memberType = function() {
  return this.org_apache_royale_textLayout_property_ArrayProperty__memberType;
};


org.apache.royale.textLayout.property.ArrayProperty.prototype.get__defaultValue = function() {
  return org.apache.royale.textLayout.property.ArrayProperty.superClass_.get__defaultValue.apply(this) == null ? null : org.apache.royale.textLayout.property.ArrayProperty.superClass_.get__defaultValue.apply(this).slice();
};


Object.defineProperties(org.apache.royale.textLayout.property.ArrayProperty.prototype, /** @lends {org.apache.royale.textLayout.property.ArrayProperty.prototype} */ {
/**
 * @type {*}
 */
memberType: {
get: org.apache.royale.textLayout.property.ArrayProperty.prototype.get__memberType},
/**
 * @type {*}
 */
defaultValue: {
get: org.apache.royale.textLayout.property.ArrayProperty.prototype.get__defaultValue}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ArrayProperty', qName: 'org.apache.royale.textLayout.property.ArrayProperty', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'memberType': { type: '*', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty'},
        'defaultValue': { type: '*', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty'}
      };
    },
    methods: function () {
      return {
        'ArrayProperty': { type: '', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty', parameters: function () { return [ 'String', false ,'Array', false ,'Boolean', false ,'Vector.<String>', false ,'Class', false ]; }},
        'setHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty', parameters: function () { return [ '*', false ,'*', false ]; }},
        'concatInheritOnlyHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty', parameters: function () { return [ '*', false ,'*', false ]; }},
        'concatHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty', parameters: function () { return [ '*', false ,'*', false ]; }},
        'equalHelper': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty', parameters: function () { return [ '*', false ,'*', false ]; }},
        'toXMLString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.ArrayProperty', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.property.ArrayProperty.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ArrayProperty.js.map
