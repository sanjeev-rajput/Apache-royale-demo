/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/property/Property.as
 * org.apache.royale.textLayout.property.Property
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.property.Property');
/* Royale Dependency List: org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.property.PropertyHandler,org.apache.royale.textLayout.property.PropertyUtil,org.apache.royale.utils.Language,XML*/




/** Initializer.  Each property has a name and a default. 
 * @constructor
 * @param {string} nameValue
 * @param {*} defaultValue
 * @param {boolean} inherited
 * @param {Array} categories
 */
org.apache.royale.textLayout.property.Property = function(nameValue, defaultValue, inherited, categories) {
  this.org_apache_royale_textLayout_property_Property__name = nameValue;
  this.org_apache_royale_textLayout_property_Property__default = defaultValue;
  this.org_apache_royale_textLayout_property_Property__inherited = inherited;
  this.org_apache_royale_textLayout_property_Property__categories = categories;
  this.org_apache_royale_textLayout_property_Property__hasCustomExporterHandler = false;
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.property.Property.prototype.org_apache_royale_textLayout_property_Property__name;


/**
 * @private
 * @type {*}
 */
org.apache.royale.textLayout.property.Property.prototype.org_apache_royale_textLayout_property_Property__default;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.property.Property.prototype.org_apache_royale_textLayout_property_Property__inherited;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.property.Property.prototype.org_apache_royale_textLayout_property_Property__categories;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.property.Property.prototype.org_apache_royale_textLayout_property_Property__hasCustomExporterHandler;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.property.Property.prototype.org_apache_royale_textLayout_property_Property__numberPropertyHandler;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.textLayout.property.Property.prototype._handlers;


/**
 * @param {...} rest
 */
org.apache.royale.textLayout.property.Property.prototype.addHandlers = function(rest) {
  rest = Array.prototype.slice.call(arguments, 0);
  this._handlers = org.apache.royale.utils.Language.arrayAsVector(rest.length, 'org.apache.royale.textLayout.property.PropertyHandler');
  for (var /** @type {number} */ idx = 0; idx < rest.length; idx++) {
    var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ handler = rest[idx];
    this._handlers[idx] = handler;
    if (handler.customXMLStringHandler)
      this.org_apache_royale_textLayout_property_Property__hasCustomExporterHandler = true;
    if (handler.className == "NumberPropertyHandler")
      this.org_apache_royale_textLayout_property_Property__numberPropertyHandler = handler;
  }
};


/**
 * @param {string} handlerClass
 * @return {org.apache.royale.textLayout.property.PropertyHandler}
 */
org.apache.royale.textLayout.property.Property.prototype.findHandler = function(handlerClass) {
  var foreachiter0_target = this._handlers;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var prop = foreachiter0_target[foreachiter0];
  {
    if (prop.className == handlerClass)
      return prop;
  }}
  
  return null;
};


/** Helper function when setting the property 
 * @param {*} currVal
 * @param {*} newVal
 * @return {*}
 */
org.apache.royale.textLayout.property.Property.prototype.setHelper = function(currVal, newVal) {
  var foreachiter1_target = this._handlers;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var handler = foreachiter1_target[foreachiter1];
  {
    var /** @type {*} */ checkRslt = handler.owningHandlerCheck(newVal);
    if (checkRslt !== undefined)
      return handler.setHelper(checkRslt);
  }}
  
  org.apache.royale.textLayout.property.PropertyUtil.errorHandler(this, newVal);
  return currVal;
};


/** Helper function when merging the property to compute actual attributes 
 * @param {*} currVal
 * @param {*} concatVal
 * @return {*}
 */
org.apache.royale.textLayout.property.Property.prototype.concatInheritOnlyHelper = function(currVal, concatVal) {
  return (this.org_apache_royale_textLayout_property_Property__inherited && currVal === undefined) || currVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT ? concatVal : currVal;
};


/** Helper function when merging the property to compute actual attributes 
 * @param {*} currVal
 * @param {*} concatVal
 * @return {*}
 */
org.apache.royale.textLayout.property.Property.prototype.concatHelper = function(currVal, concatVal) {
  if (this.org_apache_royale_textLayout_property_Property__inherited)
    return currVal === undefined || currVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT ? concatVal : currVal;
  if (currVal === undefined)
    return this.defaultValue;
  return currVal == org.apache.royale.textLayout.formats.FormatValue.INHERIT ? concatVal : currVal;
};


/** Helper function when comparing the property 
 * @param {*} v1
 * @param {*} v2
 * @return {boolean}
 */
org.apache.royale.textLayout.property.Property.prototype.equalHelper = function(v1, v2) {
  return v1 == v2;
};


/** Convert the value of this property to a string appropriate for XML export 
 * @param {Object} val
 * @return {string}
 */
org.apache.royale.textLayout.property.Property.prototype.toXMLString = function(val) {
  if (this.org_apache_royale_textLayout_property_Property__hasCustomExporterHandler) {
    var foreachiter2_target = this._handlers;
    for (var foreachiter2 in foreachiter2_target) 
    {
    var prop = foreachiter2_target[foreachiter2];
    {
      if (prop.customXMLStringHandler && prop.owningHandlerCheck(val) !== undefined)
        return prop.toXMLString(val);
    }}
    
  }
  return val.toString();
};


/**
 * @param {Object} propertyValue
 * @param {number} percentInput
 * @return {number}
 */
org.apache.royale.textLayout.property.Property.prototype.computeActualPropertyValue = function(propertyValue, percentInput) {
  var /** @type {number} */ percent = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(propertyValue);
  if (isNaN(percent))
    return Number(propertyValue);
  var /** @type {number} */ rslt = percentInput * (percent / 100);
  return Number(this.org_apache_royale_textLayout_property_Property__numberPropertyHandler ? this.org_apache_royale_textLayout_property_Property__numberPropertyHandler.clampToRange(rslt) : rslt);
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.property.Property.prototype.name;


org.apache.royale.textLayout.property.Property.prototype.get__name = function() {
  return this.org_apache_royale_textLayout_property_Property__name;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.property.Property.prototype.defaultValue;


org.apache.royale.textLayout.property.Property.prototype.get__defaultValue = function() {
  return this.org_apache_royale_textLayout_property_Property__default;
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.property.Property.prototype.inherited;


org.apache.royale.textLayout.property.Property.prototype.get__inherited = function() {
  return this.org_apache_royale_textLayout_property_Property__inherited;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.property.Property.prototype.category;


org.apache.royale.textLayout.property.Property.prototype.get__category = function() {
  return this.org_apache_royale_textLayout_property_Property__categories[0];
};


/**
 * @nocollapse
 * @export
 * @type {Array.<string>}
 */
org.apache.royale.textLayout.property.Property.prototype.categories;


org.apache.royale.textLayout.property.Property.prototype.get__categories = function() {
  return this.org_apache_royale_textLayout_property_Property__categories;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.property.Property.prototype.maxPercentValue;


org.apache.royale.textLayout.property.Property.prototype.get__maxPercentValue = function() {
  var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ handler = this.findHandler("PercentPropertyHandler");
  return handler ? handler.maxValue : NaN;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.property.Property.prototype.minPercentValue;


org.apache.royale.textLayout.property.Property.prototype.get__minPercentValue = function() {
  var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ handler = this.findHandler("PercentPropertyHandler");
  return handler ? handler.minValue : NaN;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.property.Property.prototype.minValue;


org.apache.royale.textLayout.property.Property.prototype.get__minValue = function() {
  var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ numberHandler = this.findHandler("NumberPropertyHandler");
  if (numberHandler)
    return numberHandler.minValue;
  var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ intHandler = this.findHandler("IntPropertyHandler");
  return intHandler ? intHandler.minValue : NaN;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.property.Property.prototype.maxValue;


org.apache.royale.textLayout.property.Property.prototype.get__maxValue = function() {
  var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ numberHandler = this.findHandler("NumberPropertyHandler");
  if (numberHandler)
    return numberHandler.maxValue;
  var /** @type {org.apache.royale.textLayout.property.PropertyHandler} */ intHandler = this.findHandler("IntPropertyHandler");
  return intHandler ? intHandler.maxValue : NaN;
};


Object.defineProperties(org.apache.royale.textLayout.property.Property.prototype, /** @lends {org.apache.royale.textLayout.property.Property.prototype} */ {
/**
 * @type {string}
 */
name: {
get: org.apache.royale.textLayout.property.Property.prototype.get__name},
/**
 * @type {*}
 */
defaultValue: {
get: org.apache.royale.textLayout.property.Property.prototype.get__defaultValue},
/**
 * @type {Object}
 */
inherited: {
get: org.apache.royale.textLayout.property.Property.prototype.get__inherited},
/**
 * @type {string}
 */
category: {
get: org.apache.royale.textLayout.property.Property.prototype.get__category},
/**
 * @type {Array.<string>}
 */
categories: {
get: org.apache.royale.textLayout.property.Property.prototype.get__categories},
/**
 * @type {number}
 */
maxPercentValue: {
get: org.apache.royale.textLayout.property.Property.prototype.get__maxPercentValue},
/**
 * @type {number}
 */
minPercentValue: {
get: org.apache.royale.textLayout.property.Property.prototype.get__minPercentValue},
/**
 * @type {number}
 */
minValue: {
get: org.apache.royale.textLayout.property.Property.prototype.get__minValue},
/**
 * @type {number}
 */
maxValue: {
get: org.apache.royale.textLayout.property.Property.prototype.get__maxValue}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.property.Property.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Property', qName: 'org.apache.royale.textLayout.property.Property', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.property.Property.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'name': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'defaultValue': { type: '*', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'inherited': { type: 'Object', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'category': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'categories': { type: 'Vector.<String>', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'maxPercentValue': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'minPercentValue': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'minValue': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'},
        'maxValue': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.Property'}
      };
    },
    methods: function () {
      return {
        'Property': { type: '', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ 'String', false ,'*', false ,'Boolean', false ,'Vector.<String>', false ]; }},
        'addHandlers': { type: 'void', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ 'Array', false ]; }},
        'findHandler': { type: 'org.apache.royale.textLayout.property.PropertyHandler', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ 'String', false ]; }},
        'setHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ '*', false ,'*', false ]; }},
        'concatInheritOnlyHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ '*', false ,'*', false ]; }},
        'concatHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ '*', false ,'*', false ]; }},
        'equalHelper': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ '*', false ,'*', false ]; }},
        'toXMLString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ 'Object', false ]; }},
        'computeActualPropertyValue': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.property.Property', parameters: function () { return [ 'Object', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.property.Property.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./Property.js.map
