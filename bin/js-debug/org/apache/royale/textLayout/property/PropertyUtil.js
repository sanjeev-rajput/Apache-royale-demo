/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/property/PropertyUtil.as
 * org.apache.royale.textLayout.property.PropertyUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.property.PropertyUtil');
/* Royale Dependency List: org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.property.ArrayProperty,org.apache.royale.textLayout.property.Property,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
org.apache.royale.textLayout.property.PropertyUtil = function() {
};


/**
 * @nocollapse
 * @type {Function}
 */
org.apache.royale.textLayout.property.PropertyUtil.errorHandler;


/**
 * @nocollapse
 * @param {org.apache.royale.textLayout.property.Property} p
 * @param {Object} value
 */
org.apache.royale.textLayout.property.PropertyUtil.defaultErrorHandler = function(p, value) {
  throw new RangeError(org.apache.royale.textLayout.property.PropertyUtil.createErrorString(p, value));
};


/**
 * @nocollapse
 * @param {org.apache.royale.textLayout.property.Property} p
 * @param {Object} value
 * @return {string}
 */
org.apache.royale.textLayout.property.PropertyUtil.createErrorString = function(p, value) {
  return org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("badPropertyValue", [p.name, value.toString()]));
};


/**
 * @nocollapse
 * @param {*} currVal
 * @param {*} concatVal
 * @return {*}
 */
org.apache.royale.textLayout.property.PropertyUtil.defaultConcatHelper = function(currVal, concatVal) {
  return currVal === undefined || currVal == "inherit" ? concatVal : currVal;
};


/** Helper function to initialize all property values from defaults. 
 * @nocollapse
 * @param {Object} description
 * @param {Object} current
 */
org.apache.royale.textLayout.property.PropertyUtil.defaultsAllHelper = function(description, current) {
  var foreachiter0_target = description;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var prop = foreachiter0_target[foreachiter0];
  
    current[prop.name] = prop.defaultValue;}
  
};


/** Helper function to compare two sets of properties. 
 * @nocollapse
 * @param {Object} description
 * @param {Object} p1
 * @param {Object} p2
 * @return {boolean}
 */
org.apache.royale.textLayout.property.PropertyUtil.equalAllHelper = function(description, p1, p2) {
  if (p1 == p2)
    return true;
  if (p1 == null || p2 == null)
    return false;
  var foreachiter1_target = description;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var prop = foreachiter1_target[foreachiter1];
  {
    var /** @type {string} */ name = prop.name;
    if (!prop.equalHelper(p1[name], p2[name]))
      return false;
  }}
  
  return true;
};


/**
 * @nocollapse
 * @param {Object} formatClass
 * @param {Object} description
 * @param {Object} props
 * @param {string} category
 * @param {boolean=} legacy
 * @return {Object}
 */
org.apache.royale.textLayout.property.PropertyUtil.extractInCategory = function(formatClass, description, props, category, legacy) {
  legacy = typeof legacy !== 'undefined' ? legacy : true;
  var /** @type {Object} */ rslt = null;
  var foreachiter2_target = description;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var prop = foreachiter2_target[foreachiter2];
  {
    if (props[prop.name] == null)
      continue;
    if (legacy) {
      if (prop.category != category)
        continue;
    }
    else if (prop.categories.indexOf(category) == -1)
      continue;
    if (rslt == null)
      rslt = new formatClass();
    rslt[prop.name] = props[prop.name];
  }}
  
  return rslt;
};


/** @asprivate Copy an object 
 * @nocollapse
 * @param {Object} src
 * @return {Object}
 */
org.apache.royale.textLayout.property.PropertyUtil.shallowCopy = function(src) {
  var /** @type {Object} */ rslt = {};
  for (var /** @type {Object} */ val in src)
    rslt[val] = src[val];
  return rslt;
};


/** @asprivate Copy properties from src to result if a property of the same name exists in filter 
 * @nocollapse
 * @param {Object} src
 * @param {Object} filter
 * @return {Object}
 */
org.apache.royale.textLayout.property.PropertyUtil.shallowCopyInFilter = function(src, filter) {
  var /** @type {Object} */ rslt = {};
  for (var /** @type {Object} */ val in src) {
    if (filter.hasOwnProperty(val))
      rslt[val] = src[val];
  }
  return rslt;
};


/** @asprivate Copy properties from src to result if a property of the same name exists in filter 
 * @nocollapse
 * @param {Object} src
 * @param {Object} filter
 * @return {Object}
 */
org.apache.royale.textLayout.property.PropertyUtil.shallowCopyNotInFilter = function(src, filter) {
  var /** @type {Object} */ rslt = {};
  for (var /** @type {Object} */ val in src) {
    if (!filter.hasOwnProperty(val))
      rslt[val] = src[val];
  }
  return rslt;
};


/**
 * @private
 * @param {Object} o1
 * @param {Object} o2
 * @param {Object} description
 * @return {boolean}
 */
org.apache.royale.textLayout.property.PropertyUtil.compareStylesLoop = function(o1, o2, description) {
  for (var /** @type {string} */ val in o1) {
    var /** @type {Object} */ o1val = o1[val];
    var /** @type {Object} */ o2val = o2[val];
    if (o1val != o2val) {
      if (!org.apache.royale.utils.Language.is(o1val, Array) || !org.apache.royale.utils.Language.is(o2val, Array) || o1val.length != o2val.length || !description)
        return false;
      var /** @type {org.apache.royale.textLayout.property.ArrayProperty} */ prop = description[val];
      if (!prop || !org.apache.royale.textLayout.property.PropertyUtil.equalAllHelper(prop.memberType["description"], o1val, o2val))
        return false;
    }
  }
  return true;
};


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.textLayout.property.PropertyUtil.nullStyleObject = {};


/** @asprivate 
 * @nocollapse
 * @param {Object} o1
 * @param {Object} o2
 * @param {Object} description
 * @return {boolean}
 */
org.apache.royale.textLayout.property.PropertyUtil.equalStyles = function(o1, o2, description) {
  if (o1 == null)
    o1 = org.apache.royale.textLayout.property.PropertyUtil.nullStyleObject;
  if (o2 == null)
    o2 = org.apache.royale.textLayout.property.PropertyUtil.nullStyleObject;
  return org.apache.royale.textLayout.property.PropertyUtil.compareStylesLoop(o1, o2, description) && org.apache.royale.textLayout.property.PropertyUtil.compareStylesLoop(o2, o1, description);
};


/** @asprivate 
 * @nocollapse
 * @param {Object} o
 * @return {number}
 */
org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent = function(o) {
  if (!org.apache.royale.utils.Language.is(o, String))
    return NaN;
  var /** @type {string} */ s = String(o);
  var /** @type {number} */ len = (s.length) >> 0;
  return len != 0 && s.charAt(len - 1) == "%" ? parseFloat(s) : NaN;
};


/**
 * @private
 * @type {Function}
 */
org.apache.royale.textLayout.property.PropertyUtil.prototypeFactory = function() {
};


/** @asprivate Create an object with specified prototype parent 
 * @nocollapse
 * @param {Object} parent
 * @return {Object}
 */
org.apache.royale.textLayout.property.PropertyUtil.createObjectWithPrototype = function(parent) {
  org.apache.royale.textLayout.property.PropertyUtil.prototypeFactory.prototype = parent;
  return new org.apache.royale.textLayout.property.PropertyUtil.prototypeFactory();
};

org.apache.royale.textLayout.property.PropertyUtil.errorHandler = org.apache.royale.textLayout.property.PropertyUtil.defaultErrorHandler;




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.property.PropertyUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'PropertyUtil', qName: 'org.apache.royale.textLayout.property.PropertyUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.property.PropertyUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|errorHandler': { type: 'Function', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.textLayout.property.PropertyUtil.errorHandler = v : org.apache.royale.textLayout.property.PropertyUtil.errorHandler;}}
      };
    },
    methods: function () {
      return {
        '|defaultErrorHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'org.apache.royale.textLayout.property.Property', false ,'Object', false ]; }},
        '|createErrorString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'org.apache.royale.textLayout.property.Property', false ,'Object', false ]; }},
        '|defaultConcatHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ '*', false ,'*', false ]; }},
        '|defaultsAllHelper': { type: 'void', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ,'Object', false ]; }},
        '|equalAllHelper': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ]; }},
        '|extractInCategory': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Class', false ,'Object', false ,'Object', false ,'String', false ,'Boolean', true ]; }},
        '|shallowCopy': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ]; }},
        '|shallowCopyInFilter': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ,'Object', false ]; }},
        '|shallowCopyNotInFilter': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ,'Object', false ]; }},
        '|equalStyles': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ]; }},
        '|toNumberIfPercent': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ]; }},
        '|createObjectWithPrototype': { type: 'Object', declaredBy: 'org.apache.royale.textLayout.property.PropertyUtil', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.property.PropertyUtil.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./PropertyUtil.js.map
