/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/property/CounterContentHandler.as
 * org.apache.royale.textLayout.property.CounterContentHandler
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.property.CounterContentHandler');
/* Royale Dependency List: org.apache.royale.textLayout.elements.ListElement,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.property.PropertyHandler');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.property.PropertyHandler}
 */
org.apache.royale.textLayout.property.CounterContentHandler = function() {
  org.apache.royale.textLayout.property.CounterContentHandler.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.property.CounterContentHandler, org.apache.royale.textLayout.property.PropertyHandler);


/**
 * @override
 */
org.apache.royale.textLayout.property.CounterContentHandler.prototype.toXMLString = function(val) {
  if (val.hasOwnProperty("counter"))
    return val.ordered == null ? "counter(ordered)" : "counter(ordered," + val.ordered + ")";
  if (val.hasOwnProperty("counters")) {
    var /** @type {string} */ rslt = "counters(ordered";
    if (val.suffix != null) {
      rslt += ",\"" + val.suffix + "\"";
      if (val.ordered)
        rslt += "," + val.ordered;
    }
    rslt += ")";
    return rslt;
  }
  return val.toString();
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._counterContentPattern1 = /^\s*counter\s*\(\s*ordered\s*\)\s*$/;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._counterContentPattern2 = /^\s*counter\s*\(\s*ordered\s*,\s*\S+\s*\)\s*$/;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern1 = /^\s*counters\s*\(\s*ordered\s*\)\s*$/;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern2 = /^\s*counters\s*\(\s*ordered\s*,\s*".*"\s*\)\s*$/;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern3 = /^\s*counters\s*\(\s*ordered\s*,\s*".*"\s*,\s*\S+\s*\)\s*$/;


/**
 * @override
 */
org.apache.royale.textLayout.property.CounterContentHandler.prototype.owningHandlerCheck = function(newVal) {
  var /** @type {string} */ listStyleType;
  if (!org.apache.royale.utils.Language.is(newVal, String))
    return newVal.hasOwnProperty("counter") || newVal.hasOwnProperty("counters") ? newVal : undefined;
  if (org.apache.royale.textLayout.property.CounterContentHandler._counterContentPattern1.test(newVal))
    return newVal;
  if (org.apache.royale.textLayout.property.CounterContentHandler._counterContentPattern2.test(newVal)) {
    listStyleType = org.apache.royale.textLayout.property.CounterContentHandler.extractListStyleTypeFromCounter(org.apache.royale.utils.Language.string(newVal));
    return org.apache.royale.textLayout.elements.ListElement.listSuffixes[listStyleType] !== undefined ? newVal : undefined;
  }
  if (org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern1.test(newVal))
    return newVal;
  if (org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern2.test(newVal))
    return newVal;
  if (org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern3.test(newVal)) {
    listStyleType = org.apache.royale.textLayout.property.CounterContentHandler.extractListStyleTypeFromCounters(org.apache.royale.utils.Language.string(newVal));
    return org.apache.royale.textLayout.elements.ListElement.listSuffixes[listStyleType] !== undefined ? newVal : undefined;
  }
  return undefined;
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._counterBeginPattern = /^\s*counter\s*\(\s*ordered\s*,\s*/g;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff = /\s*\)\s*/g;


/** @asprivate - from _counterContentPattern2  counters(ordered,"suffix") 
 * @nocollapse
 * @param {string} s
 * @return {string}
 */
org.apache.royale.textLayout.property.CounterContentHandler.extractListStyleTypeFromCounter = function(s) {
  
  org.apache.royale.textLayout.property.CounterContentHandler._counterBeginPattern.lastIndex = 0;
  org.apache.royale.textLayout.property.CounterContentHandler._counterBeginPattern.test(s);
  s = s.substr(org.apache.royale.textLayout.property.CounterContentHandler._counterBeginPattern.lastIndex);
  org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff.lastIndex = 0;
  org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff.test(s);
  s = s.substr(0, org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff.lastIndex - 1);
  return s;
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern = /^\s*counters\s*\(\s*ordered\s*,\s*"/g;


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._afterSuffixPattern2 = /^"\s*\)\s*$/;


/** @asprivate - from _countersContentPattern2  
 * @nocollapse
 * @param {string} s
 * @return {string}
 */
org.apache.royale.textLayout.property.CounterContentHandler.extractSuffixFromCounters2 = function(s) {
  
  org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern.lastIndex = 0;
  org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern.test(s);
  s = s.substr(org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern.lastIndex);
  var /** @type {string} */ rslt = "";
  while (!org.apache.royale.textLayout.property.CounterContentHandler._afterSuffixPattern2.test(s)) {
    rslt += s.substr(0, 1);
    s = s.substr(1);
  }
  return rslt;
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._afterSuffixPattern3 = /^"\s*,\s*\S+\s*\)\s*$/;


/**
 * @nocollapse
 * @param {string} s
 * @return {string}
 */
org.apache.royale.textLayout.property.CounterContentHandler.extractSuffixFromCounters3 = function(s) {
  
  org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern.lastIndex = 0;
  org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern.test(s);
  s = s.substr(org.apache.royale.textLayout.property.CounterContentHandler._countersTillSuffixPattern.lastIndex);
  var /** @type {string} */ rslt = "";
  while (!org.apache.royale.textLayout.property.CounterContentHandler._afterSuffixPattern3.test(s)) {
    rslt += s.substr(0, 1);
    s = s.substr(1);
  }
  return rslt;
};


/**
 * @private
 * @const
 * @type {RegExp}
 */
org.apache.royale.textLayout.property.CounterContentHandler._countersTillListStyleTypePattern = /^\s*counters\s*\(\s*ordered\s*,\s*".*"\s*,\s*/g;


/** @asprivate - from _countersContentPattern2 
 * @nocollapse
 * @param {string} s
 * @return {string}
 */
org.apache.royale.textLayout.property.CounterContentHandler.extractListStyleTypeFromCounters = function(s) {
  
  org.apache.royale.textLayout.property.CounterContentHandler._countersTillListStyleTypePattern.lastIndex = 0;
  org.apache.royale.textLayout.property.CounterContentHandler._countersTillListStyleTypePattern.test(s);
  s = s.substr(org.apache.royale.textLayout.property.CounterContentHandler._countersTillListStyleTypePattern.lastIndex);
  org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff.lastIndex = 0;
  org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff.test(s);
  s = s.substr(0, org.apache.royale.textLayout.property.CounterContentHandler._trailingStuff.lastIndex - 1);
  return s;
};


/** parse the input string and create a valid input value 
 * @override
 */
org.apache.royale.textLayout.property.CounterContentHandler.prototype.setHelper = function(newVal) {
  var /** @type {string} */ s = newVal;
  var /** @type {string} */ listStyleType;
  var /** @type {string} */ suffix;
  if (s == null)
    return newVal;
  if (org.apache.royale.textLayout.property.CounterContentHandler._counterContentPattern1.test(newVal))
    return {counter:"ordered"};
  if (org.apache.royale.textLayout.property.CounterContentHandler._counterContentPattern2.test(newVal)) {
    listStyleType = org.apache.royale.textLayout.property.CounterContentHandler.extractListStyleTypeFromCounter(org.apache.royale.utils.Language.string(newVal));
    return {counter:"ordered", ordered:listStyleType};
  }
  if (org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern1.test(newVal))
    return {counters:"ordered"};
  if (org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern2.test(newVal)) {
    suffix = org.apache.royale.textLayout.property.CounterContentHandler.extractSuffixFromCounters2(org.apache.royale.utils.Language.string(newVal));
    return {counters:"ordered", suffix:suffix};
  }
  if (org.apache.royale.textLayout.property.CounterContentHandler._countersContentPattern3.test(newVal)) {
    listStyleType = org.apache.royale.textLayout.property.CounterContentHandler.extractListStyleTypeFromCounters(org.apache.royale.utils.Language.string(newVal));
    suffix = org.apache.royale.textLayout.property.CounterContentHandler.extractSuffixFromCounters3(org.apache.royale.utils.Language.string(newVal));
    return {counters:"ordered", suffix:suffix, ordered:listStyleType};
  }
  return undefined;
};


org.apache.royale.textLayout.property.CounterContentHandler.prototype.get__className = function() {
  return "CounterContentHandler";
};


org.apache.royale.textLayout.property.CounterContentHandler.prototype.get__customXMLStringHandler = function() {
  return true;
};


Object.defineProperties(org.apache.royale.textLayout.property.CounterContentHandler.prototype, /** @lends {org.apache.royale.textLayout.property.CounterContentHandler.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.property.CounterContentHandler.prototype.get__className},
/**
 * @type {boolean}
 */
customXMLStringHandler: {
get: org.apache.royale.textLayout.property.CounterContentHandler.prototype.get__customXMLStringHandler}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.property.CounterContentHandler.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CounterContentHandler', qName: 'org.apache.royale.textLayout.property.CounterContentHandler', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.property.CounterContentHandler.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler'},
        'customXMLStringHandler': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler'}
      };
    },
    methods: function () {
      return {
        'toXMLString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ 'Object', false ]; }},
        'owningHandlerCheck': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ '*', false ]; }},
        '|extractListStyleTypeFromCounter': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ 'String', false ]; }},
        '|extractSuffixFromCounters2': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ 'String', false ]; }},
        '|extractSuffixFromCounters3': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ 'String', false ]; }},
        '|extractListStyleTypeFromCounters': { type: 'String', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ 'String', false ]; }},
        'setHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.CounterContentHandler', parameters: function () { return [ '*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.property.CounterContentHandler.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CounterContentHandler.js.map
