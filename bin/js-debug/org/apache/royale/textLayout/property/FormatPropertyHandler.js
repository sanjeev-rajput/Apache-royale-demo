/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/property/FormatPropertyHandler.as
 * org.apache.royale.textLayout.property.FormatPropertyHandler
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.property.FormatPropertyHandler');
/* Royale Dependency List: org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.property.PropertyHandler');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.property.PropertyHandler}
 */
org.apache.royale.textLayout.property.FormatPropertyHandler = function() {
  org.apache.royale.textLayout.property.FormatPropertyHandler.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.property.FormatPropertyHandler, org.apache.royale.textLayout.property.PropertyHandler);


/**
 * @private
 * @type {Function}
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.org_apache_royale_textLayout_property_FormatPropertyHandler__converter;


/** Attempts to handle Object as key value pairs - strings fail 
 * @override
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.owningHandlerCheck = function(newVal) {
  return org.apache.royale.utils.Language.is(newVal, String) ? undefined : newVal;
};


/**
 * @override
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.setHelper = function(newVal) {
  return this.converter(newVal);
};


org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.get__className = function() {
  return "FormatPropertyHandler";
};


/**
 * @nocollapse
 * @export
 * @type {Function}
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.converter;


org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.get__converter = function() {
  return this.org_apache_royale_textLayout_property_FormatPropertyHandler__converter;
};


org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.set__converter = function(val) {
  this.org_apache_royale_textLayout_property_FormatPropertyHandler__converter = val;
};


Object.defineProperties(org.apache.royale.textLayout.property.FormatPropertyHandler.prototype, /** @lends {org.apache.royale.textLayout.property.FormatPropertyHandler.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.get__className},
/**
 * @type {Function}
 */
converter: {
get: org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.get__converter,
set: org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.set__converter}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FormatPropertyHandler', qName: 'org.apache.royale.textLayout.property.FormatPropertyHandler', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.property.FormatPropertyHandler'},
        'converter': { type: 'Function', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.property.FormatPropertyHandler'}
      };
    },
    methods: function () {
      return {
        'owningHandlerCheck': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.FormatPropertyHandler', parameters: function () { return [ '*', false ]; }},
        'setHelper': { type: '*', declaredBy: 'org.apache.royale.textLayout.property.FormatPropertyHandler', parameters: function () { return [ '*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.property.FormatPropertyHandler.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./FormatPropertyHandler.js.map
