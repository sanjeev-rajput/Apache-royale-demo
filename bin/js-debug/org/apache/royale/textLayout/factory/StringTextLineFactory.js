/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/factory/StringTextLineFactory.as
 * org.apache.royale.textLayout.factory.StringTextLineFactory
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.factory.StringTextLineFactory');
/* Royale Dependency List: org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.ISimpleCompose,org.apache.royale.textLayout.compose.utils.ContextUtil,org.apache.royale.textLayout.compose.utils.FactoryHelper,org.apache.royale.textLayout.container.ScrollPolicy,org.apache.royale.textLayout.elements.Configuration,org.apache.royale.textLayout.elements.IConfiguration,org.apache.royale.textLayout.elements.ParagraphElement,org.apache.royale.textLayout.elements.SpanElement,org.apache.royale.textLayout.elements.TextFlow,org.apache.royale.textLayout.factory.TLFFactory,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.LineBreak,org.apache.royale.textLayout.utils.FactoryUtil,XML*/

goog.require('org.apache.royale.textLayout.factory.TextLineFactoryBase');
goog.require('org.apache.royale.textLayout.factory.IStringTextLineFactory');



/** 
 * Creates a StringTextLineFactory object.  
 * 
 * @asparam configuration The configuration object used to set the properties of the 
 * internal TextFlow object used to compose lines produced by this factory. 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.factory.TextLineFactoryBase}
 * @implements {org.apache.royale.textLayout.factory.IStringTextLineFactory}
 * @param {org.apache.royale.textLayout.elements.IConfiguration=} configuration
 */
org.apache.royale.textLayout.factory.StringTextLineFactory = function(configuration) {
  configuration = typeof configuration !== 'undefined' ? configuration : null;
  org.apache.royale.textLayout.factory.StringTextLineFactory.base(this, 'constructor');
  this.org_apache_royale_textLayout_factory_StringTextLineFactory_initialize(configuration);
};
goog.inherits(org.apache.royale.textLayout.factory.StringTextLineFactory, org.apache.royale.textLayout.factory.TextLineFactoryBase);


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.TextFlow}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory__tf;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ParagraphElement}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory__para;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.SpanElement}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory__span;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory._defaultConfiguration = null;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory__configuration;


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IConfiguration} config
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory_initialize = function(config) {
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__configuration = config ? config.getImmutableClone() : org.apache.royale.textLayout.factory.StringTextLineFactory.defaultConfiguration.getImmutableClone();
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf = new org.apache.royale.textLayout.elements.TextFlow(org.apache.royale.textLayout.factory.TLFFactory.defaultTLFFactory, this.org_apache_royale_textLayout_factory_StringTextLineFactory__configuration);
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__para = new org.apache.royale.textLayout.elements.ParagraphElement();
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__span = new org.apache.royale.textLayout.elements.SpanElement();
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__para.replaceChildren(0, 0, this.org_apache_royale_textLayout_factory_StringTextLineFactory__span);
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.replaceChildren(0, 0, this.org_apache_royale_textLayout_factory_StringTextLineFactory__para);
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.flowComposer.addController(this.containerController);
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged = true;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.factory.StringTextLineFactory}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory._measurementFactory = null;


/**
 * @private
 * @return {org.apache.royale.textLayout.factory.StringTextLineFactory}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.measurementFactory = function() {
  if (org.apache.royale.textLayout.factory.StringTextLineFactory._measurementFactory == null)
    org.apache.royale.textLayout.factory.StringTextLineFactory._measurementFactory = new org.apache.royale.textLayout.factory.StringTextLineFactory();
  return org.apache.royale.textLayout.factory.StringTextLineFactory._measurementFactory;
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines = null;


/**
 * @private
 * @return {Array}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.measurementLines = function() {
  if (org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines == null)
    org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines = new Array();
  return org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines;
};


/** 
 * Creates ITextLine objects using the text currently assigned to this factory object.
 * 
 * <p>The text lines are created using the currently assigned text and formats and
 * are composed to fit the bounds assigned to the <code>compositionBounds</code> property.
 * As each line is created, the factory calls the function specified in the 
 * <code>callback</code> parameter. This function is passed the ITextLine object and
 * is responsible for displaying the line.</p>
 * 
 * <p>To create a different set of lines, change any properties desired and call
 * <code>createTextLines()</code> again.</p>
 *  
 * <p>Note that the scroll policies of the factory will control how many lines are generated.</p>
 * 
 * @asparam callback	The callback function called for each ITextLine object created.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {Function} callback
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.createTextLines = function(callback) {
  var /** @type {org.apache.royale.textLayout.compose.ISimpleCompose} */ saved = org.apache.royale.textLayout.factory.TextLineFactoryBase.beginFactoryCompose();
  try {
    this.org_apache_royale_textLayout_factory_StringTextLineFactory_createTextLinesInternal(callback);
  } finally {
    org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines.splice(0);
    if (this._pass0Lines)
      this._pass0Lines.splice(0);
    org.apache.royale.textLayout.factory.TextLineFactoryBase.endFactoryCompose(saved);
  }
};


/** Internal version preserves generated lines
 * @private
 * @param {Function} callback
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory_createTextLinesInternal = function(callback) {
  var /** @type {boolean} */ measureWidth = !this.compositionBounds || isNaN(this.compositionBounds.width);
  var /** @type {boolean} */ measureHeight = !this.compositionBounds || isNaN(this.compositionBounds.height);
  
  
  var /** @type {string} */ bp = org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.computedFormat.blockProgression);
  this.containerController.setCompositionSize(this.compositionBounds.width, this.compositionBounds.height);
  this.containerController.verticalScrollPolicy = this.truncationOptions ? org.apache.royale.textLayout.container.ScrollPolicy.OFF : this.verticalScrollPolicy;
  this.containerController.horizontalScrollPolicy = this.truncationOptions ? org.apache.royale.textLayout.container.ScrollPolicy.OFF : this.horizontalScrollPolicy;
  this._isTruncated = false;
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__truncatedText = this.text;
  if (!this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged && org.apache.royale.textLayout.compose.utils.ContextUtil.computeBaseSWFContext(this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.flowComposer.swfContext) != org.apache.royale.textLayout.compose.utils.ContextUtil.computeBaseSWFContext(this.swfContext))
    this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged = true;
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.flowComposer.swfContext = this.swfContext;
  if (this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged) {
    this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.normalize();
    this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged = false;
  }
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.flowComposer.compose();
  if (this.truncationOptions)
    this.doTruncation(bp, measureWidth, measureHeight);
  var /** @type {number} */ xadjust = this.compositionBounds.x;
  var /** @type {org.apache.royale.geom.Rectangle} */ controllerBounds = this.containerController.getContentBounds();
  if (bp == org.apache.royale.textLayout.formats.BlockProgression.RL)
    xadjust += (measureWidth ? controllerBounds.width : this.compositionBounds.width);
  controllerBounds.left += xadjust;
  controllerBounds.right += xadjust;
  controllerBounds.top += this.compositionBounds.y;
  controllerBounds.bottom += this.compositionBounds.y;
  if (this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.backgroundManager)
    this.processBackgroundColors(this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf, callback, xadjust, this.compositionBounds.y, this.containerController.compositionWidth, this.containerController.compositionHeight);
  this.callbackWithTextLines(callback, xadjust, this.compositionBounds.y);
  this.setContentBounds(controllerBounds);
  this.containerController.clearCompositionResults();
};


/** @asprivate 
 * @param {string} bp
 * @param {boolean} measureWidth
 * @param {boolean} measureHeight
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.doTruncation = function(bp, measureWidth, measureHeight) {
  var /** @type {number} */ truncateAtCharPosition = 0;
  var /** @type {string} */ bpString = org.apache.royale.utils.Language.string(this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.computedFormat.blockProgression);
  if (!this.doesComposedTextFit(this.truncationOptions.lineCountLimit, (this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.textLength) >>> 0, bpString)) {
    this._isTruncated = true;
    var /** @type {boolean} */ somethingFit = false;
    var /** @type {string} */ originalText = this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.text;
    this.computeLastAllowedLineIndex(this.truncationOptions.lineCountLimit);
    if (this._truncationLineIndex >= 0) {
      this.org_apache_royale_textLayout_factory_StringTextLineFactory_measureTruncationIndicator(this.compositionBounds, this.truncationOptions.truncationIndicator);
      this._truncationLineIndex -= ((org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines.length - 1)) >> 0;
      if (this._truncationLineIndex >= 0) {
        //var /** @type {number} */ truncateAtCharPosition = 0;
        if (this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.computedFormat.lineBreak == org.apache.royale.textLayout.formats.LineBreak.EXPLICIT || (bpString == org.apache.royale.textLayout.formats.BlockProgression.TB ? measureWidth : measureHeight)) {
          var /** @type {org.apache.royale.text.engine.ITextLine} */ line = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines[this._truncationLineIndex];
          truncateAtCharPosition = (line.userData + line.rawTextLength) >> 0;
        } else {
          var /** @type {number} */ targetWidth = (bpString == org.apache.royale.textLayout.formats.BlockProgression.TB ? this.compositionBounds.width : this.compositionBounds.height);
          if (this.paragraphFormat) {
            targetWidth -= (Number(this.paragraphFormat.paragraphSpaceAfter) + Number(this.paragraphFormat.paragraphSpaceBefore));
            if (this._truncationLineIndex == 0)
              targetWidth -= Number(this.paragraphFormat.textIndent);
          }
          var /** @type {number} */ allowedWidth = targetWidth - org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines[org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines.length - 1].unjustifiedTextWidth;
          truncateAtCharPosition = (this.org_apache_royale_textLayout_factory_StringTextLineFactory_getTruncationPosition(org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines[this._truncationLineIndex], allowedWidth)) >> 0;
        }
        if (!this._pass0Lines)
          this._pass0Lines = new Array();
        this._pass0Lines = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.swapLines(this._pass0Lines);
        this.org_apache_royale_textLayout_factory_StringTextLineFactory__para = this.org_apache_royale_textLayout_factory_StringTextLineFactory__para.deepCopy();
        this.org_apache_royale_textLayout_factory_StringTextLineFactory__span = this.org_apache_royale_textLayout_factory_StringTextLineFactory__para.getChildAt(0);
        this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.replaceChildren(0, 1, this.org_apache_royale_textLayout_factory_StringTextLineFactory__para);
        this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.normalize();
        this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.replaceText(truncateAtCharPosition, this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.textLength, this.truncationOptions.truncationIndicator);
        do {
          this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.flowComposer.compose();
          if (this.doesComposedTextFit(this.truncationOptions.lineCountLimit, (this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.textLength) >>> 0, bpString)) {
            somethingFit = true;
            break;
          }
          if (truncateAtCharPosition == 0)
            break;
          var /** @type {number} */ newTruncateAtCharPosition = this.getNextTruncationPosition(truncateAtCharPosition);
          this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.replaceText(newTruncateAtCharPosition, truncateAtCharPosition, null);
          truncateAtCharPosition = newTruncateAtCharPosition;
        } while (true);
      }
      org.apache.royale.textLayout.factory.StringTextLineFactory._measurementLines.splice(0);
    }
    if (somethingFit)
      this.org_apache_royale_textLayout_factory_StringTextLineFactory__truncatedText = this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.text; else {
      this.org_apache_royale_textLayout_factory_StringTextLineFactory__truncatedText = "";
      org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines.splice(0);
    }
    this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.text = originalText;
  }
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory__truncatedText;


/** 
 * Measures the truncation indicator using the same bounds and formats, but without truncation options
 * Resultant lines are added to _measurementLines
 * @private
 * @param {org.apache.royale.geom.Rectangle} compositionBounds
 * @param {string} truncationIndicator
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory_measureTruncationIndicator = function(compositionBounds, truncationIndicator) {
  var /** @type {Array} */ originalLines = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.swapLines(org.apache.royale.textLayout.factory.StringTextLineFactory.measurementLines());
  var /** @type {org.apache.royale.textLayout.factory.StringTextLineFactory} */ measureFactory = org.apache.royale.textLayout.factory.StringTextLineFactory.measurementFactory();
  measureFactory.compositionBounds = compositionBounds;
  measureFactory.text = truncationIndicator;
  measureFactory.spanFormat = this.spanFormat;
  measureFactory.paragraphFormat = this.paragraphFormat;
  measureFactory.textFlowFormat = this.textFlowFormat;
  measureFactory.truncationOptions = null;
  measureFactory.org_apache_royale_textLayout_factory_StringTextLineFactory_createTextLinesInternal(org.apache.royale.textLayout.factory.StringTextLineFactory.noopfunction);
  org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.swapLines(originalLines);
};


/**
 * @private
 * @param {Object} o
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.noopfunction = function(o) {
};


/** 
 * Gets the truncation position on a line given the allowed width 
 * - Must be at an atom boundary
 * - Must scan the line for atoms in logical order, not physical position order
 * For example, given bi-di text ABאבCD
 * atoms must be scanned in this order 
 * A, B, א
 * ג, C, D  
 * @private
 * @param {org.apache.royale.text.engine.ITextLine} line
 * @param {number} allowedWidth
 * @return {number}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.org_apache_royale_textLayout_factory_StringTextLineFactory_getTruncationPosition = function(line, allowedWidth) {
  var /** @type {number} */ consumedWidth = 0;
  var /** @type {number} */ charPosition = (line.userData) >> 0;
  while (charPosition < line.userData + line.rawTextLength) {
    var /** @type {number} */ atomIndex = line.getAtomIndexAtCharIndex(charPosition);
    var /** @type {org.apache.royale.geom.Rectangle} */ atomBounds = line.getAtomBounds(atomIndex);
    consumedWidth += atomBounds.width;
    if (consumedWidth > allowedWidth)
      break;
    charPosition = line.getAtomTextBlockEndIndex(atomIndex);
  }
  return (charPosition) >>> 0;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.configuration;


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__configuration = function() {
  return this.org_apache_royale_textLayout_factory_StringTextLineFactory__configuration;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.spanFormat;


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__spanFormat = function() {
  return this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.format;
};


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__spanFormat = function(format) {
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.format = format;
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged = true;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.paragraphFormat;


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__paragraphFormat = function() {
  return this.org_apache_royale_textLayout_factory_StringTextLineFactory__para.format;
};


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__paragraphFormat = function(format) {
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__para.format = format;
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged = true;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.textFlowFormat;


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__textFlowFormat = function() {
  return this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.format;
};


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__textFlowFormat = function(format) {
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__tf.format = format;
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__formatsChanged = true;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.text;


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__text = function() {
  return this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.text;
};


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__text = function(string) {
  this.org_apache_royale_textLayout_factory_StringTextLineFactory__span.text = string;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.truncatedText;


org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__truncatedText = function() {
  return this.org_apache_royale_textLayout_factory_StringTextLineFactory__truncatedText;
};


Object.defineProperties(org.apache.royale.textLayout.factory.StringTextLineFactory.prototype, /** @lends {org.apache.royale.textLayout.factory.StringTextLineFactory.prototype} */ {
/**
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
configuration: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__configuration},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
spanFormat: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__spanFormat,
set: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__spanFormat},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
paragraphFormat: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__paragraphFormat,
set: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__paragraphFormat},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
textFlowFormat: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__textFlowFormat,
set: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__textFlowFormat},
/**
 * @type {string}
 */
text: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__text,
set: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.set__text},
/**
 * @type {string}
 */
truncatedText: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.get__truncatedText}}
);


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.defaultConfiguration;


org.apache.royale.textLayout.factory.StringTextLineFactory.get__defaultConfiguration = function() {
  if (!org.apache.royale.textLayout.factory.StringTextLineFactory._defaultConfiguration) {
    org.apache.royale.textLayout.factory.StringTextLineFactory._defaultConfiguration = org.apache.royale.textLayout.elements.Configuration.defaultConfiguration.clone();
    org.apache.royale.textLayout.factory.StringTextLineFactory._defaultConfiguration.flowComposerClass = org.apache.royale.textLayout.utils.FactoryUtil.getDefaultFlowComposerClass();
    org.apache.royale.textLayout.factory.StringTextLineFactory._defaultConfiguration.textFlowInitialFormat = null;
  }
  return org.apache.royale.textLayout.factory.StringTextLineFactory._defaultConfiguration;
};


Object.defineProperties(org.apache.royale.textLayout.factory.StringTextLineFactory, /** @lends {org.apache.royale.textLayout.factory.StringTextLineFactory} */ {
/**
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
defaultConfiguration: {
get: org.apache.royale.textLayout.factory.StringTextLineFactory.get__defaultConfiguration}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'StringTextLineFactory', qName: 'org.apache.royale.textLayout.factory.StringTextLineFactory', kind: 'class' }], interfaces: [org.apache.royale.textLayout.factory.IStringTextLineFactory] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'configuration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'},
        '|defaultConfiguration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'},
        'spanFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'},
        'paragraphFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'},
        'textFlowFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'},
        'truncatedText': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory'}
      };
    },
    methods: function () {
      return {
        'StringTextLineFactory': { type: '', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IConfiguration', true ]; }},
        'createTextLines': { type: 'void', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory', parameters: function () { return [ 'Function', false ]; }},
        'doTruncation': { type: 'void', declaredBy: 'org.apache.royale.textLayout.factory.StringTextLineFactory', parameters: function () { return [ 'String', false ,'Boolean', false ,'Boolean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.factory.StringTextLineFactory.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./StringTextLineFactory.js.map
