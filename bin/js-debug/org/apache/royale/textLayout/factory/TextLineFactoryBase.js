/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/factory/TextLineFactoryBase.as
 * org.apache.royale.textLayout.factory.TextLineFactoryBase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.factory.TextLineFactoryBase');
/* Royale Dependency List: org.apache.royale.core.IParentIUIBase,org.apache.royale.core.UIBase,org.apache.royale.geom.Rectangle,org.apache.royale.graphics.IGraphicShape,org.apache.royale.svg.GraphicShape,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.compose.ISimpleCompose,org.apache.royale.textLayout.compose.SimpleCompose,org.apache.royale.textLayout.compose.utils.FactoryHelper,org.apache.royale.textLayout.container.ContainerUtil,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.container.ScrollPolicy,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.factory.TruncationOptions,XML*/

goog.require('org.apache.royale.textLayout.factory.ITextLineFactory');



/** 
 * Base-class constructor for text line factories.
 *  
 * <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly.
 * Use one of the derived text factory classes instead.</p>
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @implements {org.apache.royale.textLayout.factory.ITextLineFactory}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase = function() {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__containerController = org.apache.royale.textLayout.container.ContainerUtil.getController(org.apache.royale.textLayout.factory.TextLineFactoryBase.tc);
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__horizontalScrollPolicy = this.org_apache_royale_textLayout_factory_TextLineFactoryBase__verticalScrollPolicy = String(org.apache.royale.textLayout.container.ScrollPolicy.scrollPolicyPropertyDefinition.defaultValue);
};


/**
 * @private
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__compositionBounds;


/**
 * @private
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__contentBounds;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype._isTruncated = false;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__horizontalScrollPolicy;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__verticalScrollPolicy;


/**
 * @private
 * @type {org.apache.royale.textLayout.factory.TruncationOptions}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__truncationOptions;


/**
 * @private
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__containerController;


/**
 * @private
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase._tc;


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.org_apache_royale_textLayout_factory_TextLineFactoryBase__swfContext;


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.ISimpleCompose}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase._savedFactoryComposer;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype._truncationLineIndex = 0;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype._pass0Lines;


/** @asprivate return the next factory composer that will be used 
 * @nocollapse
 * @return {org.apache.royale.textLayout.compose.ISimpleCompose}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.peekFactoryCompose = function() {
  if (org.apache.royale.textLayout.factory.TextLineFactoryBase._savedFactoryComposer == null)
    org.apache.royale.textLayout.factory.TextLineFactoryBase._savedFactoryComposer = new org.apache.royale.textLayout.compose.SimpleCompose();
  return org.apache.royale.textLayout.factory.TextLineFactoryBase._savedFactoryComposer;
};


/** @asprivate support recursive calls into the factory 
 * @nocollapse
 * @return {org.apache.royale.textLayout.compose.ISimpleCompose}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.beginFactoryCompose = function() {
  var /** @type {org.apache.royale.textLayout.compose.ISimpleCompose} */ rslt = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer;
  org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer = org.apache.royale.textLayout.factory.TextLineFactoryBase.peekFactoryCompose();
  org.apache.royale.textLayout.factory.TextLineFactoryBase._savedFactoryComposer = null;
  return rslt;
};


/** @asprivate support recursive calls into the factory 
 * @nocollapse
 * @param {org.apache.royale.textLayout.compose.ISimpleCompose} prevComposer
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.endFactoryCompose = function(prevComposer) {
  org.apache.royale.textLayout.factory.TextLineFactoryBase._savedFactoryComposer = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer;
  org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer = prevComposer;
};


/**
 * The smallest rectangle in which the layed-out content fits.
 * 
 * <p><b>Note:</b> Truncated lines are not included in the size calculation.</p>
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.getContentBounds = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__contentBounds;
};


/** @asprivate 
 * @protected
 * @param {org.apache.royale.geom.Rectangle} controllerBounds
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.setContentBounds = function(controllerBounds) {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__contentBounds = controllerBounds;
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__contentBounds.offset(this.compositionBounds.left, this.compositionBounds.top);
};


/** 
 * Sends the created ITextLine objects to the client using the supplied callback function.
 * 
 * <p>This method sets the <code>x</code> and <code>y</code> properties of the line.</p>
 * 
 * @asparam callback the callback function supplied by the factory user
 * @asparam delx the horizontal offset
 * @asparam dely the vertical offset
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @param {Function} callback
 * @param {number} delx
 * @param {number} dely
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.callbackWithTextLines = function(callback, delx, dely) {
  var foreachiter0_target = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var textLine = foreachiter0_target[foreachiter0];
  {
    var /** @type {org.apache.royale.text.engine.ITextBlock} */ textBlock = textLine.textBlock;
    if (textBlock) {
      
      textBlock.releaseLines(textBlock.firstLine, textBlock.lastLine);
    }
    textLine.userData = null;
    textLine.x += delx;
    textLine.y += dely;
    textLine.validity = "static";
    
    callback(textLine);
  }}
  
};


/**
 * Indicates whether the composed text fits in the line count limit and includes all text
 *  
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @param {number} lineCountLimit
 * @param {number} textLength
 * @param {string} blockProgression
 * @return {boolean}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.doesComposedTextFit = function(lineCountLimit, textLength, blockProgression) {
  if (lineCountLimit != org.apache.royale.textLayout.factory.TruncationOptions.NO_LINE_COUNT_LIMIT && org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines.length > lineCountLimit)
    return false;
  var /** @type {Array} */ lines = org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines;
  if (!lines.length)
    return textLength ? false : true;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ lastLine = lines[lines.length - 1];
  return lastLine.userData + lastLine.rawTextLength == textLength;
};


/** 
 * Gets the next truncation position by shedding an atom's worth of characters.
 * 
 * @asparam truncateAtCharPosition the current truncation candidate position.
 * @asparam multiPara <code>true</code> if text has more than one paragraph.
 * 
 * @asreturns the next candidate truncation position.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @protected
 * @param {number} truncateAtCharPosition
 * @param {boolean=} multiPara
 * @return {number}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.getNextTruncationPosition = function(truncateAtCharPosition, multiPara) {
  multiPara = typeof multiPara !== 'undefined' ? multiPara : false;
  truncateAtCharPosition--;
  
  var /** @type {org.apache.royale.text.engine.ITextLine} */ line = this._pass0Lines[this._truncationLineIndex];
  do {
    if (truncateAtCharPosition >= line.userData && truncateAtCharPosition < line.userData + line.rawTextLength)
      break;
    if (truncateAtCharPosition < line.userData)
      line = this._pass0Lines[--this._truncationLineIndex]; else {
      
    }
  } while (true);
  var /** @type {number} */ paraStart = (multiPara ? line.userData - line.textBlockBeginIndex : 0) >> 0;
  var /** @type {number} */ atomIndex = line.getAtomIndexAtCharIndex((truncateAtCharPosition - paraStart) >> 0);
  var /** @type {number} */ nextTruncationPosition = (line.getAtomTextBlockBeginIndex(atomIndex) + paraStart) >> 0;
  return nextTruncationPosition;
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.compose.IFlowComposer}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.createFlowComposer = function() {
  return org.apache.royale.textLayout.compose.utils.FactoryHelper.getComposer();
};


/** @asprivate
 * Calculates the last line that fits in the line count limit
 * The result is stored in  _truncationLineIndex
 * 
 * Note: This code is only called when scrolling is OFF, so only lines that fit in bounds are generated
 * @param {number} lineCountLimit
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.computeLastAllowedLineIndex = function(lineCountLimit) {
  this._truncationLineIndex = (org.apache.royale.textLayout.compose.utils.FactoryHelper.staticComposer.lines.length - 1) >> 0;
  if (lineCountLimit != org.apache.royale.textLayout.factory.TruncationOptions.NO_LINE_COUNT_LIMIT && lineCountLimit <= this._truncationLineIndex)
    this._truncationLineIndex = (lineCountLimit - 1) >> 0;
};


/** @asprivate helper to process the background colors.  default implementation creates a shape and passes it to the callback 
 * @param {org.apache.royale.textLayout.elements.ITextFlow} textFlow
 * @param {Function} callback
 * @param {number} x
 * @param {number} y
 * @param {number} constrainWidth
 * @param {number} constrainHeight
 * @return {*}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.processBackgroundColors = function(textFlow, callback, x, y, constrainWidth, constrainHeight) {
  
  var /** @type {org.apache.royale.graphics.IGraphicShape} */ bgShape = new org.apache.royale.svg.GraphicShape();
  textFlow.backgroundManager.drawAllRects(textFlow, bgShape, constrainWidth, constrainHeight);
  bgShape.x = x;
  bgShape.y = y;
  callback(bgShape);
  textFlow.clearBackgroundManager();
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.compositionBounds;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__compositionBounds = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__compositionBounds;
};


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__compositionBounds = function(value) {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__compositionBounds = value;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.swfContext;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__swfContext = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__swfContext;
};


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__swfContext = function(value) {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__swfContext = value;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.factory.TruncationOptions}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.truncationOptions;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__truncationOptions = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__truncationOptions;
};


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__truncationOptions = function(value) {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__truncationOptions = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.isTruncated;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__isTruncated = function() {
  return this._isTruncated;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.horizontalScrollPolicy;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__horizontalScrollPolicy = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__horizontalScrollPolicy;
};


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__horizontalScrollPolicy = function(scrollPolicy) {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__horizontalScrollPolicy = scrollPolicy;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.verticalScrollPolicy;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__verticalScrollPolicy = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__verticalScrollPolicy;
};


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__verticalScrollPolicy = function(scrollPolicy) {
  this.org_apache_royale_textLayout_factory_TextLineFactoryBase__verticalScrollPolicy = scrollPolicy;
};


/**
 * @nocollapse
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.containerController;


org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__containerController = function() {
  return this.org_apache_royale_textLayout_factory_TextLineFactoryBase__containerController;
};


Object.defineProperties(org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype, /** @lends {org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype} */ {
/**
 * @type {org.apache.royale.geom.Rectangle}
 */
compositionBounds: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__compositionBounds,
set: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__compositionBounds},
/**
 * @type {org.apache.royale.textLayout.compose.ISWFContext}
 */
swfContext: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__swfContext,
set: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__swfContext},
/**
 * @type {org.apache.royale.textLayout.factory.TruncationOptions}
 */
truncationOptions: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__truncationOptions,
set: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__truncationOptions},
/**
 * @type {boolean}
 */
isTruncated: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__isTruncated},
/**
 * @type {string}
 */
horizontalScrollPolicy: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__horizontalScrollPolicy,
set: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__horizontalScrollPolicy},
/**
 * @type {string}
 */
verticalScrollPolicy: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__verticalScrollPolicy,
set: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.set__verticalScrollPolicy},
/**
 * @type {org.apache.royale.textLayout.container.IContainerController}
 */
containerController: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.get__containerController}}
);


/**
 * @nocollapse
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.tc;


org.apache.royale.textLayout.factory.TextLineFactoryBase.get__tc = function() {
  if (org.apache.royale.textLayout.factory.TextLineFactoryBase._tc == null)
    org.apache.royale.textLayout.factory.TextLineFactoryBase._tc = new org.apache.royale.core.UIBase();
  return org.apache.royale.textLayout.factory.TextLineFactoryBase._tc;
};


Object.defineProperties(org.apache.royale.textLayout.factory.TextLineFactoryBase, /** @lends {org.apache.royale.textLayout.factory.TextLineFactoryBase} */ {
/**
 * @type {org.apache.royale.core.IParentIUIBase}
 */
tc: {
get: org.apache.royale.textLayout.factory.TextLineFactoryBase.get__tc}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextLineFactoryBase', qName: 'org.apache.royale.textLayout.factory.TextLineFactoryBase', kind: 'class' }], interfaces: [org.apache.royale.textLayout.factory.ITextLineFactory] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'compositionBounds': { type: 'org.apache.royale.geom.Rectangle', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'swfContext': { type: 'org.apache.royale.textLayout.compose.ISWFContext', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'truncationOptions': { type: 'org.apache.royale.textLayout.factory.TruncationOptions', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'isTruncated': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'horizontalScrollPolicy': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'verticalScrollPolicy': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'}
      };
    },
    methods: function () {
      return {
        '|peekFactoryCompose': { type: 'org.apache.royale.textLayout.compose.ISimpleCompose', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        '|beginFactoryCompose': { type: 'org.apache.royale.textLayout.compose.ISimpleCompose', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        '|endFactoryCompose': { type: 'void', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase', parameters: function () { return [ 'org.apache.royale.textLayout.compose.ISimpleCompose', false ]; }},
        'TextLineFactoryBase': { type: '', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'getContentBounds': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'createFlowComposer': { type: 'org.apache.royale.textLayout.compose.IFlowComposer', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase'},
        'computeLastAllowedLineIndex': { type: 'void', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase', parameters: function () { return [ 'int', false ]; }},
        'processBackgroundColors': { type: '*', declaredBy: 'org.apache.royale.textLayout.factory.TextLineFactoryBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'Function', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.factory.TextLineFactoryBase.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./TextLineFactoryBase.js.map
