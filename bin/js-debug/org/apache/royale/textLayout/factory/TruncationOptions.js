/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/factory/TruncationOptions.as
 * org.apache.royale.textLayout.factory.TruncationOptions
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.factory.TruncationOptions');
/* Royale Dependency List: org.apache.royale.textLayout.formats.ITextLayoutFormat,XML*/




/** 
 * Creates a TruncationOptions object.
 * 
 * @asparam truncationIndicator the string used to indicate that text has been truncated. 
 * It appears at the end of the composed text. The default value is the horizontal ellipsis (U+2026).
 * @asparam lineCountLimit specifies a truncation criterion in the form of the maximum 
 * number of lines allowed. The default value of <code>NO_LINE_COUNT_LIMIT</code> 
 * indicates that there is no line count limit.
 * @asparam truncationIndicatorFormat specifies the format for the truncation indicator. 
 * A null format (the default value) specifies that the truncation indicator assume 
 * the format of content just before the truncation point. The <code>TextLineFactory</code> 
 * methods that take a simple string as input also ignore this parameter and implement 
 * the default behavior.
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @param {string=} truncationIndicator
 * @param {number=} lineCountLimit
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} truncationIndicatorFormat
 */
org.apache.royale.textLayout.factory.TruncationOptions = function(truncationIndicator, lineCountLimit, truncationIndicatorFormat) {
  truncationIndicator = typeof truncationIndicator !== 'undefined' ? truncationIndicator : org.apache.royale.textLayout.factory.TruncationOptions.HORIZONTAL_ELLIPSIS;
  lineCountLimit = typeof lineCountLimit !== 'undefined' ? lineCountLimit : org.apache.royale.textLayout.factory.TruncationOptions.NO_LINE_COUNT_LIMIT;
  truncationIndicatorFormat = typeof truncationIndicatorFormat !== 'undefined' ? truncationIndicatorFormat : null;
  this.truncationIndicator = truncationIndicator;
  this.truncationIndicatorFormat = truncationIndicatorFormat;
  this.lineCountLimit = lineCountLimit;
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicator;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicatorFormat;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.org_apache_royale_textLayout_factory_TruncationOptions__lineCountLimit = 0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.factory.TruncationOptions.NO_LINE_COUNT_LIMIT = -1;


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.factory.TruncationOptions.HORIZONTAL_ELLIPSIS = "â€¦";


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.truncationIndicator;


org.apache.royale.textLayout.factory.TruncationOptions.prototype.get__truncationIndicator = function() {
  return this.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicator ? this.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicator : org.apache.royale.textLayout.factory.TruncationOptions.HORIZONTAL_ELLIPSIS;
};


org.apache.royale.textLayout.factory.TruncationOptions.prototype.set__truncationIndicator = function(val) {
  this.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicator = val;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.truncationIndicatorFormat;


org.apache.royale.textLayout.factory.TruncationOptions.prototype.get__truncationIndicatorFormat = function() {
  return this.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicatorFormat;
};


org.apache.royale.textLayout.factory.TruncationOptions.prototype.set__truncationIndicatorFormat = function(val) {
  this.org_apache_royale_textLayout_factory_TruncationOptions__truncationIndicatorFormat = val;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.lineCountLimit;


org.apache.royale.textLayout.factory.TruncationOptions.prototype.get__lineCountLimit = function() {
  return (this.org_apache_royale_textLayout_factory_TruncationOptions__lineCountLimit < org.apache.royale.textLayout.factory.TruncationOptions.NO_LINE_COUNT_LIMIT ? 0 : this.org_apache_royale_textLayout_factory_TruncationOptions__lineCountLimit) >> 0;
};


org.apache.royale.textLayout.factory.TruncationOptions.prototype.set__lineCountLimit = function(val) {
  this.org_apache_royale_textLayout_factory_TruncationOptions__lineCountLimit = val;
};


Object.defineProperties(org.apache.royale.textLayout.factory.TruncationOptions.prototype, /** @lends {org.apache.royale.textLayout.factory.TruncationOptions.prototype} */ {
/**
 * @type {string}
 */
truncationIndicator: {
get: org.apache.royale.textLayout.factory.TruncationOptions.prototype.get__truncationIndicator,
set: org.apache.royale.textLayout.factory.TruncationOptions.prototype.set__truncationIndicator},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
truncationIndicatorFormat: {
get: org.apache.royale.textLayout.factory.TruncationOptions.prototype.get__truncationIndicatorFormat,
set: org.apache.royale.textLayout.factory.TruncationOptions.prototype.set__truncationIndicatorFormat},
/**
 * @type {number}
 */
lineCountLimit: {
get: org.apache.royale.textLayout.factory.TruncationOptions.prototype.get__lineCountLimit,
set: org.apache.royale.textLayout.factory.TruncationOptions.prototype.set__lineCountLimit}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TruncationOptions', qName: 'org.apache.royale.textLayout.factory.TruncationOptions', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'truncationIndicator': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TruncationOptions'},
        'truncationIndicatorFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TruncationOptions'},
        'lineCountLimit': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.factory.TruncationOptions'}
      };
    },
    methods: function () {
      return {
        'TruncationOptions': { type: '', declaredBy: 'org.apache.royale.textLayout.factory.TruncationOptions', parameters: function () { return [ 'String', true ,'int', true ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.factory.TruncationOptions.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./TruncationOptions.js.map
