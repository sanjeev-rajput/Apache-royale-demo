/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/formats/ListMarkerFormat.as
 * org.apache.royale.textLayout.formats.ListMarkerFormat
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.formats.ListMarkerFormat');
/* Royale Dependency List: org.apache.royale.textLayout.formats.Category,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.Suffix,org.apache.royale.textLayout.property.CounterContentHandler,org.apache.royale.textLayout.property.CounterPropHandler,org.apache.royale.textLayout.property.EnumPropertyHandler,org.apache.royale.textLayout.property.Property,org.apache.royale.textLayout.property.PropertyFactory,org.apache.royale.textLayout.property.PropertyUtil,XML*/

goog.require('org.apache.royale.textLayout.formats.IListMarkerFormat');
goog.require('org.apache.royale.textLayout.formats.TextLayoutFormat');



/** Create a ListMarkerFormat that holds all the properties possible for a list marker.  
 * 
 *  @asparam initialValues An optional instance from which to copy initial values.
 * 
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @langversion 3.0 
 * @constructor
 * @extends {org.apache.royale.textLayout.formats.TextLayoutFormat}
 * @implements {org.apache.royale.textLayout.formats.IListMarkerFormat}
 * @param {org.apache.royale.textLayout.formats.IListMarkerFormat=} initialValues
 */
org.apache.royale.textLayout.formats.ListMarkerFormat = function(initialValues) {
  initialValues = typeof initialValues !== 'undefined' ? initialValues : null;
  org.apache.royale.textLayout.formats.ListMarkerFormat.base(this, 'constructor', initialValues);
};
goog.inherits(org.apache.royale.textLayout.formats.ListMarkerFormat, org.apache.royale.textLayout.formats.TextLayoutFormat);


/** @asprivate 
 * @nocollapse
 * @param {string} nameValue
 * @param {string} defaultValue
 * @param {boolean} inherited
 * @param {Array} categories
 * @return {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.createCounterResetProperty = function(nameValue, defaultValue, inherited, categories) {
  var /** @type {org.apache.royale.textLayout.property.Property} */ rslt = new org.apache.royale.textLayout.property.Property(nameValue, defaultValue, inherited, categories);
  rslt.addHandlers(org.apache.royale.textLayout.property.PropertyFactory.sharedUndefinedHandler, new org.apache.royale.textLayout.property.EnumPropertyHandler([org.apache.royale.textLayout.formats.FormatValue.NONE]), new org.apache.royale.textLayout.property.CounterPropHandler(0));
  return rslt;
};


/** @asprivate 
 * @nocollapse
 * @param {string} nameValue
 * @param {string} defaultValue
 * @param {boolean} inherited
 * @param {Array} categories
 * @return {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.createCounterIncrementProperty = function(nameValue, defaultValue, inherited, categories) {
  var /** @type {org.apache.royale.textLayout.property.Property} */ rslt = new org.apache.royale.textLayout.property.Property(nameValue, defaultValue, inherited, categories);
  rslt.addHandlers(org.apache.royale.textLayout.property.PropertyFactory.sharedUndefinedHandler, new org.apache.royale.textLayout.property.EnumPropertyHandler([org.apache.royale.textLayout.formats.FormatValue.NONE]), new org.apache.royale.textLayout.property.CounterPropHandler(1));
  return rslt;
};


/** @asprivate 
 * @nocollapse
 * @param {string} nameValue
 * @param {string} defaultValue
 * @param {boolean} inherited
 * @param {Array} categories
 * @return {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.createCounterContentProperty = function(nameValue, defaultValue, inherited, categories) {
  var /** @type {org.apache.royale.textLayout.property.Property} */ rslt = new org.apache.royale.textLayout.property.Property(nameValue, defaultValue, inherited, categories);
  rslt.addHandlers(org.apache.royale.textLayout.property.PropertyFactory.sharedUndefinedHandler, new org.apache.royale.textLayout.property.EnumPropertyHandler([org.apache.royale.textLayout.formats.FormatValue.NONE]), new org.apache.royale.textLayout.property.CounterContentHandler());
  return rslt;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._counterResetProperty;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._counterIncrementProperty;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._beforeContentProperty;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._contentProperty;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._afterContentProperty;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._suffixProperty;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._lmfDescription;


/** @asprivate 
 * @private
 * @param {org.apache.royale.textLayout.property.Property} styleProp
 * @param {*} newValue
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle = function(styleProp, newValue) {
  var /** @type {string} */ name = styleProp.name;
  newValue = styleProp.setHelper(this.getStyle(name), newValue);
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.setStyleByName.apply(this, [name, newValue]);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.setStyle = function(styleProp, newValue) {
  var /** @type {org.apache.royale.textLayout.property.Property} */ lmfStyle = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription[styleProp];
  if (lmfStyle)
    this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(lmfStyle, newValue);
  else
    org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.setStyle.apply(this, [styleProp, newValue]);
};


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat._description;


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.copy = function(incoming) {
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.copy.apply(this, [incoming]);
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = incoming;
  if (lmf) {
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    for (var /** @type {string} */ key in lmfd)
      this[key] = lmf[key];
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.concat = function(incoming) {
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.concat.apply(this, [incoming]);
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = incoming;
  if (lmf) {
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    var foreachiter0_target = lmfd;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var prop = foreachiter0_target[foreachiter0];
    {
      var /** @type {string} */ name = prop.name;
      this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(prop, prop.concatHelper(this[name], lmf[name]));
    }}
    
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.concatInheritOnly = function(incoming) {
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.concatInheritOnly.apply(this, [incoming]);
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = incoming;
  if (lmf) {
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    var foreachiter1_target = lmfd;
    for (var foreachiter1 in foreachiter1_target) 
    {
    var prop = foreachiter1_target[foreachiter1];
    {
      var /** @type {string} */ name = prop.name;
      this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(prop, prop.concatInheritOnlyHelper(this[name], lmf[name]));
    }}
    
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.apply = function(incoming) {
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.apply.apply(this, [incoming]);
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = incoming;
  if (lmf) {
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    var foreachiter2_target = lmfd;
    for (var foreachiter2 in foreachiter2_target) 
    {
    var prop = foreachiter2_target[foreachiter2];
    {
      var /** @type {string} */ name = prop.name;
      var /** @type {*} */ val = lmf[name];
      if (val !== undefined)
        this[name] = val;
    }}
    
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.removeMatching = function(incoming) {
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.removeMatching.apply(this, [incoming]);
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = incoming;
  if (lmf) {
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    var foreachiter3_target = lmfd;
    for (var foreachiter3 in foreachiter3_target) 
    {
    var prop = foreachiter3_target[foreachiter3];
    {
      var /** @type {string} */ name = prop.name;
      if (prop.equalHelper(this[name], lmf[name]))
        this[name] = undefined;
    }}
    
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.removeClashing = function(incoming) {
  org.apache.royale.textLayout.formats.ListMarkerFormat.superClass_.removeClashing.apply(this, [incoming]);
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = incoming;
  if (lmf) {
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    var foreachiter4_target = lmfd;
    for (var foreachiter4 in foreachiter4_target) 
    {
    var prop = foreachiter4_target[foreachiter4];
    {
      var /** @type {string} */ name = prop.name;
      if (!prop.equalHelper(this[name], lmf[name]))
        this[name] = undefined;
    }}
    
  }
};


/**
 * Creates a new ListMarkerFormat object. All settings are empty or, optionally, are initialized from the
 * supplied <code>initialValues</code> object.
 * 
 * @asparam initialValues Optional instance from which to copy initial values. If the object is of type IListMarkerFormat or ITextLayoutFormat, the values are copied.  
 * Otherwise the <code>initialValues</code> parameter is treated like a ObjectMap or Object and iterated over.
 * 
 * @asreturn The new ListMarkerFormat object.
 * 
 * @see #defaultFormat
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @nocollapse
 * @param {Object} initialValues
 * @return {org.apache.royale.textLayout.formats.ListMarkerFormat}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.createListMarkerFormat = function(initialValues) {
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ lmf = initialValues;
  var /** @type {org.apache.royale.textLayout.formats.ListMarkerFormat} */ rslt = new org.apache.royale.textLayout.formats.ListMarkerFormat(lmf);
  if (lmf == null && initialValues) {
    for (var /** @type {string} */ key in initialValues)
      rslt.setStyle(key, initialValues[key]);
  }
  return rslt;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.counterReset;


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__counterReset = function() {
  return this.getStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.counterResetProperty.name);
};


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__counterReset = function(value) {
  this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.counterResetProperty, value);
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.counterIncrement;


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__counterIncrement = function() {
  return this.getStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.counterIncrementProperty.name);
};


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__counterIncrement = function(value) {
  this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.counterIncrementProperty, value);
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.content;


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__content = function() {
  return this.getStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.contentProperty.name);
};


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__content = function(value) {
  this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.contentProperty, value);
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.beforeContent;


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__beforeContent = function() {
  return this.getStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.beforeContentProperty.name);
};


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__beforeContent = function(value) {
  this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.beforeContentProperty, value);
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.afterContent;


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__afterContent = function() {
  return this.getStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.afterContentProperty.name);
};


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__afterContent = function(value) {
  this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.afterContentProperty, value);
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.suffix;


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__suffix = function() {
  return this.getStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.suffixProperty.name);
};


org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__suffix = function(value) {
  this.org_apache_royale_textLayout_formats_ListMarkerFormat_setLMFStyle(org.apache.royale.textLayout.formats.ListMarkerFormat.suffixProperty, value);
};


Object.defineProperties(org.apache.royale.textLayout.formats.ListMarkerFormat.prototype, /** @lends {org.apache.royale.textLayout.formats.ListMarkerFormat.prototype} */ {
/**
 * @type {*}
 */
counterReset: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__counterReset,
set: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__counterReset},
/**
 * @type {*}
 */
counterIncrement: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__counterIncrement,
set: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__counterIncrement},
/**
 * @type {*}
 */
content: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__content,
set: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__content},
/**
 * @type {*}
 */
beforeContent: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__beforeContent,
set: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__beforeContent},
/**
 * @type {*}
 */
afterContent: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__afterContent,
set: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__afterContent},
/**
 * @type {*}
 */
suffix: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.get__suffix,
set: org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.set__suffix}}
);


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.counterResetProperty;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__counterResetProperty = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._counterResetProperty == null)
    org.apache.royale.textLayout.formats.ListMarkerFormat._counterResetProperty = org.apache.royale.textLayout.formats.ListMarkerFormat.createCounterResetProperty("counterReset", org.apache.royale.textLayout.formats.FormatValue.NONE, false, [org.apache.royale.textLayout.formats.Category.LIST].slice());
  return org.apache.royale.textLayout.formats.ListMarkerFormat._counterResetProperty;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.counterIncrementProperty;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__counterIncrementProperty = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._counterIncrementProperty == null)
    org.apache.royale.textLayout.formats.ListMarkerFormat._counterIncrementProperty = org.apache.royale.textLayout.formats.ListMarkerFormat.createCounterResetProperty("counterIncrement", "ordered 1", false, [org.apache.royale.textLayout.formats.Category.LIST].slice());
  return org.apache.royale.textLayout.formats.ListMarkerFormat._counterIncrementProperty;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.beforeContentProperty;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__beforeContentProperty = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._beforeContentProperty == null)
    org.apache.royale.textLayout.formats.ListMarkerFormat._beforeContentProperty = org.apache.royale.textLayout.property.PropertyFactory.string("beforeContent", null, false, [org.apache.royale.textLayout.formats.Category.LIST].slice());
  return org.apache.royale.textLayout.formats.ListMarkerFormat._beforeContentProperty;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.contentProperty;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__contentProperty = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._contentProperty == null)
    org.apache.royale.textLayout.formats.ListMarkerFormat._contentProperty = org.apache.royale.textLayout.formats.ListMarkerFormat.createCounterContentProperty("content", "counter(ordered)", false, [org.apache.royale.textLayout.formats.Category.LIST].slice());
  return org.apache.royale.textLayout.formats.ListMarkerFormat._contentProperty;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.afterContentProperty;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__afterContentProperty = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._afterContentProperty == null)
    org.apache.royale.textLayout.formats.ListMarkerFormat._afterContentProperty = org.apache.royale.textLayout.property.PropertyFactory.string("afterContent", null, false, [org.apache.royale.textLayout.formats.Category.LIST].slice());
  return org.apache.royale.textLayout.formats.ListMarkerFormat._afterContentProperty;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.suffixProperty;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__suffixProperty = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._suffixProperty == null)
    org.apache.royale.textLayout.formats.ListMarkerFormat._suffixProperty = org.apache.royale.textLayout.property.PropertyFactory.enumString("suffix", org.apache.royale.textLayout.formats.Suffix.AUTO, false, [org.apache.royale.textLayout.formats.Category.LIST].slice(), org.apache.royale.textLayout.formats.Suffix.AUTO, org.apache.royale.textLayout.formats.Suffix.NONE);
  return org.apache.royale.textLayout.formats.ListMarkerFormat._suffixProperty;
};


/**
 * @nocollapse
 * @type {Object}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__lmfDescription = function() {
  if (org.apache.royale.textLayout.formats.ListMarkerFormat._lmfDescription == null) {
    org.apache.royale.textLayout.formats.ListMarkerFormat._lmfDescription = {"counterReset":org.apache.royale.textLayout.formats.ListMarkerFormat.counterResetProperty, "counterIncrement":org.apache.royale.textLayout.formats.ListMarkerFormat.counterIncrementProperty, "beforeContent":org.apache.royale.textLayout.formats.ListMarkerFormat.beforeContentProperty, "content":org.apache.royale.textLayout.formats.ListMarkerFormat.contentProperty, "afterContent":org.apache.royale.textLayout.formats.ListMarkerFormat.afterContentProperty, "suffix":org.apache.royale.textLayout.formats.ListMarkerFormat.suffixProperty};
  }
  return org.apache.royale.textLayout.formats.ListMarkerFormat._lmfDescription;
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.description;


org.apache.royale.textLayout.formats.ListMarkerFormat.get__description = function() {
  if (!org.apache.royale.textLayout.formats.ListMarkerFormat._description) {
    org.apache.royale.textLayout.formats.ListMarkerFormat._description = org.apache.royale.textLayout.property.PropertyUtil.createObjectWithPrototype(org.apache.royale.textLayout.formats.TextLayoutFormat.description);
    var /** @type {Object} */ lmfd = org.apache.royale.textLayout.formats.ListMarkerFormat.lmfDescription;
    for (var /** @type {string} */ key in lmfd)
      org.apache.royale.textLayout.formats.ListMarkerFormat._description[key] = lmfd[key];
  }
  return org.apache.royale.textLayout.formats.ListMarkerFormat._description;
};


Object.defineProperties(org.apache.royale.textLayout.formats.ListMarkerFormat, /** @lends {org.apache.royale.textLayout.formats.ListMarkerFormat} */ {
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
counterResetProperty: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__counterResetProperty},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
counterIncrementProperty: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__counterIncrementProperty},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
beforeContentProperty: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__beforeContentProperty},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
contentProperty: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__contentProperty},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
afterContentProperty: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__afterContentProperty},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
suffixProperty: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__suffixProperty},
/**
 * @type {Object}
 */
lmfDescription: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__lmfDescription},
/**
 * @type {Object}
 */
description: {
get: org.apache.royale.textLayout.formats.ListMarkerFormat.get__description}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListMarkerFormat', qName: 'org.apache.royale.textLayout.formats.ListMarkerFormat', kind: 'class' }], interfaces: [org.apache.royale.textLayout.formats.IListMarkerFormat] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|counterResetProperty': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        '|counterIncrementProperty': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        '|beforeContentProperty': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        '|contentProperty': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        '|afterContentProperty': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        '|suffixProperty': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        'counterReset': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        'counterIncrement': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        'content': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        'beforeContent': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        'afterContent': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        'suffix': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'},
        '|description': { type: 'Object', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat'}
      };
    },
    methods: function () {
      return {
        '|createCounterResetProperty': { type: 'org.apache.royale.textLayout.property.Property', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'String', false ,'String', false ,'Boolean', false ,'Vector.<String>', false ]; }},
        '|createCounterIncrementProperty': { type: 'org.apache.royale.textLayout.property.Property', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'String', false ,'String', false ,'Boolean', false ,'Vector.<String>', false ]; }},
        '|createCounterContentProperty': { type: 'org.apache.royale.textLayout.property.Property', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'String', false ,'String', false ,'Boolean', false ,'Vector.<String>', false ]; }},
        'ListMarkerFormat': { type: '', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.IListMarkerFormat', true ]; }},
        'setStyle': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'String', false ,'*', false ]; }},
        'copy': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'concat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'concatInheritOnly': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'apply': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'removeMatching': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        'removeClashing': { type: 'void', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ]; }},
        '|createListMarkerFormat': { type: 'org.apache.royale.textLayout.formats.ListMarkerFormat', declaredBy: 'org.apache.royale.textLayout.formats.ListMarkerFormat', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.formats.ListMarkerFormat.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ListMarkerFormat.js.map
