/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/LinkElement.as
 * org.apache.royale.textLayout.elements.LinkElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.LinkElement');
/* Royale Dependency List: org.apache.royale.core.BrowserWindow,org.apache.royale.events.Event,org.apache.royale.events.MouseEvent,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.LinkState,org.apache.royale.textLayout.events.FlowElementMouseEventManager,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,XML*/

goog.require('org.apache.royale.textLayout.elements.SubParagraphGroupElementBase');
goog.require('org.apache.royale.textLayout.elements.ILinkElement');



/** Constructor - creates a new LinkElement instance.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.SubParagraphGroupElementBase}
 * @implements {org.apache.royale.textLayout.elements.ILinkElement}
 */
org.apache.royale.textLayout.elements.LinkElement = function() {
  org.apache.royale.textLayout.elements.LinkElement.base(this, 'constructor');
  this.org_apache_royale_textLayout_elements_LinkElement__linkState = org.apache.royale.textLayout.elements.LinkState.LINK;
};
goog.inherits(org.apache.royale.textLayout.elements.LinkElement, org.apache.royale.textLayout.elements.SubParagraphGroupElementBase);


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.org_apache_royale_textLayout_elements_LinkElement__uriString;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.org_apache_royale_textLayout_elements_LinkElement__targetString;


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.org_apache_royale_textLayout_elements_LinkElement__linkState;


/**
 * @asparam type The type of event.
 * @asparam listener The listener function that processes the event. This function must accept an event object 
 * as its only parameter and must return nothing, as this example shows:
 * <p><code>function(evt:Event):void</code></p>
 * The function can have any name.
 * @asparam useCapture Determines whether the listener works in the capture phase or the target 
 * and bubbling phases. If <code>useCapture</code> is set to <code>true</code>, the  
 * listener processes the event only during the capture phase and not in the target or 
 * bubbling phase. If <code>useCapture</code> is <code>false</code>, the listener processes the event only
 * during the target or bubbling phase. To listen for the event in all three phases, call 
 * <code>addEventListener()</code> twice, once with <code>useCapture</code> set to <code>true</code>, 
 * then again with <code>useCapture</code> set to <code>false</code>.
 * @asparam priority 	The priority level of the event listener. Priorities are designated by a 32-bit integer. 
 * 					The higher the number, the higher the priority. All listeners with priority <em>n</em> 
 * 					are processed before listeners of priority <em>n-1</em>. If two or more listeners share 
 * 					the same priority, they are processed in the order in which they were added. The default priority is 0. 
 * @asparam useWeakReference Determines whether the reference to the listener is strong or weak. A strong 
 * reference (the default) prevents your listener from being garbage-collected. A weak 
 * reference does not. <p>Class-level member functions are not subject to garbage 
 * collection, so you can set <code>useWeakReference</code> to <code>true</code> for 
 * class-level member functions without subjecting them to garbage collection. If you set
 * <code>useWeakReference</code> to <code>true</code> for a listener that is a nested inner 
 * function, the function will be garbge-collected and no longer persistent. If you create 
 * references to the inner function (save it in another variable) then it is not 
 * garbage-collected and stays persistent.</p>
 *
 * @copy org.apache.royale.events.IEventDispatcher#addEventListener()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.addEventListener = function(type, listener, useCapture) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  this.getEventMirror().addEventListener(type, listener, useCapture);
};


/**
 * @copy org.apache.royale.events.IEventDispatcher#dispatchEvent()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.events.Event} evt
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.dispatchEvent = function(evt) {
  if (!this.hasActiveEventMirror())
    return false;
  return this._eventMirror.dispatchEvent(evt);
};


/**
 * @copy org.apache.royale.events.IEventDispatcher#hasEventListener()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} type
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.hasEventListener = function(type) {
  if (!this.hasActiveEventMirror())
    return false;
  return this._eventMirror.hasEventListener(type);
};


/**
 *
 * @asparam type The type of event.
 * @asparam listener The listener object to remove.
 * @asparam useCapture Specifies whether the listener was registered for the capture phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to <code>removeEventListener()</code> are required to remove both: one call with <code>useCapture</code> set to <code>true</code>, and another call with <code>useCapture</code> set to <code>false</code>. 
 *
 * @copy org.apache.royale.events.IEventDispatcher#removeEventListener().
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.removeEventListener = function(type, listener, useCapture) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  if (this.hasActiveEventMirror())
    this._eventMirror.removeEventListener(type, listener, useCapture);
};


/**
 *  @asprivate
 *  @royaleignorecoercion org.apache.royale.textLayout.elements.LinkElement
 * @override
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.shallowCopy = function(startPos, endPos) {
  startPos = typeof startPos !== 'undefined' ? startPos : 0;
  endPos = typeof endPos !== 'undefined' ? endPos : -1;
  if (endPos == -1)
    endPos = this.textLength;
  var /** @type {Object} */ retFlow = org.apache.royale.textLayout.elements.LinkElement.superClass_.shallowCopy.apply(this, [startPos, endPos]);
  retFlow.href = this.href;
  retFlow.target = this.target;
  return retFlow;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mergeToPreviousIfPossible = function() {
  if (this.parent && !this.bindableElement) {
    var /** @type {number} */ myidx = this.parent.getChildIndex(this);
    if (this.textLength == 0) {
      this.parent.replaceChildren(myidx, (myidx + 1) >> 0, null);
      return true;
    }
    if (myidx != 0 && !this.hasActiveEventMirror()) {
      var /** @type {org.apache.royale.textLayout.elements.LinkElement} */ sib = this.parent.getChildAt((myidx - 1) >> 0);
      if (sib != null && !sib.hasActiveEventMirror()) {
        if ((this.href == sib.href) && (this.target == sib.target) && this.equalStylesForMerge(sib)) {
          this.parent.removeChildAt((myidx) >>> 0);
          if (this.numChildren > 0)
            sib.replaceChildren(sib.numChildren, sib.numChildren, this.mxmlChildren);
          return true;
        }
      }
    }
  }
  return false;
};


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.LINK_NORMAL_FORMAT_NAME = "linkNormalFormat";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.LINK_ACTIVE_FORMAT_NAME = "linkActiveFormat";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.LINK_HOVER_FORMAT_NAME = "linkHoverFormat";


/**
 * @private
 * @param {string} formatName
 * @return {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.org_apache_royale_textLayout_elements_LinkElement_computeLinkFormat = function(formatName) {
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ linkStyle = this.getUserStyleWorker(formatName);
  if (linkStyle == null) {
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
    if (tf)
      linkStyle = tf.configuration["defaultL" + formatName.substr(1)];
  }
  return linkStyle;
};


/** @asprivate 
 * @private
 * @param {string} linkState
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.org_apache_royale_textLayout_elements_LinkElement_setToState = function(linkState) {
  if (this.org_apache_royale_textLayout_elements_LinkElement__linkState != linkState) {
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ oldCharAttrs = this.effectiveLinkElementTextLayoutFormat;
    this.org_apache_royale_textLayout_elements_LinkElement__linkState = linkState;
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ newCharAttrs = this.effectiveLinkElementTextLayoutFormat;
    if (!org.apache.royale.textLayout.formats.TextLayoutFormat.isEqual(oldCharAttrs, newCharAttrs)) {
      this.formatChanged(true);
      var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
      if (tf && tf.flowComposer)
        tf.flowComposer.updateAllControllers();
    }
  }
};


/** @asprivate 
 * @param {string} linkState
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.chgLinkState = function(linkState) {
  if (this.org_apache_royale_textLayout_elements_LinkElement__linkState != linkState) {
    this.org_apache_royale_textLayout_elements_LinkElement__linkState = linkState;
    this.formatChanged(false);
  }
};


/** @asprivate
 * The ElementMouseEventManager calls this method directly. Note that the mouse
 * coordinates are unrelated to any coordinate in the container or this element.
 * @param {org.apache.royale.textLayout.events.FlowElementMouseEventManager} mgr
 * @param {org.apache.royale.events.MouseEvent} evt
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mouseDownHandler = function(mgr, evt) {
  mgr.setHandCursor(true);
  this.org_apache_royale_textLayout_elements_LinkElement_setToState(org.apache.royale.textLayout.elements.LinkState.ACTIVE);
  evt.stopImmediatePropagation();
};


/** @asprivate
 * The ElementMouseEventManager calls this method directly. Note that the mouse
 * coordinates are unrelated to any coordinate in the container or this element.
 * @param {org.apache.royale.textLayout.events.FlowElementMouseEventManager} mgr
 * @param {org.apache.royale.events.MouseEvent} evt
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mouseMoveHandler = function(mgr, evt) {
  mgr.setHandCursor(true);
  this.org_apache_royale_textLayout_elements_LinkElement_setToState(evt.buttonDown ? org.apache.royale.textLayout.elements.LinkState.ACTIVE : org.apache.royale.textLayout.elements.LinkState.HOVER);
};


/** @asprivate
 * The ElementMouseEventManager calls this method directly. Note that the mouse
 * coordinates are unrelated to any coordinate in the container or this element.
 * @param {org.apache.royale.textLayout.events.FlowElementMouseEventManager} mgr
 * @param {org.apache.royale.events.MouseEvent} evt
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mouseOutHandler = function(mgr, evt) {
  mgr.setHandCursor(false);
  this.org_apache_royale_textLayout_elements_LinkElement_setToState(org.apache.royale.textLayout.elements.LinkState.LINK);
};


/** @asprivate
 * The ElementMouseEventManager calls this method directly. Note that the mouse
 * coordinates are unrelated to any coordinate in the container or this element.
 * @param {org.apache.royale.textLayout.events.FlowElementMouseEventManager} mgr
 * @param {org.apache.royale.events.MouseEvent} evt
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mouseOverHandler = function(mgr, evt) {
  mgr.setHandCursor(true);
  this.org_apache_royale_textLayout_elements_LinkElement_setToState(evt.buttonDown ? org.apache.royale.textLayout.elements.LinkState.ACTIVE : org.apache.royale.textLayout.elements.LinkState.HOVER);
};


/** @asprivate
 * The ElementMouseEventManager calls this method directly. Note that the mouse
 * coordinates are unrelated to any coordinate in the container or this element.
 * @param {org.apache.royale.textLayout.events.FlowElementMouseEventManager} mgr
 * @param {org.apache.royale.events.MouseEvent} evt
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mouseUpHandler = function(mgr, evt) {
  mgr.setHandCursor(true);
  this.org_apache_royale_textLayout_elements_LinkElement_setToState(org.apache.royale.textLayout.elements.LinkState.HOVER);
  evt.stopImmediatePropagation();
};


/** @asprivate
 * The ElementMouseEventManager calls this method directly. Note that the mouse
 * coordinates are unrelated to any coordinate in the container or this element.
 * @param {org.apache.royale.textLayout.events.FlowElementMouseEventManager} mgr
 * @param {org.apache.royale.events.MouseEvent} evt
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.mouseClickHandler = function(mgr, evt) {
  if (this.org_apache_royale_textLayout_elements_LinkElement__uriString != null) {
    if ((this.org_apache_royale_textLayout_elements_LinkElement__uriString.length > 6) && (this.org_apache_royale_textLayout_elements_LinkElement__uriString.substr(0, 6) == "event:")) {
      mgr.dispatchFlowElementMouseEvent(this.org_apache_royale_textLayout_elements_LinkElement__uriString.substring(6, this.org_apache_royale_textLayout_elements_LinkElement__uriString.length), evt);
    } else {
      org.apache.royale.core.BrowserWindow.open(this.org_apache_royale_textLayout_elements_LinkElement__uriString, this.target);
    }
  }
  evt.stopImmediatePropagation();
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.acceptTextBefore = function() {
  return false;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.acceptTextAfter = function() {
  return false;
};


/** @asprivate This is done so that the TextContainerManager can discover LinkElements in a ITextFlow. 
 * Links don't use the mouseeventdispatcher for link related events - that's a bug that should be fixed.
 * @override
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.appendElementsForDelayedUpdate = function(tf, changeType) {
  if (changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED) {
    tf.incInteractiveObjectCount();
    this.getParagraph().incInteractiveChildrenCount();
  } else if (changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL) {
    tf.decInteractiveObjectCount();
    this.getParagraph().decInteractiveChildrenCount();
  }
  org.apache.royale.textLayout.elements.LinkElement.superClass_.appendElementsForDelayedUpdate.apply(this, [tf, changeType]);
};


/** @asprivate This API supports the inputmanager 
 * @override
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.updateForMustUseComposer = function(textFlow) {
  return true;
};


org.apache.royale.textLayout.elements.LinkElement.prototype.get__className = function() {
  return "LinkElement";
};


org.apache.royale.textLayout.elements.LinkElement.prototype.get__precedence = function() {
  return 800;
};


org.apache.royale.textLayout.elements.LinkElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.LinkElement.prototype.get__defaultTypeName = function() {
  return "a";
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.href;


org.apache.royale.textLayout.elements.LinkElement.prototype.get__href = function() {
  return this.org_apache_royale_textLayout_elements_LinkElement__uriString;
};


org.apache.royale.textLayout.elements.LinkElement.prototype.set__href = function(newUriString) {
  this.org_apache_royale_textLayout_elements_LinkElement__uriString = newUriString;
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength);
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.target;


org.apache.royale.textLayout.elements.LinkElement.prototype.get__target = function() {
  return this.org_apache_royale_textLayout_elements_LinkElement__targetString;
};


org.apache.royale.textLayout.elements.LinkElement.prototype.set__target = function(newTargetString) {
  this.org_apache_royale_textLayout_elements_LinkElement__targetString = newTargetString;
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength);
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.linkState;


org.apache.royale.textLayout.elements.LinkElement.prototype.get__linkState = function() {
  return this.org_apache_royale_textLayout_elements_LinkElement__linkState;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.effectiveLinkElementTextLayoutFormat;


org.apache.royale.textLayout.elements.LinkElement.prototype.get__effectiveLinkElementTextLayoutFormat = function() {
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ cf;
  if (this.org_apache_royale_textLayout_elements_LinkElement__linkState == org.apache.royale.textLayout.elements.LinkState.SUPPRESSED)
    return null; else if (this.org_apache_royale_textLayout_elements_LinkElement__linkState == org.apache.royale.textLayout.elements.LinkState.ACTIVE) {
    cf = this.org_apache_royale_textLayout_elements_LinkElement_computeLinkFormat("linkActiveFormat");
    if (cf)
      return cf;
  } else if (this.org_apache_royale_textLayout_elements_LinkElement__linkState == org.apache.royale.textLayout.elements.LinkState.HOVER) {
    cf = this.org_apache_royale_textLayout_elements_LinkElement_computeLinkFormat("linkHoverFormat");
    if (cf)
      return cf;
  }
  return this.org_apache_royale_textLayout_elements_LinkElement_computeLinkFormat("linkNormalFormat");
};


org.apache.royale.textLayout.elements.LinkElement.prototype.get__formatForCascade = function() {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ superFormat = this.format;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ effectiveFormat = this.effectiveLinkElementTextLayoutFormat;
  if (effectiveFormat || superFormat) {
    if (effectiveFormat && superFormat) {
      var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ resultingTextLayoutFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(effectiveFormat);
      if (superFormat)
        resultingTextLayoutFormat.concatInheritOnly(superFormat);
      return resultingTextLayoutFormat;
    }
    return superFormat ? superFormat : effectiveFormat;
  }
  return null;
};


Object.defineProperties(org.apache.royale.textLayout.elements.LinkElement.prototype, /** @lends {org.apache.royale.textLayout.elements.LinkElement.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__className},
/**
 * @type {number}
 */
precedence: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__precedence},
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__defaultTypeName},
/**
 * @type {string}
 */
href: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__href,
set: org.apache.royale.textLayout.elements.LinkElement.prototype.set__href},
/**
 * @type {string}
 */
target: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__target,
set: org.apache.royale.textLayout.elements.LinkElement.prototype.set__target},
/**
 * @type {string}
 */
linkState: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__linkState},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
effectiveLinkElementTextLayoutFormat: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__effectiveLinkElementTextLayoutFormat},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
formatForCascade: {
get: org.apache.royale.textLayout.elements.LinkElement.prototype.get__formatForCascade}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LinkElement', qName: 'org.apache.royale.textLayout.elements.LinkElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.ILinkElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'precedence': { type: 'uint', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'href': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'target': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'linkState': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'effectiveLinkElementTextLayoutFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'formatForCascade': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'}
      };
    },
    methods: function () {
      return {
        'LinkElement': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'addEventListener': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'String', false ]; }},
        'removeEventListener': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ]; }},
        'shallowCopy': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'int', true ,'int', true ]; }},
        'mergeToPreviousIfPossible': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'chgLinkState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'String', false ]; }},
        'mouseDownHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.events.FlowElementMouseEventManager', false ,'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseMoveHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.events.FlowElementMouseEventManager', false ,'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOutHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.events.FlowElementMouseEventManager', false ,'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseOverHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.events.FlowElementMouseEventManager', false ,'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseUpHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.events.FlowElementMouseEventManager', false ,'org.apache.royale.events.MouseEvent', false ]; }},
        'mouseClickHandler': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.events.FlowElementMouseEventManager', false ,'org.apache.royale.events.MouseEvent', false ]; }},
        'acceptTextBefore': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'acceptTextAfter': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement'},
        'appendElementsForDelayedUpdate': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'String', false ]; }},
        'updateForMustUseComposer': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.LinkElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.LinkElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./LinkElement.js.map
