/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/FlowGroupElement.as
 * org.apache.royale.textLayout.elements.FlowGroupElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.FlowGroupElement');
/* Royale Dependency List: org.apache.royale.text.engine.ContentElement,org.apache.royale.text.engine.GroupElement,org.apache.royale.textLayout.compose.FlowDamageType,org.apache.royale.textLayout.container.IContainerController,org.apache.royale.textLayout.elements.FlowGroupHelper,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.FlowElement');
goog.require('org.apache.royale.textLayout.elements.IFlowGroupElement');



/** Base class - invoking <code>new FlowGroupElement()</code> throws an error exception.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.FlowElement}
 * @implements {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement = function() {
  org.apache.royale.textLayout.elements.FlowGroupElement.base(this, 'constructor');
  this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren = 0;
};
goog.inherits(org.apache.royale.textLayout.elements.FlowGroupElement, org.apache.royale.textLayout.elements.FlowElement);


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.org_apache_royale_textLayout_elements_FlowGroupElement__childArray;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren = 0;


/**
 *  @asprivate 
 *  @royaleignorecoercion org.apache.royale.textLayout.elements.IFlowGroupElement
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.deepCopy = function(startPos, endPos) {
  startPos = typeof startPos !== 'undefined' ? startPos : 0;
  endPos = typeof endPos !== 'undefined' ? endPos : -1;
  if (endPos == -1)
    endPos = this.textLength;
  var /** @type {Object} */ retFlow = this.shallowCopy(startPos, endPos);
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ newFlowElement;
  for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; idx++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    if (((startPos - child.parentRelativeStart) < child.textLength) && ((endPos - child.parentRelativeStart) > 0)) {
      newFlowElement = child.deepCopy((startPos - child.parentRelativeStart) >> 0, (endPos - child.parentRelativeStart) >> 0);
      retFlow.replaceChildren(retFlow.numChildren, retFlow.numChildren, newFlowElement);
      if (retFlow.numChildren > 1) {
        var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ possiblyEmptyFlowElement = retFlow.getChildAt((retFlow.numChildren - 2) >> 0);
        if (possiblyEmptyFlowElement.textLength == 0) {
          retFlow.replaceChildren((retFlow.numChildren - 2) >> 0, (retFlow.numChildren - 1) >> 0);
        }
      }
    }
  }
  return retFlow;
};


/**
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getText = function(relativeStart, relativeEnd, paragraphSeparator) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  paragraphSeparator = typeof paragraphSeparator !== 'undefined' ? paragraphSeparator : "\n";
  var /** @type {string} */ text = org.apache.royale.textLayout.elements.FlowGroupElement.superClass_.getText.apply(this);
  return org.apache.royale.textLayout.elements.FlowGroupHelper.getText(this, text, relativeStart, relativeEnd, paragraphSeparator);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.formatChanged = function(notifyModelChanged) {
  notifyModelChanged = typeof notifyModelChanged !== 'undefined' ? notifyModelChanged : true;
  org.apache.royale.textLayout.elements.FlowGroupElement.superClass_.formatChanged.apply(this, [notifyModelChanged]);
  for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; idx++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    child.formatChanged(false);
  }
};


/** This gets called when an element has changed its style selection related attributes. This may happen because an
 * ancestor element changed it attributes.
 * @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.styleSelectorChanged = function() {
  org.apache.royale.textLayout.elements.FlowGroupElement.superClass_.styleSelectorChanged.apply(this);
  this.formatChanged(false);
};


/** 
 * Searches in children for the specified FlowElement object and returns its index position.
 *
 * @asparam child	The FlowElement object item to locate among the children.
 * @asreturn The index position of the specified chilc.  If <code>child</code> is not found, returns -1.
 *  
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @return {number}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getChildIndex = function(child) {
  var /** @type {number} */ testmid = 0;
  var /** @type {number} */ hi = (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren - 1) >> 0;
  if (hi <= 0)
    return (this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild == child ? 0 : -1) >> 0;
  var /** @type {number} */ lo = 0;
  while (lo <= hi) {
    var /** @type {number} */ mid = (Math.floor((lo + hi) / 2)) >> 0;
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ p = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[mid];
    if (p.parentRelativeStart == child.parentRelativeStart) {
      if (p == child) {
        
        return mid;
      }
      //var /** @type {number} */ testmid = 0;
      if (p.textLength == 0) {
        for (testmid = mid; testmid < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; testmid++) {
          p = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[testmid];
          if (p == child) {
            
            return testmid;
          }
          if (p.textLength != 0)
            break;
        }
      }
      while (mid > 0) {
        mid--;
        p = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[mid];
        if (p == child) {
          
          return mid;
        }
        if (p.textLength != 0)
          break;
      }
      
      return -1;
    }
    if (p.parentRelativeStart < child.parentRelativeStart)
      lo = (mid + 1) >> 0;
    else
      hi = (mid - 1) >> 0;
  }
  
  return -1;
};


/** 
 * Returns the FlowElement child at the specified index.
 * 
 * @asparam index the position at which to find the FlowElement object.
 *
 * @asreturn  the child FlowElement object at the specified position.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getChildAt = function(index) {
  if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren > 1)
    return this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[index];
  return index == 0 ? this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild : null;
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} limitElement
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @return {org.apache.royale.textLayout.elements.IFlowLeafElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getNextLeafHelper = function(limitElement, child) {
  var /** @type {number} */ idx = this.getChildIndex(child);
  if (idx == -1)
    return null;
  if (idx == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren - 1) {
    if (limitElement == this || !this.parent)
      return null;
    return this.parent.getNextLeafHelper(limitElement, this);
  }
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ childFlowElement = this.getChildAt((idx + 1) >> 0);
  return org.apache.royale.utils.Language.is(childFlowElement, org.apache.royale.textLayout.elements.IFlowLeafElement) ? org.apache.royale.utils.Language.as(childFlowElement, org.apache.royale.textLayout.elements.IFlowLeafElement, true) : org.apache.royale.utils.Language.as(childFlowElement, org.apache.royale.textLayout.elements.FlowGroupElement, true).getFirstLeaf();
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.IFlowGroupElement} limitElement
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @return {org.apache.royale.textLayout.elements.IFlowLeafElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getPreviousLeafHelper = function(limitElement, child) {
  var /** @type {number} */ idx = this.getChildIndex(child);
  if (idx == -1)
    return null;
  if (idx == 0) {
    if (limitElement == this || !this.parent)
      return null;
    return this.parent.getPreviousLeafHelper(limitElement, this);
  }
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ childFlowElement = this.getChildAt((idx - 1) >> 0);
  return org.apache.royale.utils.Language.is(childFlowElement, org.apache.royale.textLayout.elements.IFlowLeafElement) ? org.apache.royale.utils.Language.as(childFlowElement, org.apache.royale.textLayout.elements.IFlowLeafElement, true) : org.apache.royale.utils.Language.as(childFlowElement, org.apache.royale.textLayout.elements.FlowGroupElement, true).getLastLeaf();
};


/**
 * Given a relative text position, find the leaf element that contains the position. 
 *
 * <p>Looks down the flow element hierarchy to find the IFlowLeafElement that 
 * contains the specified position. The specified position 
 * is relative to this FlowElement object.</p>
 *
 * @asparam relativePosition	relative text index to look up.
 * @asreturn	the leaf element containing the relative position.
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} relativePosition
 * @return {org.apache.royale.textLayout.elements.IFlowLeafElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.findLeaf = function(relativePosition) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ found = null;
  var /** @type {number} */ childIdx = this.findChildIndexAtPosition(relativePosition);
  if (childIdx != -1) {
    do {
      var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(childIdx++);
      if (!child)
        break;
      var /** @type {number} */ childRelativePos = (relativePosition - child.parentRelativeStart) >> 0;
      if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.FlowGroupElement))
        found = org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowGroupElement, true).findLeaf(childRelativePos); else {
        
        if (childRelativePos >= 0 && childRelativePos < child.textLength || (child.textLength == 0 && this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 1))
          found = org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowLeafElement, true);
      }
    } while (!found && !child.textLength);
  }
  return found;
};


/**
 * Given a relative text position, find the index of the first child FlowElement that contains the relative position. 
 * More than one child can contain relative position because of zero length FlowElements.
 *  
 * <p>Examine the children to find the FlowElement that contains the relative position. The supplied relative position 
 * is relative to this FlowElement.</p>
 *
 * @asparam relativePosition 	the position relative to this element
 * @asreturn 	index of first child element containing <code>relativePosition</code>
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} relativePosition
 * @return {number}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.findChildIndexAtPosition = function(relativePosition) {
  var /** @type {number} */ lo = 0;
  var /** @type {number} */ hi = (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren - 1) >> 0;
  while (lo <= hi) {
    var /** @type {number} */ mid = (Math.floor((lo + hi) / 2)) >> 0;
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(mid);
    if (child.parentRelativeStart <= relativePosition) {
      if (child.parentRelativeStart == relativePosition) {
        while (mid != 0) {
          child = this.getChildAt((mid - 1) >> 0);
          if (child.textLength != 0)
            break;
          mid--;
        }
        return mid;
      }
      if (child.parentRelativeStart + child.textLength > relativePosition)
        return mid;
      lo = (mid + 1) >> 0;
    }
    else
      hi = (mid - 1) >> 0;
  }
  return -1;
};


/**
 * Returns the first FlowLeafElement descendant of this group.
 *
 * @asreturn the first FlowLeafElement object.
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {org.apache.royale.textLayout.elements.IFlowLeafElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getFirstLeaf = function() {
  if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren > 1) {
    for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; idx++) {
      var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[idx];
      var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.FlowGroupElement) ? org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.FlowGroupElement, true).getFirstLeaf() : org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowLeafElement, true);
      if (leaf)
        return leaf;
    }
    return null;
  }
  return this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 0 ? null : (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, org.apache.royale.textLayout.elements.FlowGroupElement) ? org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, org.apache.royale.textLayout.elements.FlowGroupElement, true).getFirstLeaf() : org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, org.apache.royale.textLayout.elements.IFlowLeafElement, true));
};


/**
 * Returns the last FlowLeafElement descendent of this group.
 *
 * @asreturn the last FlowLeafElement object.
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {org.apache.royale.textLayout.elements.IFlowLeafElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getLastLeaf = function() {
  if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren > 1) {
    for (var /** @type {number} */ idx = this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; idx != 0; idx--) {
      var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[idx - 1];
      var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.FlowGroupElement) ? org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.FlowGroupElement, true).getLastLeaf() : org.apache.royale.utils.Language.as(child, org.apache.royale.textLayout.elements.IFlowLeafElement, true);
      if (leaf)
        return leaf;
    }
    return null;
  }
  return this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 0 ? null : (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, org.apache.royale.textLayout.elements.FlowGroupElement) ? org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, org.apache.royale.textLayout.elements.FlowGroupElement, true).getLastLeaf() : org.apache.royale.utils.Language.as(this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, org.apache.royale.textLayout.elements.IFlowLeafElement, true));
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.getCharAtPosition = function(relativePosition) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ leaf = this.findLeaf(relativePosition);
  return leaf ? leaf.getCharAtPosition((relativePosition - leaf.getElementRelativeStart(this)) >> 0) : "";
};


/** @asprivate apply func to all elements until func says stop 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.applyFunctionToElements = function(func) {
  if (func(this))
    return true;
  for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; idx++) {
    if (this.getChildAt(idx).applyFunctionToElements(func))
      return true;
  }
  return false;
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @param {org.apache.royale.text.engine.ContentElement} block
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.removeBlockElement = function(child, block) {
  
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @param {org.apache.royale.text.engine.ContentElement} block
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.insertBlockElement = function(child, block) {
  
};


/** @asprivate 
 * True if there is a corresponding FTE data structure currently instantiated.
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.hasBlockElement = function() {
  
  return false;
};


/** @asprivate 
 * @param {number=} pos
 * @return {org.apache.royale.text.engine.GroupElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.createContentAsGroup = function(pos) {
  pos = typeof pos !== 'undefined' ? pos : 0;
  
  return null;
};


/** @asprivate This is only called from SpanElement.splitAtPosition 
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @param {org.apache.royale.textLayout.elements.IFlowElement} newChild
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.addChildAfterInternal = function(child, newChild) {
  
  
  if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren > 1) {
    
    this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray.splice(this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray.indexOf(child) + 1, 0, newChild);
  } else {
    
    this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray = [this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, newChild];
    this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild = null;
  }
  this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren++;
  newChild.setParentAndRelativeStartOnly(this, child.parentRelativeEnd);
};


/**
 * Helper for replaceChildren.  Determines if elem can legally be a child of this.
 * @asreturn true --> ok, false--> not a legal child
 * @asprivate 
 * @param {org.apache.royale.textLayout.elements.IFlowElement} elem
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.canOwnFlowElement = function(elem) {
  return !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITextFlow) && !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.IFlowLeafElement) && !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase) && !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.IListItemElement) && !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableElement);
};


/** @asprivate 
 * @private
 * @param {Object} obj
 * @return {number}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.getNestedArgCount = function(obj) {
  return (org.apache.royale.utils.Language.is(obj, Array) ? obj.length : 1) >>> 0;
};


/** @asprivate 
 * @private
 * @param {Object} obj
 * @param {number} index
 * @return {org.apache.royale.textLayout.elements.FlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.getNestedArg = function(obj, index) {
  
  return (org.apache.royale.utils.Language.is(obj, Array) ? obj[index] : obj);
};


/**
 * Replaces child elements in the group with the specified new elements. Use the <code>beginChildIndex</code> and
 * <code>endChildIndex</code> parameters to govern the operation as follows:
 * <p><ul>
 * <li>To delete elements, do not pass any replacement elements.</li>
 * <li>To insert elements, pass the same value for <code>beginChildIndex</code> and <code>endChildIndex</code>.  
 * The new elements is inserted before the specified index.</li>
 * <li>To append elements, pass <code>numChildren</code> for <code>beginChildIndex</code> and <code>endChildIndex</code>.</li>
 * </ul></p>
 * <p>Otherwise, this method replaces the specified elements, starting with the element at <code>beginChildIndex</code> 
 * and up to but not including <code>endChildIndex</code>.</p>
 * 
 * @asparam beginChildIndex The index value for the start position of the replacement range in the children array.
 * @asparam endChildIndex The index value following the end position of the replacement range in the children array.
 * @asparam rest The elements to replace the specified range of elements. Can be a sequence containing flow elements or
 * arrays or vectors thereof.
 *	 
 * @throws RangeError The <code>beginChildIndex</code> or <code>endChildIndex</code> specified is out of range.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} beginChildIndex
 * @param {number} endChildIndex
 * @param {...} rest
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.replaceChildren = function(beginChildIndex, endChildIndex, rest) {
  rest = Array.prototype.slice.call(arguments, 2);
  var /** @type {number} */ idx = 0;
  if (beginChildIndex > this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren || endChildIndex > this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren)
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("badReplaceChildrenIndex"));
  var /** @type {number} */ thisAbsStart = this.getAbsoluteStart();
  var /** @type {number} */ absStartIdx = (thisAbsStart + (beginChildIndex == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren ? this.textLength : this.getChildAt(beginChildIndex).parentRelativeStart)) >> 0;
  var /** @type {number} */ relStartIdx = beginChildIndex == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren ? this.textLength : this.getChildAt(beginChildIndex).parentRelativeStart;
  if (beginChildIndex < endChildIndex) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child;
    var /** @type {number} */ len = 0;
    while (beginChildIndex < endChildIndex) {
      child = this.getChildAt(beginChildIndex);
      this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL, child, child.parentRelativeStart, child.textLength);
      child.removed();
      len += child.textLength;
      child.setParentAndRelativeStart(null, 0);
      if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 1) {
        this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild = null;
        this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren = 0;
      } else {
        this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray.splice(beginChildIndex, 1);
        this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren--;
        if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 1) {
          this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray[0];
          this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray = null;
        }
      }
      endChildIndex--;
    }
    if (len) {
      while (endChildIndex < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren) {
        child = this.getChildAt(endChildIndex);
        child.setParentRelativeStart((child.parentRelativeStart - len) >> 0);
        endChildIndex++;
      }
      this.updateLengths(absStartIdx, (-len) >> 0, true);
      this.deleteContainerText((relStartIdx + len) >> 0, len);
    }
  }
  
  var /** @type {number} */ childrenToAdd = 0;
  var /** @type {Array} */ flatNewChildList;
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ newChildToAdd;
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ newChild;
  //var /** @type {number} */ idx = 0;
  var foreachiter0_target = rest;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var obj = foreachiter0_target[foreachiter0];
  {
    if (!obj)
      continue;
    var /** @type {number} */ numNestedArgs = (org.apache.royale.textLayout.elements.FlowGroupElement.getNestedArgCount(obj)) >> 0;
    for (idx = 0; idx < numNestedArgs; idx++) {
      newChild = org.apache.royale.textLayout.elements.FlowGroupElement.getNestedArg(obj, (idx) >>> 0);
      if (newChild) {
        var /** @type {org.apache.royale.textLayout.elements.IFlowGroupElement} */ newChildParent = newChild.parent;
        if (newChildParent) {
          if (newChildParent == this) {
            var /** @type {number} */ childIndex = this.getChildIndex(newChild);
            newChildParent.removeChild(newChild);
            thisAbsStart = this.getAbsoluteStart();
            if (childIndex <= beginChildIndex) {
              beginChildIndex--;
              absStartIdx = (thisAbsStart + (beginChildIndex == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren ? this.textLength : this.getChildAt(beginChildIndex).parentRelativeStart)) >> 0;
              relStartIdx = beginChildIndex == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren ? this.textLength : this.getChildAt(beginChildIndex).parentRelativeStart;
            }
          } else {
            newChildParent.removeChild(newChild);
            thisAbsStart = this.getAbsoluteStart();
            absStartIdx = (thisAbsStart + (beginChildIndex == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren ? this.textLength : this.getChildAt(beginChildIndex).parentRelativeStart)) >> 0;
            relStartIdx = beginChildIndex == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren ? this.textLength : this.getChildAt(beginChildIndex).parentRelativeStart;
          }
        }
        if (!this.canOwnFlowElement(newChild)) {
          throw new Error(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("invalidChildType") + ". " + this.defaultTypeName + " cannot own " + newChild.defaultTypeName);
        }
        if (childrenToAdd == 0)
          newChildToAdd = newChild;
        else if (childrenToAdd == 1)
          flatNewChildList = [newChildToAdd, newChild];
        else
          flatNewChildList.push(newChild);
        childrenToAdd++;
      }
    }
  }}
  
  if (childrenToAdd) {
    var /** @type {number} */ addedTextLength = 0;
    for (idx = 0; idx < childrenToAdd; idx++) {
      newChild = childrenToAdd == 1 ? newChildToAdd : flatNewChildList[idx];
      if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 0)
        this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild = newChild;
      else if (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren > 1)
        this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray.splice(beginChildIndex, 0, newChild); else {
        this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray = beginChildIndex == 0 ? [newChild, this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild] : [this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild, newChild];
        this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild = null;
      }
      this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren++;
      newChild.setParentAndRelativeStart(this, (relStartIdx + addedTextLength) >> 0);
      addedTextLength += (newChild.textLength) >>> 0;
      beginChildIndex++;
    }
    
    if (addedTextLength) {
      while (beginChildIndex < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren) {
        child = this.getChildAt(beginChildIndex++);
        child.setParentRelativeStart((child.parentRelativeStart + addedTextLength) >> 0);
      }
      this.updateLengths(absStartIdx, (addedTextLength) >> 0, true);
      var /** @type {org.apache.royale.textLayout.container.IContainerController} */ enclosingContainer = this.getEnclosingController(relStartIdx);
      if (enclosingContainer)
        enclosingContainer.setTextLength((enclosingContainer.textLength + addedTextLength) >> 0);
    }
    for (idx = 0; idx < childrenToAdd; idx++) {
      newChild = childrenToAdd == 1 ? newChildToAdd : flatNewChildList[idx];
      this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED, newChild, newChild.parentRelativeStart, newChild.textLength);
    }
  } else {
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tFlow = this.getTextFlow();
    if (tFlow != null) {
      if (beginChildIndex < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren) {
        idx = (thisAbsStart + this.getChildAt(beginChildIndex).parentRelativeStart) >> 0;
      } else if (beginChildIndex > 1) {
        newChild = this.getChildAt((beginChildIndex - 1) >> 0);
        idx = (thisAbsStart + newChild.parentRelativeStart + newChild.textLength - 1) >> 0;
      } else {
        idx = thisAbsStart;
        if (idx >= tFlow.textLength)
          idx--;
      }
      tFlow.damage(idx, 1, org.apache.royale.textLayout.compose.FlowDamageType.INVALID, false);
    }
  }
};


/** 
 * Appends a child FlowElement object. The new child is added to the end of the children list.
 * 
 * @asparam child The child element to append.
 *
 * @asreturn  the added child FlowElement 
 * 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @return {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.addChild = function(child) {
  this.replaceChildren(this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren, this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren, child);
  return child;
};


/** 
 * Adds a child FlowElement object at the specified index position.
 *
 * @asparam The index of the position at which to add the child element, with the first position being 0.
 * @asparam child The child element to add.
 * @throws RangeError The <code>index</code> is out of range.
 *
 * @asreturn  the added child FlowElement 
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @param {number} index
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @return {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.addChildAt = function(index, child) {
  this.replaceChildren((index) >> 0, (index) >> 0, child);
  return child;
};


/** 
 * Removes the specified child FlowElement object from the group.
 *
 * @asparam child The child element to remove.
 * @throws ArgumentError The <code>child</code> is not found.
 *
 * @asreturn  the removed child FlowElement object 
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @param {org.apache.royale.textLayout.elements.IFlowElement} child
 * @return {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.removeChild = function(child) {
  var /** @type {number} */ index = this.getChildIndex(child);
  if (index == -1)
    throw new Error(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("badRemoveChild"));
  this.removeChildAt((index) >>> 0);
  return child;
};


/** 
 * Removes the child FlowElement object at the specified index position.
 *
 * @asparam index position at which to remove the child element.
 * @throws RangeError The <code>index</code> is out of range.
 *
 * @asreturn  the child FlowElement object removed from the specified position.
 *
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} index
 * @return {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.removeChildAt = function(index) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ childToReplace = this.getChildAt((index) >> 0);
  this.replaceChildren((index) >> 0, (index + 1) >> 0);
  return childToReplace;
};


/** 
 * Splits this object at the position specified by the <code>childIndex</code> parameter. If this group element has 
 * a parent, creates a shallow copy of this object and replaces its children with the elements up to the index. Moves 
 * elements following <code>childIndex</code> into the copy.
 * 
 * @asreturn the new FlowGroupElement object.
 * @throws RangeError if <code>childIndex</code> is greater than the length of the children.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} childIndex
 * @return {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.splitAtIndex = function(childIndex) {
  if (childIndex > this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren)
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("invalidSplitAtIndex"));
  var /** @type {org.apache.royale.textLayout.elements.FlowGroupElement} */ newSibling = this.shallowCopy();
  var /** @type {number} */ numChildrenToMove = (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren - childIndex) >> 0;
  if (numChildrenToMove == 1)
    newSibling.addChild(this.removeChildAt((childIndex) >>> 0)); else if (numChildrenToMove != 0) {
    var /** @type {Array} */ childArray = this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray.slice(childIndex);
    this.replaceChildren(childIndex, (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren - 1) >> 0);
    newSibling.replaceChildren(0, 0, childArray);
  }
  if (this.parent) {
    var /** @type {number} */ myidx = this.parent.getChildIndex(this);
    this.parent.replaceChildren((myidx + 1) >> 0, (myidx + 1) >> 0, newSibling);
  }
  return newSibling;
};


/** 
 * Splits this object at the position specified by the <code>relativePosition</code> parameter, where 
 * the relative position is a relative text position in this element.
 * 
 * @throws RangeError if relativePosition is greater than textLength, or less than 0.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @asprivate
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.splitAtPosition = function(relativePosition) {
  var /** @type {number} */ curElementIdx = 0;
  if ((relativePosition < 0) || (relativePosition > this.textLength))
    throw RangeError(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("invalidSplitAtPosition"));
  //var /** @type {number} */ curElementIdx = 0;
  if (relativePosition == this.textLength)
    curElementIdx = this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; else {
    curElementIdx = this.findChildIndexAtPosition(relativePosition);
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ curFlowElement = this.getChildAt(curElementIdx);
    if (curFlowElement.parentRelativeStart != relativePosition) {
      curFlowElement.splitAtPosition((relativePosition - curFlowElement.parentRelativeStart) >> 0);
      curElementIdx++;
    }
  }
  return this.splitAtIndex(curElementIdx);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.normalizeRange = function(normalizeStart, normalizeEnd) {
  var /** @type {number} */ idx = this.findChildIndexAtPosition((normalizeStart) >> 0);
  if (idx != -1 && idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    normalizeStart = (normalizeStart - child.parentRelativeStart) >>> 0;
    
    for (;;) {
      var /** @type {number} */ origChildEnd = (child.parentRelativeStart + child.textLength) >> 0;
      child.normalizeRange(normalizeStart, (normalizeEnd - child.parentRelativeStart) >>> 0);
      var /** @type {number} */ newChildEnd = (child.parentRelativeStart + child.textLength) >> 0;
      normalizeEnd += (newChildEnd - origChildEnd) >>> 0;
      if (child.textLength == 0 && !child.bindableElement)
        this.replaceChildren(idx, (idx + 1) >> 0);
      else
        idx++;
      if (idx == this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren)
        break;
      child = this.getChildAt(idx);
      if (child.parentRelativeStart > normalizeEnd)
        break;
      normalizeStart = 0;
    }
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.applyWhiteSpaceCollapse = function(collapse) {
  if (collapse == null)
    collapse = org.apache.royale.utils.Language.string(this.computedFormat.whiteSpaceCollapse); else {
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ ffc = this.formatForCascade;
    var /** @type {*} */ wsc = ffc ? ffc.whiteSpaceCollapse : undefined;
    if (wsc !== undefined && wsc != org.apache.royale.textLayout.formats.FormatValue.INHERIT)
      collapse = org.apache.royale.utils.Language.string(wsc);
  }
  for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren;) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    child.applyWhiteSpaceCollapse(collapse);
    if (child.parent == this)
      ++idx;
  }
  if (this.textLength == 0 && this.impliedElement && this.parent != null)
    this.parent.removeChild(this);
  org.apache.royale.textLayout.elements.FlowGroupElement.superClass_.applyWhiteSpaceCollapse.apply(this, [collapse]);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.appendElementsForDelayedUpdate = function(tf, changeType) {
  for (var /** @type {number} */ idx = 0; idx < this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren; idx++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    child.appendElementsForDelayedUpdate(tf, changeType);
  }
};


org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__className = function() {
  return "FlowGroupElement";
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.mxmlChildren;


org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__mxmlChildren = function() {
  return this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 0 ? null : (this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren == 1 ? [this.org_apache_royale_textLayout_elements_FlowGroupElement__singleChild] : this.org_apache_royale_textLayout_elements_FlowGroupElement__childArray.slice());
};


org.apache.royale.textLayout.elements.FlowGroupElement.prototype.set__mxmlChildren = function(array) {
  org.apache.royale.textLayout.elements.FlowGroupHelper.setMxmlChildren(this, array);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.numChildren;


org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__numChildren = function() {
  return this.org_apache_royale_textLayout_elements_FlowGroupElement__numChildren;
};


Object.defineProperties(org.apache.royale.textLayout.elements.FlowGroupElement.prototype, /** @lends {org.apache.royale.textLayout.elements.FlowGroupElement.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__className},
/**
 * @type {Array}
 */
mxmlChildren: {
get: org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__mxmlChildren,
set: org.apache.royale.textLayout.elements.FlowGroupElement.prototype.set__mxmlChildren},
/**
 * @type {number}
 */
numChildren: {
get: org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__numChildren}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FlowGroupElement', qName: 'org.apache.royale.textLayout.elements.FlowGroupElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.IFlowGroupElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'mxmlChildren': { type: 'Array', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'numChildren': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'}
      };
    },
    methods: function () {
      return {
        'FlowGroupElement': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'deepCopy': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', true ,'int', true ]; }},
        'getText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', true ,'int', true ,'String', true ]; }},
        'formatChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'Boolean', true ]; }},
        'styleSelectorChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'getChildIndex': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'getChildAt': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ]; }},
        'getNextLeafHelper': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'getPreviousLeafHelper': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'findLeaf': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ]; }},
        'findChildIndexAtPosition': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ]; }},
        'getFirstLeaf': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'getLastLeaf': { type: 'org.apache.royale.textLayout.elements.IFlowLeafElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'getCharAtPosition': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ]; }},
        'applyFunctionToElements': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'Function', false ]; }},
        'removeBlockElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.text.engine.ContentElement', false ]; }},
        'insertBlockElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.text.engine.ContentElement', false ]; }},
        'hasBlockElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement'},
        'createContentAsGroup': { type: 'org.apache.royale.text.engine.GroupElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', true ]; }},
        'addChildAfterInternal': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'canOwnFlowElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'replaceChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ,'int', false ,'Array', false ]; }},
        'addChild': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'addChildAt': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'uint', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'removeChild': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'removeChildAt': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'uint', false ]; }},
        'splitAtIndex': { type: 'org.apache.royale.textLayout.elements.IFlowGroupElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ]; }},
        'splitAtPosition': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'int', false ]; }},
        'normalizeRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'uint', false ,'uint', false ]; }},
        'applyWhiteSpaceCollapse': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'String', false ]; }},
        'appendElementsForDelayedUpdate': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.FlowGroupElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.FlowGroupElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./FlowGroupElement.js.map
