/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/CellCoordinates.as
 * org.apache.royale.textLayout.elements.CellCoordinates
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.CellCoordinates');
/* Royale Dependency List: org.apache.royale.textLayout.elements.ITableElement,XML*/




/**
 * @constructor
 * @constructor
 * @param {number} row
 * @param {number} column
 * @param {org.apache.royale.textLayout.elements.ITableElement=} table
 */
org.apache.royale.textLayout.elements.CellCoordinates = function(row, column, table) {
  table = typeof table !== 'undefined' ? table : null;
  this.org_apache_royale_textLayout_elements_CellCoordinates__row = row;
  this.org_apache_royale_textLayout_elements_CellCoordinates__column = column;
  this.table = table;
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.org_apache_royale_textLayout_elements_CellCoordinates__column = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.org_apache_royale_textLayout_elements_CellCoordinates__row = 0;


/**
 * Checks if two coordiates are in the same location
 * @nocollapse
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} coords1
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} coords2
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.CellCoordinates.areEqual = function(coords1, coords2) {
  return coords1.row == coords2.row && coords1.column == coords2.column;
};


/**
 * Returns true if the column and row are greater than -1
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.isValid = function() {
  return this.column > -1 && this.row > -1;
};


/**
 * Creates a new CellCoordinates with the same row and column values
 * @return {org.apache.royale.textLayout.elements.CellCoordinates}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.clone = function() {
  return new org.apache.royale.textLayout.elements.CellCoordinates(this.row, this.column);
};


/**
 * @type {org.apache.royale.textLayout.elements.ITableElement}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.table;


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.column;


org.apache.royale.textLayout.elements.CellCoordinates.prototype.get__column = function() {
  return this.org_apache_royale_textLayout_elements_CellCoordinates__column;
};


org.apache.royale.textLayout.elements.CellCoordinates.prototype.set__column = function(value) {
  this.org_apache_royale_textLayout_elements_CellCoordinates__column = value;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.row;


org.apache.royale.textLayout.elements.CellCoordinates.prototype.get__row = function() {
  return this.org_apache_royale_textLayout_elements_CellCoordinates__row;
};


org.apache.royale.textLayout.elements.CellCoordinates.prototype.set__row = function(value) {
  this.org_apache_royale_textLayout_elements_CellCoordinates__row = value;
};


Object.defineProperties(org.apache.royale.textLayout.elements.CellCoordinates.prototype, /** @lends {org.apache.royale.textLayout.elements.CellCoordinates.prototype} */ {
/**
 * @type {number}
 */
column: {
get: org.apache.royale.textLayout.elements.CellCoordinates.prototype.get__column,
set: org.apache.royale.textLayout.elements.CellCoordinates.prototype.set__column},
/**
 * @type {number}
 */
row: {
get: org.apache.royale.textLayout.elements.CellCoordinates.prototype.get__row,
set: org.apache.royale.textLayout.elements.CellCoordinates.prototype.set__row}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CellCoordinates', qName: 'org.apache.royale.textLayout.elements.CellCoordinates', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'table': { type: 'org.apache.royale.textLayout.elements.ITableElement', get_set: function (/** org.apache.royale.textLayout.elements.CellCoordinates */ inst, /** * */ v) {return v !== undefined ? inst.table = v : inst.table;}}
      };
    },
    accessors: function () {
      return {
        'column': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.CellCoordinates'},
        'row': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.CellCoordinates'}
      };
    },
    methods: function () {
      return {
        'CellCoordinates': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.CellCoordinates', parameters: function () { return [ 'int', false ,'int', false ,'org.apache.royale.textLayout.elements.ITableElement', true ]; }},
        '|areEqual': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.CellCoordinates', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'isValid': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.CellCoordinates'},
        'clone': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', declaredBy: 'org.apache.royale.textLayout.elements.CellCoordinates'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.CellCoordinates.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CellCoordinates.js.map
