/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/ParagraphElement.as
 * org.apache.royale.textLayout.elements.ParagraphElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.ParagraphElement');
/* Royale Dependency List: org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.text.engine.ContentElement,org.apache.royale.text.engine.EastAsianJustifier,org.apache.royale.text.engine.GroupElement,org.apache.royale.text.engine.ITextBlock,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.engine.LineJustification,org.apache.royale.text.engine.SpaceJustifier,org.apache.royale.text.engine.TabAlignment,org.apache.royale.text.engine.TabStop,org.apache.royale.text.engine.TextRotation,org.apache.royale.textLayout.compose.ITextFlowLine,org.apache.royale.textLayout.elements.ConfigSettings,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.FlowElement,org.apache.royale.textLayout.elements.GlobalSettings,org.apache.royale.textLayout.elements.IContainerFormattedElement,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.ISpanElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.LeadingUtils,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.JustificationRule,org.apache.royale.textLayout.formats.LeadingModel,org.apache.royale.textLayout.formats.LineBreak,org.apache.royale.textLayout.formats.TabStopFormat,org.apache.royale.textLayout.formats.TextAlign,org.apache.royale.textLayout.formats.TextJustify,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.property.PropertyUtil,org.apache.royale.textLayout.utils.CharacterUtil,org.apache.royale.textLayout.utils.LocaleUtil,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.IParagraphElement');
goog.require('org.apache.royale.textLayout.elements.ParagraphFormattedElement');



/** Constructor - represents a paragraph in a text flow. 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.ParagraphFormattedElement}
 * @implements {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.elements.ParagraphElement = function() {
  org.apache.royale.textLayout.elements.ParagraphElement.base(this, 'constructor');
  this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = null;
  this.org_apache_royale_textLayout_elements_ParagraphElement__interactiveChildrenCount = 0;
};
goog.inherits(org.apache.royale.textLayout.elements.ParagraphElement, org.apache.royale.textLayout.elements.ParagraphFormattedElement);


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.ISpanElement}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement__interactiveChildrenCount = 0;


/** @asprivate 
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.createTextBlock = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
  if (!tf)
    return;
  this.calculateComputedFormat();
  var /** @type {Array} */ tbs = this.getTextBlocks();
  var /** @type {number} */ tableCount = 0;
  if (tbs.length == 0 && !org.apache.royale.utils.Language.is(this.getChildAt(0), org.apache.royale.textLayout.elements.ITableElement))
    tbs.push(tf.tlfFactory.textFactory.getTextBlock());
  for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(i);
    if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableElement))
      tableCount++; else {
    }
  }
  while (tableCount >= tbs.length)
    tbs.push(tf.tlfFactory.textFactory.getTextBlock());
  for (i = 0; i < this.numChildren; i++) {
    child = this.getChildAt(i);
    child.createContentElement();
  }
  tbs.length = (tableCount + 1) >>> 0;
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb;
  var foreachiter0_target = tbs;
  for (var foreachiter0 in foreachiter0_target) 
  {
  tb = foreachiter0_target[foreachiter0];
  {
    this.org_apache_royale_textLayout_elements_ParagraphElement_updateTextBlock(tb);
  }}
  
};


/**
 * @private
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_updateTextBlockRefs = function() {
  var /** @type {Array} */ tbs = this.getTextBlocks();
  if (tbs.length == 0)
    return;
  var /** @type {number} */ tbIdx = 0;
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb = tbs[tbIdx];
  var /** @type {Array} */ items = [];
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child;
  for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
    child = this.getChildAt(i);
    if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableElement)) {
      tb.userData = items;
      if (++tbIdx == tbs.length)
        return;
      tb = tbs[tbIdx];
      tb.userData = null;
      if (++tbIdx == tbs.length)
        return;
      tb = tbs[tbIdx];
      items = [];
      continue;
    }
    items.push(child);
  }
  tb.userData = items;
};


/**
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock} tb
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_removeTextBlock = function(tb) {
  var /** @type {Array} */ tbs = this.getTextBlocks();
  if (tbs) {
    var /** @type {number} */ idx = this.getTextBlocks().indexOf(tb);
    if (idx > -1) {
      tbs.splice(idx, 1);
    }
  }
};


/**
 * @royaleignorecoercion org.apache.royale.textLayout.compose.ITextFlowLine
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock} tb
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_releaseTextBlockInternal = function(tb) {
  if (!tb)
    return;
  if (tb.firstLine) {
    for (var /** @type {org.apache.royale.text.engine.ITextLine} */ textLineTest = tb.firstLine; textLineTest != null; textLineTest = textLineTest.nextLine) {
      if (textLineTest.numElements != 0) {
        var /** @type {Object} */ tfl = textLineTest.userData;
        if (tfl.adornCount != textLineTest.numElements)
          return;
      }
    }
    
    tb.releaseLines(tb.firstLine, tb.lastLine);
  }
  var /** @type {Array} */ items = tb.userData;
  if (items) {
    var /** @type {number} */ len = (items.length) >> 0;
    for (var /** @type {number} */ i = 0; i < len; i++) {
      var /** @type {org.apache.royale.textLayout.elements.FlowElement} */ child = items[i];
      child.releaseContentElement();
    }
    items.length = 0;
  }
  tb.content = null;
  this.org_apache_royale_textLayout_elements_ParagraphElement_removeTextBlock(tb);
};


/** @asprivate 
 * @param {org.apache.royale.text.engine.ITextBlock=} tb
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.releaseTextBlock = function(tb) {
  tb = typeof tb !== 'undefined' ? tb : null;
  this.org_apache_royale_textLayout_elements_ParagraphElement_updateTextBlockRefs();
  if (tb) {
    this.org_apache_royale_textLayout_elements_ParagraphElement_releaseTextBlockInternal(tb);
    return;
  }
  var /** @type {Array} */ tbs = this.getTextBlocks();
  var foreachiter1_target = tbs;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var textBlock = foreachiter1_target[foreachiter1];
  {
    this.org_apache_royale_textLayout_elements_ParagraphElement_releaseTextBlockInternal(textBlock);
  }}
  
  if (this._computedFormat)
    this._computedFormat = null;
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks;


/**
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getTextBlocks = function() {
  if (this.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks == null)
    this.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks = [];
  return this.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks;
};


/** ITextBlock where the text of the paragraph is kept. @asprivate 
 * @return {org.apache.royale.text.engine.ITextBlock}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getTextBlock = function() {
  if (!this.getTextBlocks().length)
    this.createTextBlock();
  return this.getTextBlocks()[0];
};


/** Last ITextBlock where the text of the paragraph is kept. @asprivate 
 * @return {org.apache.royale.text.engine.ITextBlock}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getLastTextBlock = function() {
  var /** @type {Array} */ tbs = this.getTextBlocks();
  if (!tbs.length)
    this.createTextBlock();
  return tbs[tbs.length - 1];
};


/** Get ITextBlock at specified position. @asprivate 
 * @param {number} pos
 * @return {org.apache.royale.text.engine.ITextBlock}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getTextBlockAtPosition = function(pos) {
  var /** @type {number} */ curPos = 0;
  var /** @type {number} */ posShift = 0;
  var /** @type {Array} */ tables = this.org_apache_royale_textLayout_elements_ParagraphElement_getTables();
  if (!tables.length)
    return this.getTextBlock();
  var foreachiter2_target = tables;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var table = foreachiter2_target[foreachiter2];
  {
    if (table.getElementRelativeStart(this) < pos)
      posShift++;
  }}
  
  var /** @type {Array} */ tbs = this.getTextBlocks();
  var foreachiter3_target = tbs;
  for (var foreachiter3 in foreachiter3_target) 
  {
  var tb = foreachiter3_target[foreachiter3];
  {
    if (tb.content == null)
      return tb;
    curPos += (tb.content.rawText.length) >> 0;
    if (curPos + posShift > pos) {
      if (this.getTextBlockStart(tb) > pos)
        return null;
      return tb;
    }
  }}
  
  return null;
};


/**
 * @param {org.apache.royale.text.engine.ITextBlock} tb
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getTextBlockAbsoluteStart = function(tb) {
  var /** @type {number} */ start = this.getTextBlockStart(tb);
  if (start < 0)
    start = 0;
  return (this.getAbsoluteStart() + start) >> 0;
};


/**
 * @param {org.apache.royale.text.engine.ITextBlock} tb
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getTextBlockStart = function(tb) {
  var /** @type {number} */ curPos = 0;
  var /** @type {Array} */ tbs = this.getTextBlocks();
  if (tbs.length == 0)
    return -1;
  var /** @type {Array} */ tables = this.org_apache_royale_textLayout_elements_ParagraphElement_getTables();
  var foreachiter4_target = tbs;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var curTB = foreachiter4_target[foreachiter4];
  {
    var foreachiter5_target = tables;
    for (var foreachiter5 in foreachiter5_target) 
    {
    var table = foreachiter5_target[foreachiter5];
    {
      if (table.getElementRelativeStart(this) <= curPos) {
        curPos++;
        tables.splice(tables.indexOf(table), 1);
      }
    }}
    
    if (tb == curTB)
      return curPos;
    if (tb.content)
      curPos += (curTB.content.rawText.length) >> 0;
  }}
  
  return -1;
};


/**
 * @private
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_getTables = function() {
  var /** @type {Array} */ tables = [];
  for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(i);
    if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableElement))
      tables.push(child);
  }
  return tables;
};


/** ITextBlock where the text of the paragraph is kept, or null if we currently don't have one. @asprivate 
 * @return {org.apache.royale.text.engine.ITextBlock}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.peekTextBlock = function() {
  return this.getTextBlocks().length == 0 ? null : this.getTextBlocks()[0];
};


/** @asprivate 
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.releaseLineCreationData = function() {
  var /** @type {Array} */ tbs = this.getTextBlocks();
  var foreachiter6_target = tbs;
  for (var foreachiter6 in foreachiter6_target) 
  {
  var tb = foreachiter6_target[foreachiter6];
  {
    tb["releaseLineCreationData"]();
  }}
  
};


/**
 *  @asprivate
 *  @royaleemitcoercion org.apache.royale.text.engine.GroupElement
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.createContentAsGroup = function(pos) {
  pos = typeof pos !== 'undefined' ? pos : 0;
  var /** @type {Object} */ tb = this.getTextBlockAtPosition(pos);
  if (!tb)
    tb = this.getTextBlockAtPosition((pos - 1) >> 0);
  var /** @type {org.apache.royale.text.engine.GroupElement} */ group = org.apache.royale.utils.Language.as(tb.content, org.apache.royale.text.engine.GroupElement);
  if (!group) {
    var /** @type {Object} */ originalContent = tb.content;
    group = new org.apache.royale.text.engine.GroupElement();
    
    tb.content = group;
    
    if (originalContent) {
      var /** @type {Object} */ gc = [];
      
      gc.push(originalContent);
      
      group.replaceElements(0, 0, gc);
      
    }
    if (tb.firstLine && this.textLength) {
      var /** @type {Object} */ textFlow = this.getTextFlow();
      if (textFlow)
        textFlow.damage(this.getAbsoluteStart(), this.textLength, "invalid", false);
    }
  }
  return group;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.removeBlockElement = function(child, block) {
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb = this.getTextBlockAtPosition(child.getElementRelativeStart(this));
  if (!tb)
    tb = this.getTextBlock();
  if (tb.content == null)
    return;
  var /** @type {number} */ relativeStart = child.getElementRelativeStart(this);
  if (this.org_apache_royale_textLayout_elements_ParagraphElement_getChildrenInTextBlock(relativeStart).length < 2) {
    if (org.apache.royale.utils.Language.is(block, org.apache.royale.text.engine.GroupElement)) {
      org.apache.royale.utils.Language.as(tb.content, org.apache.royale.text.engine.GroupElement, true).replaceElements(0, 1, null);
    }
    tb.content = null;
  } else if (block.groupElement) {
    var /** @type {number} */ idx = this.org_apache_royale_textLayout_elements_ParagraphElement_getChildIndexInBlock(child);
    var /** @type {org.apache.royale.text.engine.GroupElement} */ group = org.apache.royale.utils.Language.as(tb.content, org.apache.royale.text.engine.GroupElement, true);
    
    group.replaceElements(idx, (idx + 1) >> 0, null);
    if (group.elementCount == 0)
      return;
    
    if (this.numChildren == 2) {
      var /** @type {org.apache.royale.text.engine.ContentElement} */ elem = group.getElementAt(0);
      
      if (!org.apache.royale.utils.Language.is(elem, org.apache.royale.text.engine.GroupElement)) {
        group.replaceElements(0, 1, null);
        
        tb.content = elem;
        
      }
    }
  } else {
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.hasBlockElement = function() {
  return this.getTextBlocks().length > 0;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.createContentElement = function() {
  this.createTextBlock();
};


/** @asprivate 
 * @private
 * @param {number} pos
 * @return {Array}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_getChildrenInTextBlock = function(pos) {
  var /** @type {Array} */ retVal = [];
  if (this.numChildren == 0)
    return retVal;
  if (this.numChildren == 1) {
    retVal.push(this.getChildAt(0));
    return retVal;
  }
  var /** @type {Array} */ chldrn = this.mxmlChildren.slice();
  for (var /** @type {number} */ i = 0; i < chldrn.length; i++) {
    if (org.apache.royale.utils.Language.is(chldrn[i], org.apache.royale.textLayout.elements.ITableElement)) {
      if (chldrn[i].parentRelativeStart < pos) {
        retVal.length = 0;
        continue;
      }
      if (chldrn[i].parentRelativeStart >= pos)
        break;
    }
    retVal.push(chldrn[i]);
  }
  return retVal;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.insertBlockElement = function(child, block) {
  var /** @type {number} */ relativeStart = child.getElementRelativeStart(this);
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb = this.getTextBlockAtPosition(relativeStart);
  if (!tb)
    tb = this.getTextBlockAtPosition((relativeStart - 1) >> 0);
  if (!tb) {
    child.releaseContentElement();
    return;
  }
  if (this.getTextBlocks().length == 0) {
    child.releaseContentElement();
    this.createTextBlock();
    return;
  }
  var /** @type {Array} */ gc;
  var /** @type {org.apache.royale.text.engine.GroupElement} */ group;
  if (this.org_apache_royale_textLayout_elements_ParagraphElement_getChildrenInTextBlock(relativeStart).length < 2) {
    if (org.apache.royale.utils.Language.is(block, org.apache.royale.text.engine.GroupElement)) {
      gc = [];
      
      gc.push(block);
      
      group = new org.apache.royale.text.engine.GroupElement(gc);
      
      tb.content = group;
    } else {
      tb.content = block;
    }
  } else {
    group = this.createContentAsGroup(relativeStart);
    var /** @type {number} */ idx = this.org_apache_royale_textLayout_elements_ParagraphElement_getChildIndexInBlock(child);
    gc = [];
    
    gc.push(block);
    
    if (idx > group.elementCount)
      idx = group.elementCount;
    group.replaceElements(idx, idx, gc);
    
  }
};


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IFlowElement} elem
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_getChildIndexInBlock = function(elem) {
  var /** @type {number} */ relIdx = 0;
  for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(i);
    if (child == elem)
      return relIdx;
    relIdx++;
    if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ITableElement))
      relIdx = 0;
  }
  return -1;
};


/**
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.removeEmptyTerminator = function() {
  if (this.numChildren == 1 && this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan && this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.textLength == 1) {
    this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.removeParaTerminator();
    org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, [0, 1]);
    this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = null;
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.replaceChildren = function(beginChildIndex, endChildIndex, rest) {
  rest = Array.prototype.slice.call(arguments, 2);
  var /** @type {Array} */ applyParams;
  do {
    if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan) {
      var /** @type {number} */ termIdx = this.getChildIndex(this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan);
      if (termIdx > 0 && termIdx < beginChildIndex && this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.textLength == 1) {
        org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, [termIdx, termIdx + 1]);
        this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = null;
        if (beginChildIndex >= termIdx) {
          beginChildIndex--;
          if (rest.length == 0)
            break;
        }
        if (endChildIndex >= termIdx && beginChildIndex != endChildIndex)
          endChildIndex--;
      }
    }
    if (rest.length == 1)
      applyParams = [beginChildIndex, endChildIndex, rest[0]]; else {
      applyParams = [beginChildIndex, endChildIndex];
      if (rest.length != 0)
        applyParams = applyParams.concat.apply(applyParams, rest);
    }
    org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, applyParams);
  } while (false);
  this.ensureTerminatorAfterReplace();
  this.createTextBlock();
};


/**
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.splitAtPosition = function(relativePosition) {
  return org.apache.royale.textLayout.elements.ParagraphElement.superClass_.splitAtPosition.apply(this, [relativePosition]);
};


/**
 *  @asprivate
 * @royaleignorecoercion org.apache.royale.textLayout.elements.ISpanElement
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.ensureTerminatorAfterReplace = function() {
  if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan && this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.parent != this) {
    this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.removeParaTerminator();
    this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = null;
  }
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ newLastLeaf = this.getLastLeaf();
  if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan != newLastLeaf) {
    if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan)
      this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.removeParaTerminator();
    if (newLastLeaf && this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan) {
      if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.textLength == 0 && !this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.id) {
        var /** @type {number} */ termIdx = this.getChildIndex(this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan);
        org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, [termIdx, termIdx + 1]);
      }
      this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = null;
    }
    if (newLastLeaf) {
      if (org.apache.royale.utils.Language.is(newLastLeaf, org.apache.royale.textLayout.elements.ISpanElement)) {
        newLastLeaf.addParaTerminator();
        this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = newLastLeaf;
      } else {
        var /** @type {Object} */ s = org.apache.royale.textLayout.elements.ElementHelper.getTerminator(this, newLastLeaf);
        org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, [this.numChildren, this.numChildren, s]);
        this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = s;
      }
    }
    else
      this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = null;
  }
  if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan && this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.textLength == 1) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ prev = this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.getPreviousLeaf(this);
    if (prev && prev.parent == this && org.apache.royale.utils.Language.is(prev, org.apache.royale.textLayout.elements.ISpanElement)) {
      this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan.mergeToPreviousIfPossible();
    }
  }
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.ISpanElement} splitSpan
 * @param {org.apache.royale.textLayout.elements.ISpanElement} followingSpan
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.updateTerminatorSpan = function(splitSpan, followingSpan) {
  if (this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan == splitSpan)
    this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan = followingSpan;
};


/** @asprivate
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getText = function(relativeStart, relativeEnd, paragraphSeparator) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  paragraphSeparator = typeof paragraphSeparator !== 'undefined' ? paragraphSeparator : "\n";
  if (relativeStart == 0 && (relativeEnd == -1 || relativeEnd >= this.textLength - 1) && this.getTextBlocks().length) {
    var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb;
    var /** @type {Array} */ tbs = this.getTextBlocks();
    var /** @type {string} */ text = "";
    var foreachiter7_target = tbs;
    for (var foreachiter7 in foreachiter7_target) 
    {
    tb = foreachiter7_target[foreachiter7];
    {
      text = text + this.org_apache_royale_textLayout_elements_ParagraphElement_getTextInBlock(tb);
    }}
    
    if (tb.content && tb.content.rawText)
      return text.substring(0, text.length - 1);
    return text;
  }
  return org.apache.royale.textLayout.elements.ParagraphElement.superClass_.getText.apply(this, [relativeStart, relativeEnd, paragraphSeparator]);
};


/**
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock} tb
 * @return {string}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_getTextInBlock = function(tb) {
  if (!tb.content || !tb.content.rawText)
    return "";
  return tb.content.rawText;
};


/** Returns the paragraph that follows this one, or null if there are no more paragraphs. 
 *
 * @asreturn the next paragraph or null if there are no more paragraphs.
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see #getPreviousParagraph()
 *  @royaleignorecoercion org.apache.royale.textLayout.elements.ParagraphElement
 * @return {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getNextParagraph = function() {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ nextLeaf = this.getLastLeaf().getNextLeaf();
  return nextLeaf ? nextLeaf.getParagraph() : null;
};


/** Returns the paragraph that precedes this one, or null, if this paragraph is the first one 
 * in the ITextFlow. 
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see #getNextParagraph()
 * @return {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getPreviousParagraph = function() {
  var /** @type {org.apache.royale.textLayout.elements.IFlowLeafElement} */ previousLeaf = this.getFirstLeaf().getPreviousLeaf();
  return previousLeaf ? previousLeaf.getParagraph() : null;
};


/** 
 * Scans backward from the supplied position to find the location
 * in the text of the previous atom and returns the index. The term atom refers to 
 * both graphic elements and characters (including groups of combining characters), the 
 * indivisible entities that make up a text line.
 * 
 * @asparam relativePosition  position in the text to start from, counting from 0
 * @asreturn index in the text of the previous cluster
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.text.engine.ITextLine
 * @param {number} relativePosition
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.findPreviousAtomBoundary = function(relativePosition) {
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb = this.getTextBlockAtPosition(relativePosition);
  if (!tb || !tb.content)
    return (relativePosition - 1) >> 0;
  var /** @type {number} */ tbStart = this.getTextBlockStart(tb);
  var /** @type {number} */ textBlockPos = (relativePosition - tbStart) >> 0;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ tl = tb.getTextLineAtCharIndex(textBlockPos);
  if (org.apache.royale.textLayout.elements.ConfigSettings.usesDiscretionaryHyphens && tl != null) {
    var /** @type {number} */ currentAtomIndex = tl.getAtomIndexAtCharIndex(textBlockPos);
    var /** @type {boolean} */ isRTL = tl.getAtomBidiLevel(currentAtomIndex) == 1;
    if (isRTL) {
      if (currentAtomIndex == 0) {
        if (tl.atomCount > 0) {
          while (--textBlockPos) {
            --relativePosition;
            if (tl.getAtomIndexAtCharIndex(textBlockPos) != currentAtomIndex)
              break;
          }
        }
      } else {
        while (--relativePosition && --textBlockPos) {
          if (tl.getAtomIndexAtCharIndex(textBlockPos) != currentAtomIndex)
            break;
        }
      }
      if (org.apache.royale.textLayout.utils.CharacterUtil.isLowSurrogate((this.getText(relativePosition, (relativePosition + 1) >> 0).charCodeAt(0)) >> 0)) {
        relativePosition--;
        textBlockPos--;
      }
    } else {
      if (currentAtomIndex == 0) {
        tl = tl.previousLine;
        if (!tl) {
          if (tb != this.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks[0])
            return (relativePosition - 1) >> 0;
          return -1;
        }
        if (tl.textBlockBeginIndex + tl.rawTextLength == textBlockPos)
          return (tl.textBlockBeginIndex + tl.rawTextLength - 1 + tbStart) >> 0;
        return (tl.textBlockBeginIndex + tl.rawTextLength + tbStart) >> 0;
      }
      while (--relativePosition && --textBlockPos) {
        if (tl.getAtomIndexAtCharIndex(textBlockPos) < currentAtomIndex)
          break;
      }
      if (org.apache.royale.textLayout.utils.CharacterUtil.isLowSurrogate((this.getText(relativePosition, (relativePosition + 1) >> 0).charCodeAt(0)) >> 0)) {
        relativePosition--;
        textBlockPos--;
      }
    }
    return relativePosition;
  }
  var /** @type {number} */ pos = tb.findPreviousAtomBoundary(textBlockPos);
  if (pos >= 0)
    pos += tbStart;
  return pos;
};


/** 
 * Scans ahead from the supplied position to find the location
 * in the text of the next atom and returns the index. The term atom refers to 
 * both graphic elements and characters (including groups of combining characters), the 
 * indivisible entities that make up a text line.
 * 
 * @asparam relativePosition  position in the text to start from, counting from 0
 * @asreturn index in the text of the following atom
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.text.engine.ITextLine
 * @param {number} relativePosition
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.findNextAtomBoundary = function(relativePosition) {
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ tb = this.getTextBlockAtPosition(relativePosition);
  if (!tb || !tb.content)
    return (relativePosition + 1) >> 0;
  var /** @type {number} */ tbStart = this.getTextBlockStart(tb);
  var /** @type {number} */ textBlockPos = (relativePosition - tbStart) >> 0;
  var /** @type {org.apache.royale.text.engine.ITextLine} */ tl = tb.getTextLineAtCharIndex(textBlockPos);
  if (org.apache.royale.textLayout.elements.ConfigSettings.usesDiscretionaryHyphens && tl != null) {
    var /** @type {number} */ currentAtomIndex = tl.getAtomIndexAtCharIndex(textBlockPos);
    var /** @type {boolean} */ isRTL = tl.getAtomBidiLevel(currentAtomIndex) == 1;
    if (isRTL) {
      if (currentAtomIndex == 0) {
        while (++textBlockPos) {
          ++relativePosition;
          if (tl.getAtomIndexAtCharIndex(textBlockPos) != currentAtomIndex)
            break;
        }
      } else {
        while (++textBlockPos) {
          ++relativePosition;
          if (tl.getAtomIndexAtCharIndex(textBlockPos) != currentAtomIndex)
            break;
        }
      }
      if (org.apache.royale.textLayout.utils.CharacterUtil.isHighSurrogate((this.getText(relativePosition, (relativePosition + 1) >> 0).charCodeAt(0)) >> 0)) {
        relativePosition++;
        textBlockPos++;
      }
    } else {
      if (currentAtomIndex == tl.atomCount - 1) {
        tl = tl.nextLine;
        if (!tl) {
          if (tb != this.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks[this.org_apache_royale_textLayout_elements_ParagraphElement__textBlocks.length - 1])
            return (relativePosition + 1) >> 0;
          return -1;
        }
        return (tl.textBlockBeginIndex + tbStart) >> 0;
      }
      while (++textBlockPos) {
        ++relativePosition;
        if (tl.getAtomIndexAtCharIndex(textBlockPos) > currentAtomIndex)
          break;
      }
      if (org.apache.royale.textLayout.utils.CharacterUtil.isHighSurrogate((this.getText(relativePosition, (relativePosition + 1) >> 0).charCodeAt(0)) >> 0)) {
        relativePosition++;
        textBlockPos++;
      }
    }
    return relativePosition;
  }
  var /** @type {number} */ pos = tb.findNextAtomBoundary(textBlockPos);
  if (pos >= 0)
    pos += tbStart;
  return pos;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getCharAtPosition = function(relativePosition) {
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ foundTB = this.getTextBlockAtPosition(relativePosition);
  if (!foundTB)
    return "";
  var /** @type {Array} */ tables = this.org_apache_royale_textLayout_elements_ParagraphElement_getTables();
  var /** @type {number} */ pos = relativePosition;
  var foreachiter8_target = tables;
  for (var foreachiter8 in foreachiter8_target) 
  {
  var table = foreachiter8_target[foreachiter8];
  {
    if (table.getElementRelativeStart(this) < pos)
      relativePosition--;
  }}
  
  var /** @type {Array} */ tbs = this.getTextBlocks();
  var foreachiter9_target = tbs;
  for (var foreachiter9 in foreachiter9_target) 
  {
  var tb = foreachiter9_target[foreachiter9];
  {
    if (foundTB == tb)
      break;
    if (tb)
      relativePosition -= (tb.content.rawText.length) >> 0;
    else
      relativePosition -= 1;
  }}
  
  return foundTB.content.rawText.charAt(relativePosition);
};


/** 
 * Returns the index of the previous word boundary in the text.
 * 
 * <p>Scans backward from the supplied position to find the previous position
 * in the text that starts or ends a word. </p>
 * 
 * @asparam relativePosition  position in the text to start from, counting from 0
 * @asreturn index in the text of the previous word boundary
 *
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} relativePosition
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.findPreviousWordBoundary = function(relativePosition) {
  if (relativePosition == 0)
    return 0;
  var /** @type {number} */ prevCharCode = this.getCharCodeAtPosition((relativePosition - 1) >> 0);
  if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevCharCode)) {
    while (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(prevCharCode) && ((relativePosition - 1) > 0)) {
      relativePosition--;
      prevCharCode = this.getCharCodeAtPosition((relativePosition - 1) >> 0);
    }
    return relativePosition;
  }
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ block = this.getTextBlockAtPosition(relativePosition);
  if (block == null)
    block = this.getTextBlockAtPosition(--relativePosition);
  var /** @type {number} */ pos = this.getTextBlockStart(block);
  if (pos < 0)
    pos = 0;
  return (relativePosition == pos ? pos : pos + block.findPreviousWordBoundary((relativePosition - pos) >> 0)) >> 0;
};


/** 
 * Returns the index of the next word boundary in the text.
 * 
 * <p>Scans ahead from the supplied position to find the next position
 * in the text that starts or ends a word. </p>
 * 
 * @asparam relativePosition  position in the text to start from, counting from 0
 * @asreturn  index in the text of the next word boundary
 * 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} relativePosition
 * @return {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.findNextWordBoundary = function(relativePosition) {
  if (relativePosition == this.textLength)
    return this.textLength;
  var /** @type {number} */ curCharCode = this.getCharCodeAtPosition(relativePosition);
  if (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(curCharCode)) {
    while (org.apache.royale.textLayout.utils.CharacterUtil.isWhitespace(curCharCode) && relativePosition < (this.textLength - 1)) {
      relativePosition++;
      curCharCode = this.getCharCodeAtPosition(relativePosition);
    }
    return relativePosition;
  }
  var /** @type {org.apache.royale.text.engine.ITextBlock} */ block = this.getTextBlockAtPosition(relativePosition);
  if (block == null)
    block = this.getTextBlockAtPosition(--relativePosition);
  var /** @type {number} */ pos = this.getTextBlockStart(block);
  if (pos < 0)
    pos = 0;
  return (pos + block.findNextWordBoundary((relativePosition - pos) >> 0)) >> 0;
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ParagraphElement._defaultTabStops;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.defaultTabWidth = 48;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.defaultTabCount = 20;


/**
 * @private
 */
org.apache.royale.textLayout.elements.ParagraphElement.initializeDefaultTabStops = function() {
  org.apache.royale.textLayout.elements.ParagraphElement._defaultTabStops = org.apache.royale.utils.Language.arrayAsVector(org.apache.royale.textLayout.elements.ParagraphElement.defaultTabCount, 'org.apache.royale.text.engine.TabStop');
  for (var /** @type {number} */ i = 0; i < org.apache.royale.textLayout.elements.ParagraphElement.defaultTabCount; ++i)
    org.apache.royale.textLayout.elements.ParagraphElement._defaultTabStops[i] = new org.apache.royale.text.engine.TabStop(org.apache.royale.textLayout.formats.TextAlign.START, org.apache.royale.textLayout.elements.ParagraphElement.defaultTabWidth * i);
};


/**
 * @private
 * @param {org.apache.royale.text.engine.ITextBlock=} textBlock
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.org_apache_royale_textLayout_elements_ParagraphElement_updateTextBlock = function(textBlock) {
  textBlock = typeof textBlock !== 'undefined' ? textBlock : null;
  if (!textBlock)
    textBlock = this.getTextBlock();
  var /** @type {org.apache.royale.textLayout.elements.IContainerFormattedElement} */ containerElement = this.getAncestorWithContainer();
  if (!containerElement)
    return;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ containerElementFormat = containerElement ? containerElement.computedFormat : org.apache.royale.textLayout.formats.TextLayoutFormat.defaultFormat;
  var /** @type {string} */ lineJust;
  if (this.computedFormat.textAlign == org.apache.royale.textLayout.formats.TextAlign.JUSTIFY) {
    lineJust = (this._computedFormat.textAlignLast == org.apache.royale.textLayout.formats.TextAlign.JUSTIFY) ? org.apache.royale.text.engine.LineJustification.ALL_INCLUDING_LAST : org.apache.royale.text.engine.LineJustification.ALL_BUT_LAST;
    if (containerElementFormat.lineBreak == org.apache.royale.textLayout.formats.LineBreak.EXPLICIT)
      lineJust = org.apache.royale.text.engine.LineJustification.UNJUSTIFIED;
  }
  else
    lineJust = org.apache.royale.text.engine.LineJustification.UNJUSTIFIED;
  var /** @type {string} */ makeJustRuleStyle = this.getEffectiveJustificationStyle();
  var /** @type {string} */ justRule = this.getEffectiveJustificationRule();
  if (justRule == org.apache.royale.textLayout.formats.JustificationRule.SPACE) {
    var /** @type {org.apache.royale.text.engine.SpaceJustifier} */ spaceJustifier = new org.apache.royale.text.engine.SpaceJustifier(this._computedFormat.locale, lineJust, false);
    spaceJustifier.letterSpacing = this._computedFormat.textJustify == org.apache.royale.textLayout.formats.TextJustify.DISTRIBUTE ? true : false;
    var /** @type {number} */ newMinimumSpacing = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(this._computedFormat.wordSpacing.minimumSpacing) / 100;
    var /** @type {number} */ newMaximumSpacing = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(this._computedFormat.wordSpacing.maximumSpacing) / 100;
    var /** @type {number} */ newOptimumSpacing = org.apache.royale.textLayout.property.PropertyUtil.toNumberIfPercent(this._computedFormat.wordSpacing.optimumSpacing) / 100;
    spaceJustifier.minimumSpacing = Math.min(newMinimumSpacing, spaceJustifier.minimumSpacing);
    spaceJustifier.maximumSpacing = Math.max(newMaximumSpacing, spaceJustifier.maximumSpacing);
    spaceJustifier.optimumSpacing = newOptimumSpacing;
    spaceJustifier.minimumSpacing = newMinimumSpacing;
    spaceJustifier.maximumSpacing = newMaximumSpacing;
    
    textBlock.textJustifier = spaceJustifier;
    
    textBlock.baselineZero = org.apache.royale.textLayout.elements.LeadingUtils.getLeadingBasis(this.getEffectiveLeadingModel());
    
  } else {
    var /** @type {Object} */ eastAsianJustifier = new org.apache.royale.text.engine.EastAsianJustifier(this._computedFormat.locale, lineJust, makeJustRuleStyle);
    if (eastAsianJustifier.hasOwnProperty("composeTrailingIdeographicSpaces")) {
      eastAsianJustifier.composeTrailingIdeographicSpaces = true;
    }
    
    textBlock.textJustifier = eastAsianJustifier;
    
    textBlock.baselineZero = org.apache.royale.textLayout.elements.LeadingUtils.getLeadingBasis(this.getEffectiveLeadingModel());
    
  }
  textBlock.bidiLevel = (this._computedFormat.direction == org.apache.royale.textLayout.formats.Direction.LTR ? 0 : 1) >> 0;
  
  textBlock.lineRotation = containerElementFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? org.apache.royale.text.engine.TextRotation.ROTATE_90 : org.apache.royale.text.engine.TextRotation.ROTATE_0;
  
  if (this._computedFormat.tabStops && this._computedFormat.tabStops.length != 0) {
    var /** @type {Array} */ tabStops = [];
    
    var foreachiter10_target = this._computedFormat.tabStops;
    for (var foreachiter10 in foreachiter10_target) 
    {
    var tsa = foreachiter10_target[foreachiter10];
    {
      var /** @type {string} */ token = org.apache.royale.utils.Language.string(tsa.decimalAlignmentToken == null ? "" : tsa.decimalAlignmentToken);
      var /** @type {string} */ alignment = org.apache.royale.utils.Language.string(tsa.alignment == null ? org.apache.royale.text.engine.TabAlignment.START : tsa.alignment);
      var /** @type {org.apache.royale.text.engine.TabStop} */ tabStop = new org.apache.royale.text.engine.TabStop(alignment, Number(tsa.position), token);
      if (tsa.decimalAlignmentToken != null)
        var /** @type {string} */ garbage = "x" + tabStop.decimalAlignmentToken;
      
      tabStops.push(tabStop);
      
    }}
    
    textBlock.tabStops = tabStops;
    
  } else {
    textBlock.tabStops = null;
    
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.canOwnFlowElement = function(elem) {
  return org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.IFlowLeafElement) || org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase) || org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableElement);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.normalizeRange = function(normalizeStart, normalizeEnd) {
  var /** @type {number} */ idx = this.findChildIndexAtPosition((normalizeStart) >> 0);
  if (idx != -1 && idx < this.numChildren) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    normalizeStart = (normalizeStart - child.parentRelativeStart) >>> 0;
    
    for (;;) {
      var /** @type {number} */ origChildEnd = (child.parentRelativeStart + child.textLength) >> 0;
      child.normalizeRange(normalizeStart, (normalizeEnd - child.parentRelativeStart) >>> 0);
      var /** @type {number} */ newChildEnd = (child.parentRelativeStart + child.textLength) >> 0;
      normalizeEnd += (newChildEnd - origChildEnd) >>> 0;
      if (child.textLength == 0 && !child.bindableElement)
        this.replaceChildren(idx, (idx + 1) >> 0); else if (child.mergeToPreviousIfPossible()) {
        var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ prevElement = this.getChildAt((idx - 1) >> 0);
        prevElement.normalizeRange(0, (prevElement.textLength) >>> 0);
      }
      else
        idx++;
      if (idx == this.numChildren) {
        if (idx != 0) {
          var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ lastChild = this.getChildAt((idx - 1) >> 0);
          if (org.apache.royale.utils.Language.is(lastChild, org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase) && lastChild.textLength == 1 && !lastChild.bindableElement)
            this.replaceChildren((idx - 1) >> 0, idx);
        }
        break;
      }
      child = this.getChildAt(idx);
      if (child.parentRelativeStart > normalizeEnd)
        break;
      normalizeStart = 0;
    }
  }
  if (this.numChildren == 0 || this.textLength == 0) {
    var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ s = org.apache.royale.textLayout.elements.ElementHelper.getSpan();
    this.replaceChildren(0, 0, s);
    s.normalizeRange(0, (s.textLength) >>> 0);
  }
};


/** @asprivate 
 * @return {string}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getEffectiveLeadingModel = function() {
  return org.apache.royale.utils.Language.string(this.computedFormat.leadingModel == org.apache.royale.textLayout.formats.LeadingModel.AUTO ? org.apache.royale.textLayout.utils.LocaleUtil.leadingModel(org.apache.royale.utils.Language.string(this.computedFormat.locale)) : this.computedFormat.leadingModel);
};


/** @asprivate 
 * @return {string}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getEffectiveDominantBaseline = function() {
  return org.apache.royale.utils.Language.string(this.computedFormat.dominantBaseline == org.apache.royale.textLayout.formats.FormatValue.AUTO ? org.apache.royale.textLayout.utils.LocaleUtil.dominantBaseline(org.apache.royale.utils.Language.string(this.computedFormat.locale)) : this.computedFormat.dominantBaseline);
};


/** @asprivate 
 * @return {string}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getEffectiveJustificationRule = function() {
  return org.apache.royale.utils.Language.string(this.computedFormat.justificationRule == org.apache.royale.textLayout.formats.FormatValue.AUTO ? org.apache.royale.textLayout.utils.LocaleUtil.justificationRule(org.apache.royale.utils.Language.string(this.computedFormat.locale)) : this.computedFormat.justificationRule);
};


/** @asprivate 
 * @return {string}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.getEffectiveJustificationStyle = function() {
  return org.apache.royale.utils.Language.string(this.computedFormat.justificationStyle == org.apache.royale.textLayout.formats.FormatValue.AUTO ? org.apache.royale.textLayout.utils.LocaleUtil.justificationStyle(org.apache.royale.utils.Language.string(this.computedFormat.locale)) : this.computedFormat.justificationStyle);
};


/**
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.incInteractiveChildrenCount = function() {
  ++this.org_apache_royale_textLayout_elements_ParagraphElement__interactiveChildrenCount;
};


/**
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.decInteractiveChildrenCount = function() {
  --this.org_apache_royale_textLayout_elements_ParagraphElement__interactiveChildrenCount;
};


/**
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.hasInteractiveChildren = function() {
  return this.org_apache_royale_textLayout_elements_ParagraphElement__interactiveChildrenCount != 0;
};


org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__className = function() {
  return "ParagraphElement";
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.interactiveChildrenCount;


org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__interactiveChildrenCount = function() {
  return this.org_apache_royale_textLayout_elements_ParagraphElement__interactiveChildrenCount;
};


org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__defaultTypeName = function() {
  return "p";
};


org.apache.royale.textLayout.elements.ParagraphElement.prototype.set__mxmlChildren = function(array) {
  this.replaceChildren(0, this.numChildren);
  var foreachiter11_target = array;
  for (var foreachiter11 in foreachiter11_target) 
  {
  var child = foreachiter11_target[foreachiter11];
  {
    if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.IFlowElement)) {
      if (org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ISpanElement) || org.apache.royale.utils.Language.is(child, org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase))
        child.bindableElement = true;
      org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, [this.numChildren, this.numChildren, child]);
    } else if (org.apache.royale.utils.Language.is(child, String)) {
      var /** @type {org.apache.royale.textLayout.elements.ISpanElement} */ s = org.apache.royale.textLayout.elements.ElementHelper.getSpan();
      s.text = String(child);
      s.bindableElement = true;
      org.apache.royale.textLayout.elements.ParagraphElement.superClass_.replaceChildren.apply(this, [this.numChildren, this.numChildren, s]);
    }
    else if (child != null)
      throw new TypeError(org.apache.royale.textLayout.elements.GlobalSettings.resourceStringFunction("badMXMLChildrenArgument", [org.apache.royale.reflection.getQualifiedClassName(child)]));
  }}
  
  this.ensureTerminatorAfterReplace();
  this.createTextBlock();
};


org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__computedFormat = function() {
  if (!this._computedFormat) {
    org.apache.royale.textLayout.elements.ParagraphElement.superClass_.get__computedFormat.apply(this);
    var /** @type {Array} */ tbs = this.getTextBlocks();
    var foreachiter12_target = tbs;
    for (var foreachiter12 in foreachiter12_target) 
    {
    var tb = foreachiter12_target[foreachiter12];
    
      this.org_apache_royale_textLayout_elements_ParagraphElement_updateTextBlock(tb);}
    
  }
  return this._computedFormat;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.ISpanElement}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.terminatorSpan;


org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__terminatorSpan = function() {
  return this.org_apache_royale_textLayout_elements_ParagraphElement__terminatorSpan;
};


Object.defineProperties(org.apache.royale.textLayout.elements.ParagraphElement.prototype, /** @lends {org.apache.royale.textLayout.elements.ParagraphElement.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__className},
/**
 * @type {number}
 */
interactiveChildrenCount: {
get: org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__interactiveChildrenCount},
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__defaultTypeName},
/**
 * @type {Array}
 */
mxmlChildren: {
get: org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__mxmlChildren,
set: org.apache.royale.textLayout.elements.ParagraphElement.prototype.set__mxmlChildren},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
computedFormat: {
get: org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__computedFormat},
/**
 * @type {org.apache.royale.textLayout.elements.ISpanElement}
 */
terminatorSpan: {
get: org.apache.royale.textLayout.elements.ParagraphElement.prototype.get__terminatorSpan}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ParagraphElement', qName: 'org.apache.royale.textLayout.elements.ParagraphElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.IParagraphElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'interactiveChildrenCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'mxmlChildren': { type: 'Array', access: 'writeonly', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'computedFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'terminatorSpan': { type: 'org.apache.royale.textLayout.elements.ISpanElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'}
      };
    },
    methods: function () {
      return {
        'ParagraphElement': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'createTextBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'releaseTextBlock': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.text.engine.ITextBlock', true ]; }},
        'getTextBlocks': { type: 'Vector.<org.apache.royale.text.engine.ITextBlock>', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getTextBlock': { type: 'org.apache.royale.text.engine.ITextBlock', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getLastTextBlock': { type: 'org.apache.royale.text.engine.ITextBlock', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getTextBlockAtPosition': { type: 'org.apache.royale.text.engine.ITextBlock', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'getTextBlockAbsoluteStart': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.text.engine.ITextBlock', false ]; }},
        'getTextBlockStart': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.text.engine.ITextBlock', false ]; }},
        'peekTextBlock': { type: 'org.apache.royale.text.engine.ITextBlock', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'releaseLineCreationData': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'createContentAsGroup': { type: 'org.apache.royale.text.engine.GroupElement', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', true ]; }},
        'removeBlockElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.text.engine.ContentElement', false ]; }},
        'hasBlockElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'createContentElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'insertBlockElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.text.engine.ContentElement', false ]; }},
        'removeEmptyTerminator': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'replaceChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ,'int', false ,'Array', false ]; }},
        'splitAtPosition': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'ensureTerminatorAfterReplace': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'updateTerminatorSpan': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ISpanElement', false ,'org.apache.royale.textLayout.elements.ISpanElement', false ]; }},
        'getText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', true ,'int', true ,'String', true ]; }},
        'getNextParagraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getPreviousParagraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'findPreviousAtomBoundary': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'findNextAtomBoundary': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'getCharAtPosition': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'findPreviousWordBoundary': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'findNextWordBoundary': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'int', false ]; }},
        'canOwnFlowElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'normalizeRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement', parameters: function () { return [ 'uint', false ,'uint', false ]; }},
        'getEffectiveLeadingModel': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getEffectiveDominantBaseline': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getEffectiveJustificationRule': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'getEffectiveJustificationStyle': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'incInteractiveChildrenCount': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'decInteractiveChildrenCount': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'},
        'hasInteractiveChildren': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ParagraphElement'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ParagraphElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ParagraphElement.js.map
