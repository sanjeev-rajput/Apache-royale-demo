/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/TextFlow.as
 * org.apache.royale.textLayout.elements.TextFlow
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.TextFlow');
/* Royale Dependency List: org.apache.royale.events.Event,org.apache.royale.events.EventDispatcher,org.apache.royale.textLayout.compose.IFlowComposer,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.compose.utils.ContextUtil,org.apache.royale.textLayout.edit.ISelectionManager,org.apache.royale.textLayout.elements.ConfigurationHelper,org.apache.royale.textLayout.elements.FlowElement,org.apache.royale.textLayout.elements.IBackgroundManager,org.apache.royale.textLayout.elements.IConfiguration,org.apache.royale.textLayout.elements.IExplicitFormatResolver,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFormatResolver,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.InlineGraphicElement,org.apache.royale.textLayout.elements.utils.BackgroundHelper,org.apache.royale.textLayout.events.DamageEvent,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.factory.ITLFFactory,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.utils.CreateTLFUtil,org.apache.royale.utils.ObjectMap,org.apache.royale.utils.Language,XML*/
goog.provide('org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper');

goog.require('org.apache.royale.textLayout.elements.ContainerFormattedElement');
goog.require('org.apache.royale.textLayout.elements.ITextFlow');



/** 
 * Constructor - creates a new TextFlow instance.
 *
 * <p>If you provide a <code>config</code> parameter, the contents of the Configuration object are copied and
 * you cannot make changes. You can access configuration settings, however, through the 
 * <code>configuration</code> property. If the <code>config</code> parameter is null, you can access the default
 * configuration settings through the <code>defaultConfiguration</code> property.</p> 
 *
 * <p>The Configuration object provides a mechanism for setting configurable default attributes on a TextFlow.  
 * While you can't make changes to the Configuration object, you can override default attributes, if necessary, 
 * by setting the attributes of TextFlow and its children.</p>
 * 
 * @asparam config Specifies the configuration to use for this TextFlow object. If it's null, use 
 * <code>TextFlow.defaultConfiguration</code> to access configuration values. 
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * 
 * @see Configuration
 * @see #configuration
 * @see #defaultConfiguration
 * 
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.ContainerFormattedElement}
 * @implements {org.apache.royale.textLayout.elements.ITextFlow}
 * @param {org.apache.royale.textLayout.factory.ITLFFactory=} tlfFactory
 * @param {org.apache.royale.textLayout.elements.IConfiguration=} config
 */
org.apache.royale.textLayout.elements.TextFlow = function(tlfFactory, config) {
  tlfFactory = typeof tlfFactory !== 'undefined' ? tlfFactory : null;
  config = typeof config !== 'undefined' ? config : null;
  this.org_apache_royale_textLayout_elements_TextFlow__tlfFactory = tlfFactory;
  org.apache.royale.textLayout.elements.TextFlow.base(this, 'constructor');
  this.org_apache_royale_textLayout_elements_TextFlow_initializeForConstructor(config);
};
goog.inherits(org.apache.royale.textLayout.elements.TextFlow, org.apache.royale.textLayout.elements.ContainerFormattedElement);


/**
 * @private
 * @type {org.apache.royale.textLayout.compose.IFlowComposer}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__flowComposer;


/**
 * @private
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__interactionManager;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__configuration;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IBackgroundManager}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__backgroundManager;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow_normalizeStart = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = 0;


/**
 * @private
 * @type {org.apache.royale.events.EventDispatcher}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__generation = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow._nextGeneration = 1;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IFormatResolver}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__formatResolver;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__interactiveObjectCount = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__graphicObjectCount = 0;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__parentElement;


/**
 * @private
 * @type {org.apache.royale.textLayout.factory.ITLFFactory}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__tlfFactory;


/**
 * @private
 * @param {org.apache.royale.textLayout.elements.IConfiguration} config
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow_initializeForConstructor = function(config) {
  if (config == null)
    config = org.apache.royale.textLayout.elements.ConfigurationHelper.defaultConfiguration;
  this.org_apache_royale_textLayout_elements_TextFlow__configuration = config.getImmutableClone();
  this.format = this.org_apache_royale_textLayout_elements_TextFlow__configuration.textFlowInitialFormat;
  if (this.org_apache_royale_textLayout_elements_TextFlow__configuration.flowComposerClass)
    this.flowComposer = new this.org_apache_royale_textLayout_elements_TextFlow__configuration.flowComposerClass();
  this.org_apache_royale_textLayout_elements_TextFlow__generation = org.apache.royale.textLayout.elements.TextFlow._nextGeneration++;
  this.org_apache_royale_textLayout_elements_TextFlow__interactiveObjectCount = 0;
  this.org_apache_royale_textLayout_elements_TextFlow__graphicObjectCount = 0;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.shallowCopy = function(startPos, endPos) {
  startPos = typeof startPos !== 'undefined' ? startPos : 0;
  endPos = typeof endPos !== 'undefined' ? endPos : -1;
  var /** @type {org.apache.royale.textLayout.elements.TextFlow} */ retFlow = org.apache.royale.textLayout.elements.TextFlow.superClass_.shallowCopy.apply(this, [startPos, endPos]);
  retFlow.org_apache_royale_textLayout_elements_TextFlow__tlfFactory = this.org_apache_royale_textLayout_elements_TextFlow__tlfFactory;
  retFlow.org_apache_royale_textLayout_elements_TextFlow__configuration = this.org_apache_royale_textLayout_elements_TextFlow__configuration;
  retFlow.org_apache_royale_textLayout_elements_TextFlow__generation = org.apache.royale.textLayout.elements.TextFlow._nextGeneration++;
  if (this.formatResolver)
    retFlow.formatResolver = this.formatResolver.getResolverForNewFlow(this, retFlow);
  if (retFlow.flowComposer && this.flowComposer)
    retFlow.flowComposer.swfContext = this.flowComposer.swfContext;
  return retFlow;
};


/** @asprivate - increment the count 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.incInteractiveObjectCount = function() {
  this.org_apache_royale_textLayout_elements_TextFlow__interactiveObjectCount++;
};


/** @asprivate - decrement the count 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.decInteractiveObjectCount = function() {
  this.org_apache_royale_textLayout_elements_TextFlow__interactiveObjectCount--;
};


/** @asprivate - increment the count 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.incGraphicObjectCount = function() {
  this.org_apache_royale_textLayout_elements_TextFlow__graphicObjectCount++;
};


/** @asprivate - decrement the count 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.decGraphicObjectCount = function() {
  this.org_apache_royale_textLayout_elements_TextFlow__graphicObjectCount--;
};


/** @asprivate use this function directly if you want to clear the flowcomposer but not unload the graphics.  
 * @param {org.apache.royale.textLayout.compose.IFlowComposer} newComposer
 * @param {boolean} okToUnloadGraphics
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.changeFlowComposer = function(newComposer, okToUnloadGraphics) {
  var /** @type {org.apache.royale.textLayout.compose.IFlowComposer} */ origComposer = this.org_apache_royale_textLayout_elements_TextFlow__flowComposer;
  if (this.org_apache_royale_textLayout_elements_TextFlow__flowComposer != newComposer) {
    var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ oldSWFContext = org.apache.royale.textLayout.compose.utils.ContextUtil.computeBaseSWFContext(this.org_apache_royale_textLayout_elements_TextFlow__flowComposer ? this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.swfContext : null);
    var /** @type {org.apache.royale.textLayout.compose.ISWFContext} */ newSWFContext = org.apache.royale.textLayout.compose.utils.ContextUtil.computeBaseSWFContext(newComposer ? newComposer.swfContext : null);
    if (this.org_apache_royale_textLayout_elements_TextFlow__flowComposer) {
      var /** @type {number} */ containerIter = 0;
      while (containerIter < this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.numControllers)
        this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.getControllerAt(containerIter++).clearSelectionShapes();
      this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.setRootElement(null);
    }
    this.org_apache_royale_textLayout_elements_TextFlow__flowComposer = newComposer;
    if (this.org_apache_royale_textLayout_elements_TextFlow__flowComposer)
      this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.setRootElement(this);
    if (this.textLength)
      this.damage(this.getAbsoluteStart(), this.textLength, "invalid", false);
    if (oldSWFContext != newSWFContext)
      this.invalidateAllFormats();
    if (this.org_apache_royale_textLayout_elements_TextFlow__flowComposer == null) {
      if (okToUnloadGraphics)
        this.unloadGraphics();
    }
    else if (origComposer == null)
      this.prepareGraphicsForLoad();
  }
};


/** @asprivate - use to unload ILGs.  Generally TLF manage this for you but TLF errs on the side of letting the graphics run once they are started.  There may
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.unloadGraphics = function() {
};


/** @asprivate - use to queue ILGs for loading.  Generally TLF manage this for you.  However, this function exists so that clients may initiate a load in edge cases. 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.prepareGraphicsForLoad = function() {
  if (this.org_apache_royale_textLayout_elements_TextFlow__graphicObjectCount)
    this.appendElementsForDelayedUpdate(this, null);
};


/** Returns an element whose <code>id</code> property matches the <code>idName</code> parameter. Provides
 * the ability to apply a style based on the <code>id</code>. 
 *
 * <p>For example, the following line sets the style "color" to 0xFF0000 (red), for the
 * element having the <code>id</code> span1.</p>
 *
 * <listing version="3.0" >
 * textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
 * </listing>
 *
 * <p><strong>Note:</strong> In the following code, <code>p.addChild(s)</code> <em>removes</em> <code>s</code> 
 * from its original parent and adds it to <code>p</code>, the new parent.</p>
 *
 * <listing version="3.0" >
 * var s:SpanElement = new SpanElement();
 * var p:ParagraphElement = new ParagraphElement();
 * ...
 * s = textFlow.getElementByID("span3") as SpanElement;
 * p.addChild(s);
 * textFlow.addChild(p);
 * </listing>
 *
 * @asparam idName The <code>id</code> value of the element to find.
 *
 * @asreturn The element whose id matches <code>idName</code>.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see FlowElement#id 
 * @param {string} idName
 * @return {org.apache.royale.textLayout.elements.IFlowElement}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.getElementByID = function(idName) {
  var self = this;
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ rslt;
  this.applyFunctionToElements(function(elem) {
    if (elem.id == idName) {
      rslt = elem;
      return true;
    }
    return false;
  });
  return rslt;
};


/** Returns all elements that have <code>styleName</code> set to <code>styleNameValue</code>.
 *
 * @asparam styleNameValue The name of the style for which to find elements that have it set.
 *
 * @asreturn An array of the elements whose <code>styleName</code> value matches <code>styleNameValue</code>. For example,
 * all elements that have the style name "color".
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see FlowElement#styleName 
 * @param {string} styleNameValue
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.getElementsByStyleName = function(styleNameValue) {
  var self = this;
  var /** @type {Array} */ a = new Array();
  this.applyFunctionToElements(function(elem) {
    if (elem.styleName == styleNameValue)
      a.push(elem);
    return false;
  });
  return a;
};


/** Returns all elements that have <code>typeName</code> set to <code>typeNameValue</code>.
 *
 * @asparam styleNameValue The name of the style for which to find elements that have it set.
 *
 * @asreturn An array of the elements whose <code>typeName</code> value matches <code>typeNameValue</code>. For example,
 * all elements that have the type name "foo". A <code>typeName</code> is the TextFlow markup tag (such as the
 * <code>&lt;p&gt;</code> tag for ParagraphElements).
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see FlowElement#styleName 
 * @param {string} typeNameValue
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.getElementsByTypeName = function(typeNameValue) {
  var self = this;
  var /** @type {Array} */ a = new Array();
  this.applyFunctionToElements(function(elem) {
    if (elem.typeName == typeNameValue)
      a.push(elem);
    return false;
  });
  return a;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.updateLengths = function(startIdx, len, updateLines) {
  if (this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart != -1) {
    var /** @type {number} */ newNormalizeStart = startIdx < this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart ? startIdx : this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart;
    if (newNormalizeStart < this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart)
      this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen += ((this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart - newNormalizeStart)) >> 0;
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen += len;
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart = newNormalizeStart;
  } else {
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart = startIdx;
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = len;
  }
  if (this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen < 0)
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = 0;
  if (updateLines && this.org_apache_royale_textLayout_elements_TextFlow__flowComposer) {
    this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.updateLengths(startIdx, len);
    org.apache.royale.textLayout.elements.TextFlow.superClass_.updateLengths.apply(this, [startIdx, len, false]);
  }
  else
    org.apache.royale.textLayout.elements.TextFlow.superClass_.updateLengths.apply(this, [startIdx, len, updateLines]);
};


/** @asprivate Update any elements that have a delayed updated.  Normally used to stop foreignelements when they 
 * are either displayed the first time or removed from the stage
 * @param {boolean} okToUnloadGraphics
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.applyUpdateElements = function(okToUnloadGraphics) {
  if (this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate) {
    var /** @type {boolean} */ hasController = !!(this.flowComposer && this.flowComposer.numControllers != 0);
    for (var /** @type {Object} */ child in this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate)
      child.applyDelayedElementUpdate(this, okToUnloadGraphics, hasController);
    if (hasController) {
      this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate = null;
      return true;
    }
  }
  return false;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.preCompose = function() {
  do {
    this.normalize();
  } while (this.applyUpdateElements(true));
};


/**
 * Mark the a range of text as invalid - needs to be recomposed.
 * <p>The text classes are self damaging.  This is only used when modifying the container chain.</p>
 * <p>Warning: Plan to evaulate a way to hide this method totally.</p>
 * @asparam start		text index of first character to marked invalid
 * @asparam damageLen	number of characters to mark invalid
 * @asparam needNormalize optional parameter (true is default) - normalize should include this range.
 * @asprivate
 * @param {number} damageStart
 * @param {number} damageLen
 * @param {string} damageType
 * @param {boolean=} needNormalize
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.damage = function(damageStart, damageLen, damageType, needNormalize) {
  needNormalize = typeof needNormalize !== 'undefined' ? needNormalize : true;
  if (needNormalize) {
    if (this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart == -1) {
      this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart = damageStart;
      this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = damageLen;
    } else {
      if (damageStart < this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart) {
        var /** @type {number} */ newNormalizeLen = (this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen) >>> 0;
        newNormalizeLen = (this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart + this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen - damageStart) >>> 0;
        if (damageLen > newNormalizeLen)
          newNormalizeLen = (damageLen) >>> 0;
        this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart = damageStart;
        this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = (newNormalizeLen) >> 0;
      } else if ((this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart + this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen) > damageStart) {
        if (damageStart + damageLen > this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart + this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen)
          this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = (damageStart + damageLen - this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart) >> 0;
      }
      else
        this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = (damageStart + damageLen - this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart) >> 0;
    }
    
    if (this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart + this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen > this.textLength)
      this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = (this.textLength - this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart) >> 0;
  }
  if (this.org_apache_royale_textLayout_elements_TextFlow__flowComposer)
    this.org_apache_royale_textLayout_elements_TextFlow__flowComposer.damage(damageStart, damageLen, damageType);
  if (this.hasEventListener(org.apache.royale.textLayout.events.DamageEvent.DAMAGE))
    this.dispatchEvent(new org.apache.royale.textLayout.events.DamageEvent(org.apache.royale.textLayout.events.DamageEvent.DAMAGE, false, false, this, damageStart, damageLen));
};


/**
 * Find the paragraph at the specified absolute position
 * @asprivate
 * @param {number} pos
 * @return {org.apache.royale.textLayout.elements.IParagraphElement}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.findAbsoluteParagraph = function(pos) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ elem = this.findLeaf(pos);
  return elem ? elem.getParagraph() : null;
};


/**
 * Find the IFlowGroupElement at the absolute position,
 * could be synonymous with the paragraph OR a subBlockElement
 * @asprivate
 * @param {number} pos
 * @return {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.findAbsoluteFlowGroupElement = function(pos) {
  var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ elem = this.findLeaf(pos);
  return elem.parent;
};


/**
 * @copy org.apache.royale.events.IEventDispatcher#addEventListener()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.addEventListener = function(type, listener, useCapture) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  if (!this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher)
    this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher = new org.apache.royale.events.EventDispatcher();
  this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher.addEventListener(type, listener, useCapture);
};


/**
 * @copy org.apache.royale.events.IEventDispatcher#dispatchEvent()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.events.Event} event
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.dispatchEvent = function(event) {
  if (!this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher)
    return true;
  return this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher.dispatchEvent(event);
};


/**
 * @copy org.apache.royale.events.IEventDispatcher#hasEventListener()
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} type
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.hasEventListener = function(type) {
  if (!this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher)
    return false;
  return this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher.hasEventListener(type);
};


/**
 * @copy org.apache.royale.events.IEventDispatcher#removeEventListener().
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.removeEventListener = function(type, listener, useCapture) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  if (!this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher)
    return;
  this.org_apache_royale_textLayout_elements_TextFlow__eventDispatcher.removeEventListener(type, listener, useCapture);
};


/**
 * @private
 * @type {org.apache.royale.utils.ObjectMap}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate;


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.IFlowElement} elem
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.appendOneElementForUpdate = function(elem) {
  if (this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate == null)
    this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate = new org.apache.royale.utils.ObjectMap();
  this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate[elem] = null;
};


/** @asprivate 
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.mustUseComposer = function() {
  if (this.org_apache_royale_textLayout_elements_TextFlow__interactiveObjectCount != 0)
    return true;
  if (this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate == null)
    return false;
  this.normalize();
  var /** @type {boolean} */ rslt = false;
  for (var /** @type {Object} */ elem in this.org_apache_royale_textLayout_elements_TextFlow__elemsToUpdate) {
    if (elem.updateForMustUseComposer(this))
      rslt = true;
  }
  return rslt;
};


/** @asprivate 
 * @param {string} changeType
 * @param {Object} elem
 * @param {number} changeStart
 * @param {number} changeLen
 * @param {boolean} needNormalize
 * @param {boolean} bumpGeneration
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.processModelChanged = function(changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration) {
  if (org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.IFlowElement))
    elem.appendElementsForDelayedUpdate(this, changeType);
  if (bumpGeneration)
    this.org_apache_royale_textLayout_elements_TextFlow__generation = org.apache.royale.textLayout.elements.TextFlow._nextGeneration++;
  if (changeLen > 0 || changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED)
    this.damage(changeStart, changeLen, "invalid", needNormalize);
  if (this.formatResolver) {
    switch (changeType) {
      case org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL:
      
      case org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED:
      
      case org.apache.royale.textLayout.events.ModelChange.STYLE_SELECTOR_CHANGED:
        this.formatResolver.invalidate(elem);
        elem.formatChanged(false);
        break;
    }
  }
};


/** used to reset the number backwards after an undo or redo. @asprivate 
 * @param {number} num
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.setGeneration = function(num) {
  this.org_apache_royale_textLayout_elements_TextFlow__generation = num;
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.elements.InlineGraphicElement} elem
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.processAutoSizeImageLoaded = function(elem) {
  if (this.flowComposer)
    elem.appendElementsForDelayedUpdate(this, null);
};


/**
 * Examine the damaged textLength of the TextFlow and put it in a normal form.  This includes adding spans to empty paragraph and
 * merging sibling spans that have the same attributes.
 * @asprivate 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.normalize = function() {
  if (this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart != -1) {
    var /** @type {number} */ normalizeEnd = (this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart + (this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen == 0 ? 1 : this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen)) >> 0;
    this.normalizeRange((this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart == 0 ? this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart : this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart - 1) >>> 0, (normalizeEnd) >>> 0);
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeStart = -1;
    this.org_apache_royale_textLayout_elements_TextFlow_normalizeLen = 0;
  }
  
};


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper;


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.doComputeTextLayoutFormat = function() {
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ parentPrototype = this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper ? this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper.getComputedPrototypeFormat() : null;
  return org.apache.royale.textLayout.utils.CreateTLFUtil.createTLF(this.formatForCascade, parentPrototype);
};


/** Use the formatResolver to get the character "before style" of an Object.
 * @asparam elem is either a FlowElement or a ContainerController(doesn't happen for characterformat)
 * @asreturn any styled CharacterFormat for that element
 * @asprivate
 * @param {Object} elem
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.getTextLayoutFormatStyle = function(elem) {
  if (this.org_apache_royale_textLayout_elements_TextFlow__formatResolver == null)
    return null;
  var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ rslt = this.org_apache_royale_textLayout_elements_TextFlow__formatResolver.resolveFormat(elem);
  if (rslt == null)
    return null;
  var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ tlfvh = rslt;
  return tlfvh ? tlfvh : new org.apache.royale.textLayout.formats.TextLayoutFormat(rslt);
};


/** Use the formatResolver to get the character "after style" of an Object.
 * @asparam elem is either a FlowElement or a ContainerController(doesn't happen for characterformat)
 * @asreturn any styled CharacterFormat for that element
 * @asprivate
 * @param {Object} elem
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.getExplicitStyle = function(elem) {
  if (this.org_apache_royale_textLayout_elements_TextFlow__formatResolver == null)
    return null;
  if (org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_elements_TextFlow__formatResolver, org.apache.royale.textLayout.elements.IExplicitFormatResolver)) {
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ rslt = this.org_apache_royale_textLayout_elements_TextFlow__formatResolver.resolveExplicitFormat(elem);
    if (rslt == null)
      return null;
    var /** @type {org.apache.royale.textLayout.formats.TextLayoutFormat} */ tlfvh = rslt;
    return tlfvh ? tlfvh : new org.apache.royale.textLayout.formats.TextLayoutFormat(rslt);
  }
  return null;
};


/** @asprivate 
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.clearBackgroundManager = function() {
  if (this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager) {
    if (!org.apache.royale.textLayout.elements.utils.BackgroundHelper.BACKGROUND_MANAGER_CACHE)
      org.apache.royale.textLayout.elements.utils.BackgroundHelper.BACKGROUND_MANAGER_CACHE = new org.apache.royale.utils.ObjectMap();
    org.apache.royale.textLayout.elements.utils.BackgroundHelper.BACKGROUND_MANAGER_CACHE[this] = this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager.getShapeRectArray().concat();
  }
  this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager = null;
};


/** @asprivate.  Returns the existing backgroundManager - creating it if it doesn't exist.  Use when adding backgrounds to draw.  
 * @return {org.apache.royale.textLayout.elements.IBackgroundManager}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.getBackgroundManager = function() {
  if (!this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager)
    this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager = this.flowComposer.createBackgroundManager();
  return this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager;
};


/** Invalidates all formatting information for the TextFlow, forcing it to be recomputed.
 * Call this method when styles have changed.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see IFormatResolver#invalidateAll()
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.invalidateAllFormats = function() {
  if (this.org_apache_royale_textLayout_elements_TextFlow__formatResolver)
    this.org_apache_royale_textLayout_elements_TextFlow__formatResolver.invalidateAll(this);
  this.formatChanged(true);
};


/**
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.nestedInTable = function() {
  return !!(this.parentElement && org.apache.royale.utils.Language.is(this.parentElement, org.apache.royale.textLayout.elements.ITableCellElement));
};


org.apache.royale.textLayout.elements.TextFlow.prototype.get__className = function() {
  return "TextFlow";
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.factory.ITLFFactory}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.tlfFactory;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__tlfFactory = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__tlfFactory;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.interactiveObjectCount;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__interactiveObjectCount = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__interactiveObjectCount;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.graphicObjectCount;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__graphicObjectCount = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__graphicObjectCount;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.configuration;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__configuration = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__configuration;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.interactionManager;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__interactionManager = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__interactionManager;
};


org.apache.royale.textLayout.elements.TextFlow.prototype.set__interactionManager = function(newInteractionManager) {
  if (this.org_apache_royale_textLayout_elements_TextFlow__interactionManager != newInteractionManager) {
    if (this.org_apache_royale_textLayout_elements_TextFlow__interactionManager)
      this.org_apache_royale_textLayout_elements_TextFlow__interactionManager.textFlow = null;
    this.org_apache_royale_textLayout_elements_TextFlow__interactionManager = newInteractionManager;
    if (this.org_apache_royale_textLayout_elements_TextFlow__interactionManager) {
      this.org_apache_royale_textLayout_elements_TextFlow__interactionManager.textFlow = this;
      this.normalize();
    }
    if (this.flowComposer)
      this.flowComposer.interactionManagerChanged(newInteractionManager);
  }
};


org.apache.royale.textLayout.elements.TextFlow.prototype.get__flowComposer = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__flowComposer;
};


org.apache.royale.textLayout.elements.TextFlow.prototype.set__flowComposer = function(composer) {
  this.changeFlowComposer(composer, true);
};


org.apache.royale.textLayout.elements.TextFlow.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.TextFlow.prototype.get__defaultTypeName = function() {
  return "TextFlow";
};


org.apache.royale.textLayout.elements.TextFlow.prototype.set__mxmlChildren = function(array) {
  org.apache.royale.textLayout.elements.TextFlow.superClass_.set__mxmlChildren.apply(this, [array]);
  this.normalize();
  this.applyWhiteSpaceCollapse(null);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.generation;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__generation = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__generation;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.hostFormat;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__hostFormat = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper ? this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper.format : null;
};


org.apache.royale.textLayout.elements.TextFlow.prototype.set__hostFormat = function(value) {
  if (value == null)
    this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper = null; else {
    if (this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper == null)
      this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper = new org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper();
    this.org_apache_royale_textLayout_elements_TextFlow__hostFormatHelper.format = value;
  }
  this.formatChanged();
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IBackgroundManager}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.backgroundManager;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__backgroundManager = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__backgroundManager;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IFormatResolver}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.formatResolver;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__formatResolver = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__formatResolver;
};


org.apache.royale.textLayout.elements.TextFlow.prototype.set__formatResolver = function(val) {
  if (this.org_apache_royale_textLayout_elements_TextFlow__formatResolver != val) {
    if (this.org_apache_royale_textLayout_elements_TextFlow__formatResolver)
      this.org_apache_royale_textLayout_elements_TextFlow__formatResolver.invalidateAll(this);
    this.org_apache_royale_textLayout_elements_TextFlow__formatResolver = val;
    if (this.org_apache_royale_textLayout_elements_TextFlow__formatResolver)
      this.org_apache_royale_textLayout_elements_TextFlow__formatResolver.invalidateAll(this);
    this.formatChanged(true);
  }
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.parentElement;


org.apache.royale.textLayout.elements.TextFlow.prototype.get__parentElement = function() {
  return this.org_apache_royale_textLayout_elements_TextFlow__parentElement;
};


org.apache.royale.textLayout.elements.TextFlow.prototype.set__parentElement = function(value) {
  this.org_apache_royale_textLayout_elements_TextFlow__parentElement = value;
};


Object.defineProperties(org.apache.royale.textLayout.elements.TextFlow.prototype, /** @lends {org.apache.royale.textLayout.elements.TextFlow.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__className},
/**
 * @type {org.apache.royale.textLayout.factory.ITLFFactory}
 */
tlfFactory: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__tlfFactory},
/**
 * @type {number}
 */
interactiveObjectCount: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__interactiveObjectCount},
/**
 * @type {number}
 */
graphicObjectCount: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__graphicObjectCount},
/**
 * @type {org.apache.royale.textLayout.elements.IConfiguration}
 */
configuration: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__configuration},
/**
 * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */
interactionManager: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__interactionManager,
set: org.apache.royale.textLayout.elements.TextFlow.prototype.set__interactionManager},
/**
 * @type {org.apache.royale.textLayout.compose.IFlowComposer}
 */
flowComposer: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__flowComposer,
set: org.apache.royale.textLayout.elements.TextFlow.prototype.set__flowComposer},
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__defaultTypeName},
/**
 * @type {Array}
 */
mxmlChildren: {
get: org.apache.royale.textLayout.elements.FlowGroupElement.prototype.get__mxmlChildren,
set: org.apache.royale.textLayout.elements.TextFlow.prototype.set__mxmlChildren},
/**
 * @type {number}
 */
generation: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__generation},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
hostFormat: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__hostFormat,
set: org.apache.royale.textLayout.elements.TextFlow.prototype.set__hostFormat},
/**
 * @type {org.apache.royale.textLayout.elements.IBackgroundManager}
 */
backgroundManager: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__backgroundManager},
/**
 * @type {org.apache.royale.textLayout.elements.IFormatResolver}
 */
formatResolver: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__formatResolver,
set: org.apache.royale.textLayout.elements.TextFlow.prototype.set__formatResolver},
/**
 * @type {org.apache.royale.textLayout.elements.IFlowGroupElement}
 */
parentElement: {
get: org.apache.royale.textLayout.elements.TextFlow.prototype.get__parentElement,
set: org.apache.royale.textLayout.elements.TextFlow.prototype.set__parentElement}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextFlow', qName: 'org.apache.royale.textLayout.elements.TextFlow', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.ITextFlow] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'tlfFactory': { type: 'org.apache.royale.textLayout.factory.ITLFFactory', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'interactiveObjectCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'graphicObjectCount': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'configuration': { type: 'org.apache.royale.textLayout.elements.IConfiguration', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'interactionManager': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'flowComposer': { type: 'org.apache.royale.textLayout.compose.IFlowComposer', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'mxmlChildren': { type: 'Array', access: 'writeonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'generation': { type: 'uint', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'hostFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'backgroundManager': { type: 'org.apache.royale.textLayout.elements.IBackgroundManager', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'formatResolver': { type: 'org.apache.royale.textLayout.elements.IFormatResolver', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'parentElement': { type: 'org.apache.royale.textLayout.elements.IFlowGroupElement', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'}
      };
    },
    methods: function () {
      return {
        'TextFlow': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'org.apache.royale.textLayout.factory.ITLFFactory', true ,'org.apache.royale.textLayout.elements.IConfiguration', true ]; }},
        'shallowCopy': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'int', true ,'int', true ]; }},
        'incInteractiveObjectCount': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'decInteractiveObjectCount': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'incGraphicObjectCount': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'decGraphicObjectCount': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'changeFlowComposer': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'org.apache.royale.textLayout.compose.IFlowComposer', false ,'Boolean', false ]; }},
        'unloadGraphics': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'prepareGraphicsForLoad': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'getElementByID': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ]; }},
        'getElementsByStyleName': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ]; }},
        'getElementsByTypeName': { type: 'Array', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ]; }},
        'updateLengths': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'int', false ,'int', false ,'Boolean', false ]; }},
        'applyUpdateElements': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'Boolean', false ]; }},
        'preCompose': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'damage': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'int', false ,'int', false ,'String', false ,'Boolean', true ]; }},
        'findAbsoluteParagraph': { type: 'org.apache.royale.textLayout.elements.IParagraphElement', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'int', false ]; }},
        'findAbsoluteFlowGroupElement': { type: 'org.apache.royale.textLayout.elements.IFlowGroupElement', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'int', false ]; }},
        'addEventListener': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ]; }},
        'removeEventListener': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ]; }},
        'appendOneElementForUpdate': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'mustUseComposer': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'processModelChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'String', false ,'Object', false ,'int', false ,'int', false ,'Boolean', false ,'Boolean', false ]; }},
        'setGeneration': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'uint', false ]; }},
        'processAutoSizeImageLoaded': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'org.apache.royale.textLayout.elements.InlineGraphicElement', false ]; }},
        'normalize': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'doComputeTextLayoutFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'getTextLayoutFormatStyle': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'Object', false ]; }},
        'getExplicitStyle': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow', parameters: function () { return [ 'Object', false ]; }},
        'clearBackgroundManager': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'getBackgroundManager': { type: 'org.apache.royale.textLayout.elements.IBackgroundManager', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'invalidateAllFormats': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'},
        'nestedInTable': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./TextFlow.js.map


/**
 * @constructor
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper = function() {
};


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.HostFormatHelper__format;


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.HostFormatHelper__computedPrototypeFormat;


/**
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.getComputedPrototypeFormat = function() {
  if (this.HostFormatHelper__computedPrototypeFormat == null) {
    var /** @type {org.apache.royale.textLayout.formats.ITextLayoutFormat} */ useFormat;
    if (org.apache.royale.utils.Language.is(this.HostFormatHelper__format, org.apache.royale.textLayout.formats.TextLayoutFormat) || org.apache.royale.utils.Language.is(this.HostFormatHelper__format, org.apache.royale.textLayout.formats.TextLayoutFormat))
      useFormat = this.HostFormatHelper__format;
    else
      useFormat = new org.apache.royale.textLayout.formats.TextLayoutFormat(this.HostFormatHelper__format);
    this.HostFormatHelper__computedPrototypeFormat = org.apache.royale.textLayout.utils.CreateTLFUtil.createTLF(useFormat, null);
  }
  return this.HostFormatHelper__computedPrototypeFormat;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.format;


org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.get__format = function() {
  return this.HostFormatHelper__format;
};


org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.set__format = function(value) {
  this.HostFormatHelper__format = value;
  this.HostFormatHelper__computedPrototypeFormat = null;
};


Object.defineProperties(org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype, /** @lends {org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype} */ {
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
format: {
get: org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.get__format,
set: org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.set__format}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'HostFormatHelper', qName: 'org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'format': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper'}
      };
    },
    methods: function () {
      return {
        'getComputedPrototypeFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.TextFlow.HostFormatHelper.prototype.ROYALE_COMPILE_FLAGS = 10;
