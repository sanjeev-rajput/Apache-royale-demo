/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/TableRowElement.as
 * org.apache.royale.textLayout.elements.TableRowElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.TableRowElement');
/* Royale Dependency List: org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.ITableCellElement,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.TableFormattedElement');
goog.require('org.apache.royale.textLayout.elements.ITableRowElement');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.TableFormattedElement}
 * @implements {org.apache.royale.textLayout.elements.ITableRowElement}
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 */
org.apache.royale.textLayout.elements.TableRowElement = function(format) {
  format = typeof format !== 'undefined' ? format : null;
  org.apache.royale.textLayout.elements.TableRowElement.base(this, 'constructor');
  if (format) {
    this.format = format;
  }
};
goog.inherits(org.apache.royale.textLayout.elements.TableRowElement, org.apache.royale.textLayout.elements.TableFormattedElement);


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.x;


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.y;


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.height;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.org_apache_royale_textLayout_elements_TableRowElement__rowIndex = 0;


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.parcelIndex = 0;


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.columnIndex = 0;


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.iMaxRowDepth = 0;


/**
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.beyondParcel = false;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.org_apache_royale_textLayout_elements_TableRowElement__composedHeight = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.org_apache_royale_textLayout_elements_TableRowElement__totalHeight = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.org_apache_royale_textLayout_elements_TableRowElement__isMaxHeight = false;


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.canOwnFlowElement = function(elem) {
  return org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITableCellElement);
};


/** @asprivate if its in a numbered list expand the damage to all list items - causes the numbers to be regenerated 
 * @override
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.modelChanged = function(changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration) {
  needNormalize = typeof needNormalize !== 'undefined' ? needNormalize : true;
  bumpGeneration = typeof bumpGeneration !== 'undefined' ? bumpGeneration : true;
  org.apache.royale.textLayout.elements.TableRowElement.superClass_.modelChanged.apply(this, [changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration]);
};


/**
 * Returns a vector of table cell elements or null if the row contains no cells
 * @return {Array}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.getCells = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = this.table;
  if (!table) {
    return null;
  }
  return table.getCellsForRow(this);
};


/**
 * Returns the cell at the specified index or null if out of range. 
 * @param {number} index
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.getCellAt = function(index) {
  var /** @type {Array} */ cells = this.getCells();
  if (!cells || index < 0 || index >= cells.length)
    return null;
  return cells[index];
};


/**
 * Adds a table cell to the row
 * @param {org.apache.royale.textLayout.elements.ITableCellElement} cell
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.addCell = function(cell) {
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = this.table;
  var /** @type {number} */ cellLength = this.numChildren;
  if (!table) {
    throw new Error("Table must be set");
  }
  cell.rowIndex = this.rowIndex;
  if (cell.colIndex == -1) {
    cell.colIndex = cellLength;
  }
  this.cells.push(cell);
  return cell;
};


/**
 * Adds a table cell to the row
 * @param {number} index
 * @return {org.apache.royale.textLayout.elements.ITableCellElement}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.addCellAt = function(index) {
  throw new Error("Add cell at is not implemented");
};


/**
 * Get an estimate column count for this row.
 * This is temporary. TODO loop through cells and check for column span.
 * @return {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.getColumnCount = function() {
  return this.numCells || this.numChildren;
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__className = function() {
  return "TableRowElement";
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__defaultTypeName = function() {
  return "tr";
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.cells;


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__cells = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = this.table;
  if (!table) {
    return null;
  }
  return table.getCellsForRowArray(this);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.numCells;


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__numCells = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITableElement} */ table = this.table;
  if (!table) {
    return 0;
  }
  return (table.getCellsForRow(this).length) >> 0;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.composedHeight;


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__composedHeight = function() {
  return this.org_apache_royale_textLayout_elements_TableRowElement__composedHeight;
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.set__composedHeight = function(composedHeight) {
  this.org_apache_royale_textLayout_elements_TableRowElement__composedHeight = composedHeight;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.rowIndex;


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__rowIndex = function() {
  return this.org_apache_royale_textLayout_elements_TableRowElement__rowIndex;
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.set__rowIndex = function(rowIndex) {
  this.org_apache_royale_textLayout_elements_TableRowElement__rowIndex = rowIndex;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.isMaxHeight;


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__isMaxHeight = function() {
  return this.org_apache_royale_textLayout_elements_TableRowElement__isMaxHeight;
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.set__isMaxHeight = function(isMaxHeight) {
  this.org_apache_royale_textLayout_elements_TableRowElement__isMaxHeight = isMaxHeight;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.totalHeight;


org.apache.royale.textLayout.elements.TableRowElement.prototype.get__totalHeight = function() {
  return this.org_apache_royale_textLayout_elements_TableRowElement__totalHeight;
};


org.apache.royale.textLayout.elements.TableRowElement.prototype.set__totalHeight = function(totalHeight) {
  this.org_apache_royale_textLayout_elements_TableRowElement__totalHeight = totalHeight;
};


Object.defineProperties(org.apache.royale.textLayout.elements.TableRowElement.prototype, /** @lends {org.apache.royale.textLayout.elements.TableRowElement.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__className},
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__defaultTypeName},
/**
 * @type {Array}
 */
cells: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__cells},
/**
 * @type {number}
 */
numCells: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__numCells},
/**
 * @type {number}
 */
composedHeight: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__composedHeight,
set: org.apache.royale.textLayout.elements.TableRowElement.prototype.set__composedHeight},
/**
 * @type {number}
 */
rowIndex: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__rowIndex,
set: org.apache.royale.textLayout.elements.TableRowElement.prototype.set__rowIndex},
/**
 * @type {boolean}
 */
isMaxHeight: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__isMaxHeight,
set: org.apache.royale.textLayout.elements.TableRowElement.prototype.set__isMaxHeight},
/**
 * @type {number}
 */
totalHeight: {
get: org.apache.royale.textLayout.elements.TableRowElement.prototype.get__totalHeight,
set: org.apache.royale.textLayout.elements.TableRowElement.prototype.set__totalHeight}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TableRowElement', qName: 'org.apache.royale.textLayout.elements.TableRowElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.ITableRowElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'x': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.x = v : inst.x;}},
        'y': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.y = v : inst.y;}},
        'height': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.height = v : inst.height;}},
        'parcelIndex': { type: 'int', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.parcelIndex = v : inst.parcelIndex;}},
        'columnIndex': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.columnIndex = v : inst.columnIndex;}},
        'iMaxRowDepth': { type: 'Number', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.iMaxRowDepth = v : inst.iMaxRowDepth;}},
        'beyondParcel': { type: 'Boolean', get_set: function (/** org.apache.royale.textLayout.elements.TableRowElement */ inst, /** * */ v) {return v !== undefined ? inst.beyondParcel = v : inst.beyondParcel;}}
      };
    },
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'cells': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'numCells': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'composedHeight': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'rowIndex': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'isMaxHeight': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'totalHeight': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'}
      };
    },
    methods: function () {
      return {
        'TableRowElement': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ]; }},
        'canOwnFlowElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'modelChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', false ,'int', false ,'Boolean', true ,'Boolean', true ]; }},
        'getCells': { type: 'Vector.<org.apache.royale.textLayout.elements.ITableCellElement>', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'},
        'getCellAt': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement', parameters: function () { return [ 'int', false ]; }},
        'addCell': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITableCellElement', false ]; }},
        'addCellAt': { type: 'org.apache.royale.textLayout.elements.ITableCellElement', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement', parameters: function () { return [ 'int', false ]; }},
        'getColumnCount': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.TableRowElement'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.TableRowElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./TableRowElement.js.map
