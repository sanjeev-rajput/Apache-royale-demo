/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/SubParagraphGroupElementBase.as
 * org.apache.royale.textLayout.elements.SubParagraphGroupElementBase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.SubParagraphGroupElementBase');
/* Royale Dependency List: org.apache.royale.events.IEventDispatcher,org.apache.royale.text.engine.ContentElement,org.apache.royale.text.engine.GroupElement,org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.events.FlowElementEventDispatcher,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.FlowGroupElement');
goog.require('org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase');



/** Constructor - creates a new SubParagraphGroupElementBase instance.
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.FlowGroupElement}
 * @implements {org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase = function() {
  org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.elements.SubParagraphGroupElementBase, org.apache.royale.textLayout.elements.FlowGroupElement);


/**
 * @private
 * @type {org.apache.royale.text.engine.GroupElement}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.kMaxSPGEPrecedence = 1000;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.kMinSPGEPrecedence = 0;


/**
 * @type {org.apache.royale.textLayout.events.FlowElementEventDispatcher}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype._eventMirror = null;


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.createContentElement = function() {
  if (this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement)
    return;
  this.calculateComputedFormat();
  this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement = new org.apache.royale.text.engine.GroupElement(null);
  
  for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(i);
    child.createContentElement();
  }
  if (this.parent)
    this.parent.insertBlockElement(this, this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.releaseContentElement = function() {
  if (this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement == null)
    return;
  for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(i);
    child.releaseContentElement();
  }
  this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement = null;
  this._computedFormat = null;
};


/** @asprivate
 * Gets the EventDispatcher associated with this FlowElement.  Use the functions
 * of EventDispatcher such as <code>setEventHandler()</code> and <code>removeEventHandler()</code> 
 * to capture events that happen over this FlowLeafElement object.  The
 * event handler that you specify will be called after this FlowElement object does
 * the processing it needs to do.
 * 
 * Note that the event dispatcher will only dispatch FlowElementMouseEvent events.
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 *
 * @see org.apache.royale.events.EventDispatcher
 * @see org.apache.royale.textLayout.events.FlowElementMouseEvent
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.getEventMirror = function() {
  if (!this._eventMirror)
    this._eventMirror = new org.apache.royale.textLayout.events.FlowElementEventDispatcher(this);
  return this._eventMirror;
};


/** @asprivate
 * Checks whether an event dispatcher is attached, and if so, if the event dispatcher
 * has any active listeners.
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.hasActiveEventMirror = function() {
  return !!(this._eventMirror && (this._eventMirror._listenerCount != 0));
};


/** @asprivate This is done so that the TextContainerManager can discover EventMirrors in a TextFlow. 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.appendElementsForDelayedUpdate = function(tf, changeType) {
  if (changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED) {
    if (this.hasActiveEventMirror()) {
      tf.incInteractiveObjectCount();
      this.getParagraph().incInteractiveChildrenCount();
    }
  } else if (changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL) {
    if (this.hasActiveEventMirror()) {
      tf.decInteractiveObjectCount();
      this.getParagraph().decInteractiveChildrenCount();
    }
  }
  org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.superClass_.appendElementsForDelayedUpdate.apply(this, [tf, changeType]);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.createContentAsGroup = function(pos) {
  pos = typeof pos !== 'undefined' ? pos : 0;
  return this.groupElement;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.removeBlockElement = function(child, block) {
  var /** @type {number} */ idx = this.getChildIndex(child);
  this.groupElement.replaceElements(idx, (idx + 1) >> 0, null);
  
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.insertBlockElement = function(child, block) {
  if (this.groupElement) {
    var /** @type {number} */ idx = this.getChildIndex(child);
    var /** @type {Array} */ gc = [];
    
    gc.push(block);
    
    this.groupElement.replaceElements(idx, idx, gc);
    
  } else {
    child.releaseContentElement();
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ para = this.getParagraph();
    if (para)
      para.createTextBlock();
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.hasBlockElement = function() {
  return this.groupElement != null;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.setParentAndRelativeStart = function(newParent, newStart) {
  if (newParent == this.parent)
    return;
  if (this.parent && this.parent.hasBlockElement() && this.groupElement)
    this.parent.removeBlockElement(this, this.groupElement);
  if (newParent && !newParent.hasBlockElement() && this.groupElement)
    newParent.createContentElement();
  org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.superClass_.setParentAndRelativeStart.apply(this, [newParent, newStart]);
  if (this.parent && this.parent.hasBlockElement()) {
    if (!this.groupElement)
      this.createContentElement();
    else
      this.parent.insertBlockElement(this, this.groupElement);
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.replaceChildren = function(beginChildIndex, endChildIndex, rest) {
  rest = Array.prototype.slice.call(arguments, 2);
  var /** @type {Array} */ applyParams = [beginChildIndex, endChildIndex];
  org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.superClass_.replaceChildren.apply(this, applyParams.concat(rest));
  var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ p = this.getParagraph();
  if (p)
    p.ensureTerminatorAfterReplace();
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.normalizeRange = function(normalizeStart, normalizeEnd) {
  var /** @type {number} */ idx = this.findChildIndexAtPosition((normalizeStart) >> 0);
  if (idx != -1 && idx < this.numChildren) {
    var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ child = this.getChildAt(idx);
    normalizeStart = (normalizeStart - child.parentRelativeStart) >>> 0;
    
    for (;;) {
      var /** @type {number} */ origChildEnd = (child.parentRelativeStart + child.textLength) >> 0;
      child.normalizeRange(normalizeStart, (normalizeEnd - child.parentRelativeStart) >>> 0);
      var /** @type {number} */ newChildEnd = (child.parentRelativeStart + child.textLength) >> 0;
      normalizeEnd += (newChildEnd - origChildEnd) >>> 0;
      if (child.textLength == 0 && !child.bindableElement)
        this.replaceChildren(idx, (idx + 1) >> 0); else if (child.mergeToPreviousIfPossible()) {
        var /** @type {org.apache.royale.textLayout.elements.IFlowElement} */ prevElement = this.getChildAt((idx - 1) >> 0);
        prevElement.normalizeRange(0, (prevElement.textLength) >>> 0);
      }
      else
        idx++;
      if (idx == this.numChildren)
        break;
      child = this.getChildAt(idx);
      if (child.parentRelativeStart > normalizeEnd)
        break;
      normalizeStart = 0;
    }
  }
  org.apache.royale.textLayout.elements.ElementHelper.normalizeSubParagraphRange(this);
};


/** A LinkElement cannot be nested in another LinkElement, regardless of what elements are in between in the hierarchy.
 * Likewise a TCYElemen may not be nested. This function checks an incoming element to see if any of its children would
 * @private
 * @param {org.apache.royale.textLayout.elements.SubParagraphGroupElementBase} element
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase_checkForNesting = function(element) {
  if (element) {
    if (!element.allowNesting) {
      if (this.className == element.className || this.getParentByType(element.className))
        return false;
    }
    for (var /** @type {number} */ i = (element.numChildren - 1) >> 0; i >= 0; --i)
      if (!this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase_checkForNesting(element.getChildAt(i)))
        return false;
  }
  return true;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.canOwnFlowElement = function(elem) {
  if (org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.IFlowLeafElement))
    return true;
  if (org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.SubParagraphGroupElementBase) && this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase_checkForNesting(elem))
    return true;
  return false;
};


/** Helper function for determination of where text should be inserted.  In the case of LinkElements,
 * text inserted before the LinkElement and text inserted after the LinkElement should not become
 * par of the link.  However, for most other SubParagraphGroupElementBase, inserted text should become
 * part of the SubParagraphGroupElementBase.
 * @asprivate
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.acceptTextBefore = function() {
  return true;
};


/** Helper function for determination of where text should be inserted.  In the case of LinkElements,
 * text inserted before the LinkElement and text inserted after the LinkElement should not become
 * par of the link.  However, for most other SubParagraphGroupElementBase, inserted text should become
 * part of the SubParagraphGroupElementBase.
 * @asprivate
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.acceptTextAfter = function() {
  return true;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.precedence;


org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.get__precedence = function() {
  return org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.kMaxSPGEPrecedence;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.text.engine.GroupElement}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.groupElement;


org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.get__groupElement = function() {
  return this.org_apache_royale_textLayout_elements_SubParagraphGroupElementBase__groupElement;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.allowNesting;


org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.get__allowNesting = function() {
  return false;
};


Object.defineProperties(org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype, /** @lends {org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype} */ {
/**
 * @type {number}
 */
precedence: {
get: org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.get__precedence},
/**
 * @type {org.apache.royale.text.engine.GroupElement}
 */
groupElement: {
get: org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.get__groupElement},
/**
 * @type {boolean}
 */
allowNesting: {
get: org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.get__allowNesting}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SubParagraphGroupElementBase', qName: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '_eventMirror': { type: 'org.apache.royale.textLayout.events.FlowElementEventDispatcher', get_set: function (/** org.apache.royale.textLayout.elements.SubParagraphGroupElementBase */ inst, /** * */ v) {return v !== undefined ? inst._eventMirror = v : inst._eventMirror;}}
      };
    },
    accessors: function () {
      return {
        'precedence': { type: 'uint', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'groupElement': { type: 'org.apache.royale.text.engine.GroupElement', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'allowNesting': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'}
      };
    },
    methods: function () {
      return {
        'SubParagraphGroupElementBase': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'createContentElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'releaseContentElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'getEventMirror': { type: 'org.apache.royale.events.IEventDispatcher', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'hasActiveEventMirror': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'appendElementsForDelayedUpdate': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'String', false ]; }},
        'createContentAsGroup': { type: 'org.apache.royale.text.engine.GroupElement', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'int', true ]; }},
        'removeBlockElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.text.engine.ContentElement', false ]; }},
        'insertBlockElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ,'org.apache.royale.text.engine.ContentElement', false ]; }},
        'hasBlockElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'setParentAndRelativeStart': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowGroupElement', false ,'int', false ]; }},
        'replaceChildren': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'int', false ,'int', false ,'Array', false ]; }},
        'normalizeRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'uint', false ,'uint', false ]; }},
        'canOwnFlowElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'acceptTextBefore': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'},
        'acceptTextAfter': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.SubParagraphGroupElementBase'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.SubParagraphGroupElementBase.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./SubParagraphGroupElementBase.js.map
