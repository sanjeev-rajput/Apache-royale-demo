/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/ListElement.as
 * org.apache.royale.textLayout.elements.ListElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.ListElement');
/* Royale Dependency List: org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IFlowLeafElement,org.apache.royale.textLayout.elements.IListItemElement,org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.ListItemElement,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Direction,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.IListMarkerFormat,org.apache.royale.textLayout.formats.ListStyleType,org.apache.royale.textLayout.formats.Suffix,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.ContainerFormattedElement');
goog.require('org.apache.royale.textLayout.elements.IListElement');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.ContainerFormattedElement}
 * @implements {org.apache.royale.textLayout.elements.IListElement}
 */
org.apache.royale.textLayout.elements.ListElement = function() {
  org.apache.royale.textLayout.elements.ListElement.base(this, 'constructor');
};
goog.inherits(org.apache.royale.textLayout.elements.ListElement, org.apache.royale.textLayout.elements.ContainerFormattedElement);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.ListElement.LIST_MARKER_FORMAT_NAME = "listMarkerFormat";


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListElement.prototype.canOwnFlowElement = function(elem) {
  return !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ITextFlow) && !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.IFlowLeafElement) && !org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ISubParagraphGroupElementBase);
};


/** @asprivate if its in a numbered list expand the damage to all list items - causes the numbers to be regenerated 
 * @override
 */
org.apache.royale.textLayout.elements.ListElement.prototype.modelChanged = function(changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration) {
  needNormalize = typeof needNormalize !== 'undefined' ? needNormalize : true;
  bumpGeneration = typeof bumpGeneration !== 'undefined' ? bumpGeneration : true;
  if ((changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED || changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL) && org.apache.royale.utils.Language.is(elem, org.apache.royale.textLayout.elements.ListItemElement) && this.isNumberedList()) {
    changeStart = elem.parentRelativeStart;
    changeLen = (this.textLength - elem.parentRelativeStart) >> 0;
  }
  org.apache.royale.textLayout.elements.ListElement.superClass_.modelChanged.apply(this, [changeType, elem, changeStart, changeLen, needNormalize, bumpGeneration]);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListElement.prototype.getEffectivePaddingLeft = function() {
  if (this.computedFormat.paddingLeft != org.apache.royale.textLayout.formats.FormatValue.AUTO)
    return Number(this.computedFormat.paddingLeft);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
  if (!tf || tf.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.TB || this.computedFormat.direction != org.apache.royale.textLayout.formats.Direction.LTR)
    return 0;
  return Number(this.computedFormat.listAutoPadding);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListElement.prototype.getEffectivePaddingRight = function() {
  if (this.computedFormat.paddingRight != org.apache.royale.textLayout.formats.FormatValue.AUTO)
    return Number(this.computedFormat.paddingRight);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
  if (!tf || tf.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.TB || this.computedFormat.direction != org.apache.royale.textLayout.formats.Direction.RTL)
    return 0;
  return Number(this.computedFormat.listAutoPadding);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListElement.prototype.getEffectivePaddingTop = function() {
  if (this.computedFormat.paddingTop != org.apache.royale.textLayout.formats.FormatValue.AUTO)
    return Number(this.computedFormat.paddingTop);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
  if (!tf || tf.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL || this.computedFormat.direction != org.apache.royale.textLayout.formats.Direction.LTR)
    return 0;
  return Number(this.computedFormat.listAutoPadding);
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListElement.prototype.getEffectivePaddingBottom = function() {
  if (this.computedFormat.paddingBottom != org.apache.royale.textLayout.formats.FormatValue.AUTO)
    return Number(this.computedFormat.paddingBottom);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
  if (!tf || tf.computedFormat.blockProgression != org.apache.royale.textLayout.formats.BlockProgression.RL || this.computedFormat.direction != org.apache.royale.textLayout.formats.Direction.RTL)
    return 0;
  return Number(this.computedFormat.listAutoPadding);
};


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.textLayout.elements.ListElement.constantListStyles = {"none":"", "disc":"•", "circle":"◦", "square":"■", "box":"□", "check":"✓", "diamond":"◆", "hyphen":"⁃"};


org.apache.royale.textLayout.elements.ListElement.get__romanDigitFunction = function() {
  var value = [function(o, f, t) {
    return "";
  }, function(o, f, t) {
    return o;
  }, function(o, f, t) {
    return o + o;
  }, function(o, f, t) {
    return o + o + o;
  }, function(o, f, t) {
    return o + f;
  }, function(o, f, t) {
    return f;
  }, function(o, f, t) {
    return f + o;
  }, function(o, f, t) {
    return f + o + o;
  }, function(o, f, t) {
    return f + o + o + o;
  }, function(o, f, t) {
    return o + t;
  }].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { romanDigitFunction: { value: value, writable: false }});
  return value;
};
/**
 * @private
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.romanDigitFunction;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @private
 * @const
 * @type {Array}
 */
romanDigitFunction: {
  get: org.apache.royale.textLayout.elements.ListElement.get__romanDigitFunction,
  configurable: true}});


/** @asprivate roman string support - doesn't follow the CSS spec for numbers > 4000.  The lines above aren't that interesting. In fact doesn't follow CSS spec at all. 
 * @nocollapse
 * @param {number} n
 * @param {Array} data
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.createRomanString = function(n, data) {
  var /** @type {string} */ leading = "";
  while (n >= 1000) {
    leading += data[6];
    n -= 1000;
  }
  return leading + org.apache.royale.textLayout.elements.ListElement.romanDigitFunction[org.apache.royale.utils.Language._int(n / 100)](data[4], data[5], data[6]) + org.apache.royale.textLayout.elements.ListElement.romanDigitFunction[org.apache.royale.utils.Language._int((n / 10) % 10)](data[2], data[3], data[4]) + org.apache.royale.textLayout.elements.ListElement.romanDigitFunction[org.apache.royale.utils.Language._int(n % 10)](data[0], data[1], data[2]);
};


org.apache.royale.textLayout.elements.ListElement.get__upperRomanData = function() {
  var value = ['I', 'V', 'X', 'L', 'C', 'D', 'M'].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { upperRomanData: { value: value, writable: false }});
  return value;
};
/**
 * @private
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.upperRomanData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @private
 * @const
 * @type {Array}
 */
upperRomanData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__upperRomanData,
  configurable: true}});


/** @asprivate 
 * From http://www.w3.org/TR/css3-lists/#list-content
 * upper-roman
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 * The letterspacing behavior of <U+2169 Ⅹ ROMAN NUMERAL TEN, U+2161 Ⅱ ROMAN NUMERAL TWO> is probably not what we want
 * while that of <X, I, I> is the one you want.
 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.upperRomanString = function(n) {
  if (n <= 0)
    return org.apache.royale.textLayout.elements.ListElement.decimalString(n);
  if (n <= 1000)
    return org.apache.royale.textLayout.elements.ListElement.createRomanString(n, org.apache.royale.textLayout.elements.ListElement.upperRomanData);
  if (n >= 40000)
    return org.apache.royale.textLayout.elements.ListElement.decimalString(n);
  var /** @type {string} */ lowerString = org.apache.royale.textLayout.elements.ListElement.createRomanString((n % 1000) >> 0, org.apache.royale.textLayout.elements.ListElement.upperRomanData);
  var /** @type {string} */ highString = "";
  n -= (n % 1000) >> 0;
  while (n >= 10000) {
    highString += String.fromCharCode(0x2182);
    n -= 10000;
  }
  if (n == 9000)
    highString += "M" + String.fromCharCode(0x2182);
  else if (n == 4000)
    highString += "M" + String.fromCharCode(0x2181); else {
    if (n >= 5000) {
      highString += String.fromCharCode(0x2181);
      n -= 5000;
    }
    while (n > 0) {
      highString += "M";
      n -= 1000;
    }
  }
  return highString + lowerString;
};


org.apache.royale.textLayout.elements.ListElement.get__lowerRomanData = function() {
  var value = ['i', 'v', 'x', 'l', 'c', 'd', 'm'].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { lowerRomanData: { value: value, writable: false }});
  return value;
};
/**
 * @private
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.lowerRomanData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @private
 * @const
 * @type {Array}
 */
lowerRomanData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__lowerRomanData,
  configurable: true}});


/** @asprivate 
 * The algorithm for this numbering style is identical to the upper-roman  style but using ⅰ-ⅿ U+2170-U+217F instead of Ⅰ-Ⅿ U+2160-U+216F, 
 * and ignoring step 2 (i.e. not treating numbers 1000-40000 in a special way, since there are no lowercase equivalents to ↁ U+2181 and ↂ U+2182). 
 * Numbers up to 3999 convert and over 4000 are going to go to decimal.
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.lowerRomanString = function(n) {
  return n > 0 && n < 4000 ? org.apache.royale.textLayout.elements.ListElement.createRomanString(n, org.apache.royale.textLayout.elements.ListElement.lowerRomanData) : org.apache.royale.textLayout.elements.ListElement.decimalString(n);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.decimalString = function(n) {
  return n.toString();
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.decimalLeadingZeroString = function(n) {
  return n <= 9 && n >= -9 ? "0" + n.toString() : n.toString();
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @param {number} zero
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString = function(n, zero) {
  
  if (n == 0)
    return String.fromCharCode(zero);
  var /** @type {string} */ rslt = "";
  while (n > 0) {
    rslt = String.fromCharCode((n % 10) + zero) + rslt;
    n = (n / 10) >> 0;
  }
  return rslt;
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.arabicIndicString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0x660);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.bengaliString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0x9e6);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.devanagariString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0x966);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.gujaratiString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0xae6);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.gurmukhiString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0xa66);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.kannadaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0xce6);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.persianString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0x6f0);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.thaiString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0xe50);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.urduString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createNumericBaseTenString(n, 0x6f0);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @param {number} first
 * @param {number} base
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.createContinuousAlphaString = function(n, first, base) {
  
  var /** @type {string} */ rslt = "";
  while (n > 0) {
    rslt = String.fromCharCode(((n - 1) % base) + first) + rslt;
    n = ((n - 1) / base) >> 0;
  }
  return rslt;
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.lowerAlphaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createContinuousAlphaString(n, 0x61, 26);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.upperAlphaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createContinuousAlphaString(n, 0x41, 26);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.lowerLatinString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createContinuousAlphaString(n, 0x61, 26);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.upperLatinString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createContinuousAlphaString(n, 0x41, 26);
};


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @param {Array} table
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.createTableAlphaString = function(n, table) {
  
  var /** @type {string} */ rslt = "";
  var /** @type {number} */ base = (table.length) >> 0;
  while (n > 0) {
    rslt = String.fromCharCode(table[(n - 1) % base]) + rslt;
    n = ((n - 1) / base) >> 0;
  }
  return rslt;
};


org.apache.royale.textLayout.elements.ListElement.get__cjkEarthlyBranchData = function() {
  var value = [0x5B50, 0x4E11, 0x5BC5, 0x536F, 0x8FB0, 0x5DF3, 0x5348, 0x672A, 0x7533, 0x9149, 0x620C, 0x4EA5].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { cjkEarthlyBranchData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.cjkEarthlyBranchData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
cjkEarthlyBranchData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__cjkEarthlyBranchData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.cjkEarthlyBranchString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.cjkEarthlyBranchData);
};


org.apache.royale.textLayout.elements.ListElement.get__cjkHeavenlyStemData = function() {
  var value = [0x7532, 0x4E59, 0x4E19, 0x4E01, 0x620A, 0x5DF1, 0x5E9A, 0x8F9B, 0x58EC, 0x7678].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { cjkHeavenlyStemData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.cjkHeavenlyStemData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
cjkHeavenlyStemData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__cjkHeavenlyStemData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.cjkHeavenlyStemString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.cjkHeavenlyStemData);
};


org.apache.royale.textLayout.elements.ListElement.get__hangulData = function() {
  var value = [0xAC00, 0xB098, 0xB2E4, 0xB77C, 0xB9C8, 0xBC14, 0xC0AC, 0xC544, 0xC790, 0xCC28, 0xCE74, 0xD0C0, 0xD30C, 0xD558].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { hangulData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.hangulData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
hangulData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__hangulData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.hangulString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.hangulData);
};


org.apache.royale.textLayout.elements.ListElement.get__hangulConstantData = function() {
  var value = [0x3131, 0x3134, 0x3137, 0x3139, 0x3141, 0x3142, 0x3145, 0x3147, 0x3148, 0x314A, 0x314B, 0x314C, 0x314D, 0x314E].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { hangulConstantData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.hangulConstantData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
hangulConstantData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__hangulConstantData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.hangulConstantString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.hangulConstantData);
};


org.apache.royale.textLayout.elements.ListElement.get__hiraganaData = function() {
  var value = [0x3042, 0x3044, 0x3046, 0x3048, 0x304A, 0x304B, 0x304D, 0x304F, 0x3051, 0x3053, 0x3055, 0x3057, 0x3059, 0x305B, 0x305D, 0x305F, 0x3061, 0x3064, 0x3066, 0x3068, 0x306A, 0x306B, 0x306C, 0x306D, 0x306E, 0x306F, 0x3072, 0x3075, 0x3078, 0x307B, 0x307E, 0x307F, 0x3080, 0x3081, 0x3082, 0x3084, 0x3086, 0x3088, 0x3089, 0x308A, 0x308B, 0x308C, 0x308D, 0x308F, 0x3090, 0x3091, 0x3092, 0x3093].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { hiraganaData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.hiraganaData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
hiraganaData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__hiraganaData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.hiraganaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.hiraganaData);
};


org.apache.royale.textLayout.elements.ListElement.get__hiraganaIrohaData = function() {
  var value = [0x3044, 0x308D, 0x306F, 0x306B, 0x307B, 0x3078, 0x3068, 0x3061, 0x308A, 0x306C, 0x308B, 0x3092, 0x308F, 0x304B, 0x3088, 0x305F, 0x308C, 0x305D, 0x3064, 0x306D, 0x306A, 0x3089, 0x3080, 0x3046, 0x3090, 0x306E, 0x304A, 0x304F, 0x3084, 0x307E, 0x3051, 0x3075, 0x3053, 0x3048, 0x3066, 0x3042, 0x3055, 0x304D, 0x3086, 0x3081, 0x307F, 0x3057, 0x3091, 0x3072, 0x3082, 0x305B, 0x3059].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { hiraganaIrohaData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.hiraganaIrohaData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
hiraganaIrohaData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__hiraganaIrohaData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.hiraganaIrohaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.hiraganaIrohaData);
};


org.apache.royale.textLayout.elements.ListElement.get__katakanaData = function() {
  var value = [0x30A2, 0x30A4, 0x30A6, 0x30A8, 0x30AA, 0x30AB, 0x30AD, 0x30AF, 0x30B1, 0x30B3, 0x30B5, 0x30B7, 0x30B9, 0x30BB, 0x30BD, 0x30BF, 0x30C1, 0x30C4, 0x30C6, 0x30C8, 0x30CA, 0x30CB, 0x30CC, 0x30CD, 0x30CE, 0x30CF, 0x30D2, 0x30D5, 0x30D8, 0x30DB, 0x30DE, 0x30DF, 0x30E0, 0x30E1, 0x30E2, 0x30E4, 0x30E6, 0x30E8, 0x30E9, 0x30EA, 0x30EB, 0x30EC, 0x30ED, 0x30EF, 0x30F0, 0x30F1, 0x30F2, 0x30F3].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { katakanaData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.katakanaData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
katakanaData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__katakanaData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.katakanaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.katakanaData);
};


org.apache.royale.textLayout.elements.ListElement.get__katakanaIrohaData = function() {
  var value = [0x30A4, 0x30ED, 0x30CF, 0x30CB, 0x30DB, 0x30D8, 0x30C8, 0x30C1, 0x30EA, 0x30CC, 0x30EB, 0x30F2, 0x30EF, 0x30AB, 0x30E8, 0x30BF, 0x30EC, 0x30BD, 0x30C4, 0x30CD, 0x30CA, 0x30E9, 0x30E0, 0x30A6, 0x30F0, 0x30CE, 0x30AA, 0x30AF, 0x30E4, 0x30DE, 0x30B1, 0x30D5, 0x30B3, 0x30A8, 0x30C6, 0x30A2, 0x30B5, 0x30AD, 0x30E6, 0x30E1, 0x30DF, 0x30B7, 0x30F1, 0x30D2, 0x30E2, 0x30BB, 0x30B9].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { katakanaIrohaData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.katakanaIrohaData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
katakanaIrohaData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__katakanaIrohaData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.katakanaIrohaString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.katakanaIrohaData);
};


org.apache.royale.textLayout.elements.ListElement.get__lowerGreekData = function() {
  var value = [0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 0x03C0, 0x03C1, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { lowerGreekData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.lowerGreekData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
lowerGreekData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__lowerGreekData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.lowerGreekString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.lowerGreekData);
};


org.apache.royale.textLayout.elements.ListElement.get__upperGreekData = function() {
  var value = [0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 0x03A0, 0x03A1, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9].slice();
  Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, { upperGreekData: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
org.apache.royale.textLayout.elements.ListElement.upperGreekData;

Object.defineProperties(org.apache.royale.textLayout.elements.ListElement, /** @lends {org.apache.royale.textLayout.elements.ListElement} */ {
/**
 * @nocollapse
 * @const
 * @type {Array}
 */
upperGreekData: {
  get: org.apache.royale.textLayout.elements.ListElement.get__upperGreekData,
  configurable: true}});


/** @asprivate 
 * @nocollapse
 * @param {number} n
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.upperGreekString = function(n) {
  return org.apache.royale.textLayout.elements.ListElement.createTableAlphaString(n, org.apache.royale.textLayout.elements.ListElement.upperGreekData);
};


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.textLayout.elements.ListElement.algorithmicListStyles;


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.textLayout.elements.ListElement.numericListStyles;


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.textLayout.elements.ListElement.alphabeticListStyles;


/**
 * @nocollapse
 * @const
 * @type {Object}
 */
org.apache.royale.textLayout.elements.ListElement.listSuffixes = {"upperAlpha":".", "lowerAlpha":".", "upperRoman":".", "lowerRoman":".", "arabicIndic":".", "bengali":".", "decimal":".", "decimalLeadingZero":".", "devanagari":".", "gujarati":".", "gurmukhi":".", "kannada":".", "persian":".", "thai":".", "urdu":".", "cjkEarthlyBranch":".", "cjkHeavenlyStem":".", "hangul":".", "hangulConstant":".", "hiragana":".", "hiraganaIroha":".", "katakana":".", "katakanaIroha":".", "lowerGreek":".", "lowerLatin":".", "upperGreek":".", "upperLatin":"."};


/** @asprivate This function returns the string representing the list item's marker text 
 * @param {org.apache.royale.textLayout.elements.IListItemElement} child
 * @param {org.apache.royale.textLayout.formats.IListMarkerFormat} listMarkerFormat
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.prototype.computeListItemText = function(child, listMarkerFormat) {
  
  var /** @type {string} */ listStyleType;
  var /** @type {string} */ rslt;
  if (listMarkerFormat.content && listMarkerFormat.content.hasOwnProperty("counters")) {
    rslt = "";
    listStyleType = org.apache.royale.utils.Language.string(listMarkerFormat.content.ordered);
    var /** @type {string} */ suffixOverride = org.apache.royale.utils.Language.string(listMarkerFormat.content.suffix);
    var /** @type {org.apache.royale.textLayout.elements.ListElement} */ list = this;
    var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ childListMarkerFormat = listMarkerFormat;
    for (;;) {
      rslt = list.computeListItemTextSpecified(child, childListMarkerFormat, org.apache.royale.utils.Language.string(listStyleType == null ? list.computedFormat.listStyleType : listStyleType), suffixOverride) + rslt;
      child = list.getParentByType("ListItemElement");
      if (!child)
        break;
      list = child.parent;
      childListMarkerFormat = child.computedListMarkerFormat();
    }
  } else {
    if (listMarkerFormat.content !== undefined) {
      if (listMarkerFormat.content == org.apache.royale.textLayout.formats.FormatValue.NONE)
        listStyleType = org.apache.royale.textLayout.formats.ListStyleType.NONE; else {
        
        listStyleType = org.apache.royale.utils.Language.string(listMarkerFormat.content.ordered);
      }
    }
    if (listStyleType == null)
      listStyleType = org.apache.royale.utils.Language.string(this.computedFormat.listStyleType);
    rslt = this.computeListItemTextSpecified(child, listMarkerFormat, listStyleType, null);
  }
  var /** @type {string} */ beforeContent = org.apache.royale.utils.Language.string(listMarkerFormat.beforeContent ? listMarkerFormat.beforeContent : "");
  var /** @type {string} */ afterContent = org.apache.royale.utils.Language.string(listMarkerFormat.afterContent ? listMarkerFormat.afterContent : "");
  return beforeContent + rslt + afterContent;
};


/** @asprivate - does the work with a known listStyleType and optional suffixOverride. 
 * @param {org.apache.royale.textLayout.elements.IListItemElement} child
 * @param {org.apache.royale.textLayout.formats.IListMarkerFormat} listMarkerFormat
 * @param {string} listStyleType
 * @param {string} suffixOverride
 * @return {string}
 */
org.apache.royale.textLayout.elements.ListElement.prototype.computeListItemTextSpecified = function(child, listMarkerFormat, listStyleType, suffixOverride) {
  var /** @type {string} */ rslt;
  var /** @type {*} */ val = org.apache.royale.textLayout.elements.ListElement.constantListStyles[listStyleType];
  if (val !== undefined)
    rslt = val; else {
    
    var /** @type {number} */ n = child.getListItemNumber(listMarkerFormat);
    var /** @type {Function} */ f;
    f = org.apache.royale.textLayout.elements.ListElement.numericListStyles[listStyleType];
    if (f != null) {
      rslt = org.apache.royale.utils.Language.string(n < 0 ? "-" + f(-n) : f(n));
    } else if (n <= 0) {
      rslt = n == 0 ? "0" : "-" + org.apache.royale.textLayout.elements.ListElement.decimalString((-n) >> 0);
    } else {
      f = org.apache.royale.textLayout.elements.ListElement.alphabeticListStyles[listStyleType];
      if (f != null)
        rslt = org.apache.royale.utils.Language.string(f(n));
      else
        rslt = org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.ListElement.algorithmicListStyles[listStyleType](n));
    }
    if (suffixOverride != null)
      rslt += suffixOverride;
    else if (listMarkerFormat.suffix != org.apache.royale.textLayout.formats.Suffix.NONE)
      rslt += org.apache.royale.utils.Language.string(org.apache.royale.textLayout.elements.ListElement.listSuffixes[listStyleType]);
  }
  return rslt;
};


/** @asprivate 
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ListElement.prototype.isNumberedList = function() {
  return org.apache.royale.textLayout.elements.ListElement.constantListStyles[this.computedFormat.listStyleType] === undefined;
};


org.apache.royale.textLayout.elements.ListElement.prototype.get__className = function() {
  return "ListElement";
};


org.apache.royale.textLayout.elements.ListElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.ListElement.prototype.get__defaultTypeName = function() {
  return "list";
};


Object.defineProperties(org.apache.royale.textLayout.elements.ListElement.prototype, /** @lends {org.apache.royale.textLayout.elements.ListElement.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.ListElement.prototype.get__className},
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.ListElement.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.ListElement.prototype.get__defaultTypeName}}
);

org.apache.royale.textLayout.elements.ListElement.algorithmicListStyles = {"upperRoman":org.apache.royale.textLayout.elements.ListElement.upperRomanString, "lowerRoman":org.apache.royale.textLayout.elements.ListElement.lowerRomanString};
org.apache.royale.textLayout.elements.ListElement.numericListStyles = {"arabicIndic":org.apache.royale.textLayout.elements.ListElement.arabicIndicString, "bengali":org.apache.royale.textLayout.elements.ListElement.bengaliString, "decimal":org.apache.royale.textLayout.elements.ListElement.decimalString, "decimalLeadingZero":org.apache.royale.textLayout.elements.ListElement.decimalLeadingZeroString, "devanagari":org.apache.royale.textLayout.elements.ListElement.devanagariString, "gujarati":org.apache.royale.textLayout.elements.ListElement.gujaratiString, "gurmukhi":org.apache.royale.textLayout.elements.ListElement.gurmukhiString, "kannada":org.apache.royale.textLayout.elements.ListElement.kannadaString, "persian":org.apache.royale.textLayout.elements.ListElement.persianString, "thai":org.apache.royale.textLayout.elements.ListElement.thaiString, "urdu":org.apache.royale.textLayout.elements.ListElement.urduString};
org.apache.royale.textLayout.elements.ListElement.alphabeticListStyles = {"upperAlpha":org.apache.royale.textLayout.elements.ListElement.upperAlphaString, "lowerAlpha":org.apache.royale.textLayout.elements.ListElement.lowerAlphaString, "cjkEarthlyBranch":org.apache.royale.textLayout.elements.ListElement.cjkEarthlyBranchString, "cjkHeavenlyStem":org.apache.royale.textLayout.elements.ListElement.cjkHeavenlyStemString, "hangul":org.apache.royale.textLayout.elements.ListElement.hangulString, "hangulConstant":org.apache.royale.textLayout.elements.ListElement.hangulConstantString, "hiragana":org.apache.royale.textLayout.elements.ListElement.hiraganaString, "hiraganaIroha":org.apache.royale.textLayout.elements.ListElement.hiraganaIrohaString, "katakana":org.apache.royale.textLayout.elements.ListElement.katakanaString, "katakanaIroha":org.apache.royale.textLayout.elements.ListElement.katakanaIrohaString, "lowerGreek":org.apache.royale.textLayout.elements.ListElement.lowerGreekString, "lowerLatin":org.apache.royale.textLayout.elements.ListElement.lowerLatinString, "upperGreek":org.apache.royale.textLayout.elements.ListElement.upperGreekString, "upperLatin":org.apache.royale.textLayout.elements.ListElement.upperLatinString};




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.ListElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListElement', qName: 'org.apache.royale.textLayout.elements.ListElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.IListElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.ListElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'}
      };
    },
    methods: function () {
      return {
        'canOwnFlowElement': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IFlowElement', false ]; }},
        'modelChanged': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'String', false ,'org.apache.royale.textLayout.elements.IFlowElement', false ,'int', false ,'int', false ,'Boolean', true ,'Boolean', true ]; }},
        'getEffectivePaddingLeft': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'},
        'getEffectivePaddingRight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'},
        'getEffectivePaddingTop': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'},
        'getEffectivePaddingBottom': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'},
        '|createRomanString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ,'Vector.<String>', false ]; }},
        '|upperRomanString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|lowerRomanString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|decimalString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|decimalLeadingZeroString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|createNumericBaseTenString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ,'int', false ]; }},
        '|arabicIndicString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|bengaliString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|devanagariString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|gujaratiString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|gurmukhiString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|kannadaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|persianString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|thaiString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|urduString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|createContinuousAlphaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ,'int', false ,'int', false ]; }},
        '|lowerAlphaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|upperAlphaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|lowerLatinString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|upperLatinString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|createTableAlphaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ,'Vector.<int>', false ]; }},
        '|cjkEarthlyBranchString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|cjkHeavenlyStemString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|hangulString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|hangulConstantString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|hiraganaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|hiraganaIrohaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|katakanaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|katakanaIrohaString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|lowerGreekString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        '|upperGreekString': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'int', false ]; }},
        'computeListItemText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IListItemElement', false ,'org.apache.royale.textLayout.formats.IListMarkerFormat', false ]; }},
        'computeListItemTextSpecified': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.ListElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.IListItemElement', false ,'org.apache.royale.textLayout.formats.IListMarkerFormat', false ,'String', false ,'String', false ]; }},
        'isNumberedList': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ListElement'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ListElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ListElement.js.map
