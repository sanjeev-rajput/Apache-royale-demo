/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/InlineGraphicElement.as
 * org.apache.royale.textLayout.elements.InlineGraphicElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.InlineGraphicElement');
/* Royale Dependency List: org.apache.royale.core.IParentIUIBase,org.apache.royale.core.IUIBase,org.apache.royale.core.UIBase,org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ElementFormat,org.apache.royale.text.engine.GraphicElement,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.engine.TextBaseline,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.elements.IFlowElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.InlineGraphicElementStatus,org.apache.royale.textLayout.events.ModelChange,org.apache.royale.textLayout.events.StatusChangeEvent,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.Float,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.property.Property,org.apache.royale.textLayout.property.PropertyFactory,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.FlowLeafElement');
goog.require('org.apache.royale.textLayout.elements.IInlineGraphicElement');



/** Constructor - create new InlineGraphicElement object
 *
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.FlowLeafElement}
 * @implements {org.apache.royale.textLayout.elements.IInlineGraphicElement}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement = function() {
  org.apache.royale.textLayout.elements.InlineGraphicElement.base(this, 'constructor');
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_okToUpdateHeightAndWidth = false;
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth = 0;
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight = 0;
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalSetWidth(undefined);
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalSetHeight(undefined);
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__graphicStatus = org.apache.royale.textLayout.elements.InlineGraphicElementStatus.LOAD_PENDING;
  this.setTextLength(1);
  this._text = org.apache.royale.textLayout.elements.InlineGraphicElement.graphicElementText;
};
goog.inherits(org.apache.royale.textLayout.elements.InlineGraphicElement, org.apache.royale.textLayout.elements.FlowLeafElement);


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__source;


/**
 * @private
 * @type {org.apache.royale.core.IUIBase}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__graphic;


/**
 * @private
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__placeholderGraphic;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__elementWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__elementHeight;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__graphicStatus;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_okToUpdateHeightAndWidth;


/**
 * @private
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__width;


/**
 * @private
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__height;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth;


/**
 * @private
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight;


/**
 * @private
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__float;


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.graphicElementText = "FDEF";


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.createContentElement = function() {
  if (this._blockElement)
    return;
  this.calculateComputedFormat();
  var /** @type {org.apache.royale.text.engine.GraphicElement} */ graphicElement = new org.apache.royale.text.engine.GraphicElement();
  this._blockElement = graphicElement;
  
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_updateContentElement();
  org.apache.royale.textLayout.elements.InlineGraphicElement.superClass_.createContentElement.apply(this);
};


/**
 * @private
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_updateContentElement = function() {
  var /** @type {org.apache.royale.text.engine.GraphicElement} */ graphicElement = this._blockElement;
  
  if (!this.org_apache_royale_textLayout_elements_InlineGraphicElement__placeholderGraphic)
    this.org_apache_royale_textLayout_elements_InlineGraphicElement__placeholderGraphic = new org.apache.royale.core.UIBase();
  graphicElement.graphic = this.org_apache_royale_textLayout_elements_InlineGraphicElement__placeholderGraphic;
  if (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE) {
    if (graphicElement.elementHeight != 0)
      graphicElement.elementHeight = 0;
    if (graphicElement.elementWidth != 0)
      graphicElement.elementWidth = 0;
  } else {
    var /** @type {number} */ height = this.elementHeightWithMarginsAndPadding();
    if (graphicElement.elementHeight != height)
      graphicElement.elementHeight = height;
    var /** @type {number} */ width = this.elementWidthWithMarginsAndPadding();
    if (graphicElement.elementWidth != width)
      graphicElement.elementWidth = width;
  }
  
  
  
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.elementWidthWithMarginsAndPadding = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = this.getTextFlow();
  if (!textFlow)
    return this.elementWidth;
  var /** @type {number} */ paddingAmount = textFlow.computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? this.getEffectivePaddingTop() + this.getEffectivePaddingBottom() : this.getEffectivePaddingLeft() + this.getEffectivePaddingRight();
  return this.elementWidth + paddingAmount;
};


/** @asprivate 
 * @return {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.elementHeightWithMarginsAndPadding = function() {
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ textFlow = this.getTextFlow();
  if (!textFlow)
    return this.elementHeight;
  var /** @type {number} */ paddingAmount = textFlow.computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL ? this.getEffectivePaddingLeft() + this.getEffectivePaddingRight() : this.getEffectivePaddingTop() + this.getEffectivePaddingBottom();
  return this.elementHeight + paddingAmount;
};


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.LOAD_INITIATED = "loadInitiated";


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.OPEN_RECEIVED = "openReceived";


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.LOAD_COMPLETE = "loadComplete";


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.EMBED_LOADED = "embedLoaded";


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.DISPLAY_OBJECT = "displayObject";


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.NULL_GRAPHIC = "nullGraphic";


/**
 * @private
 * @param {org.apache.royale.core.IUIBase} value
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_setGraphic = function(value) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__graphic = value;
};


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement._heightPropertyDefinition;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement._widthPropertyDefinition;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement._rotationPropertyDefinition;


/**
 * @private
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement._floatPropertyDefinition;


/** @asprivate
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.getText = function(relativeStart, relativeEnd, paragraphSeparator) {
  relativeStart = typeof relativeStart !== 'undefined' ? relativeStart : 0;
  relativeEnd = typeof relativeEnd !== 'undefined' ? relativeEnd : -1;
  paragraphSeparator = typeof paragraphSeparator !== 'undefined' ? paragraphSeparator : "\n";
  if (relativeEnd == -1)
    relativeEnd = this.textLength;
  return this._text ? this._text.substring(relativeStart, relativeEnd) : "";
};


/**
 * @private
 * @param {Object} stat
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_changeGraphicStatus = function(stat) {
  var /** @type {string} */ oldStatus = this.status;
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__graphicStatus = stat;
  var /** @type {string} */ newStatus = this.status;
  if (oldStatus != newStatus) {
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
    if (tf) {
      if (newStatus == org.apache.royale.textLayout.elements.InlineGraphicElementStatus.SIZE_PENDING)
        tf.processAutoSizeImageLoaded(this);
      tf.dispatchEvent(new org.apache.royale.textLayout.events.StatusChangeEvent(org.apache.royale.textLayout.events.StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE, false, false, this, newStatus));
    }
  }
};


/**
 * @private
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_widthIsComputed = function() {
  return org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth, String);
};


/**
 * @private
 * @return {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_computeWidth = function() {
  
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth == "auto") {
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight == "auto")
      return this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth;
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight == 0 || this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth == 0)
      return 0;
    var /** @type {number} */ effHeight = this.org_apache_royale_textLayout_elements_InlineGraphicElement_heightIsComputed() ? this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeHeight() : Number(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight);
    return effHeight / this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight * this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth;
  }
  return org.apache.royale.textLayout.elements.InlineGraphicElement.widthPropertyDefinition.computeActualPropertyValue(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth, this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth);
};


/**
 * @private
 * @param {*} w
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_internalSetWidth = function(w) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__width = org.apache.royale.textLayout.elements.InlineGraphicElement.widthPropertyDefinition.setHelper(this.width, w);
  this.elementWidth = this.org_apache_royale_textLayout_elements_InlineGraphicElement_widthIsComputed() ? 0 : Number(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth);
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_okToUpdateHeightAndWidth && this.graphic) {
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_widthIsComputed())
      this.elementWidth = this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeWidth();
    this.graphic.width = this.elementWidth;
    
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight == "auto") {
      this.elementHeight = this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeHeight();
      this.graphic.height = this.elementHeight;
      
    }
  }
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement__effectiveFloat;


/** @asprivate 
 * @param {string} floatValue
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.setEffectiveFloat = function(floatValue) {
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement__effectiveFloat != floatValue) {
    this.org_apache_royale_textLayout_elements_InlineGraphicElement__effectiveFloat = floatValue;
    if (this._blockElement)
      this.org_apache_royale_textLayout_elements_InlineGraphicElement_updateContentElement();
  }
};


/**
 * @private
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_heightIsComputed = function() {
  return org.apache.royale.utils.Language.is(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight, String);
};


/**
 * @private
 * @return {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_computeHeight = function() {
  
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight == "auto") {
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth == "auto")
      return this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight;
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight == 0 || this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth == 0)
      return 0;
    var /** @type {number} */ effWidth = this.org_apache_royale_textLayout_elements_InlineGraphicElement_widthIsComputed() ? this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeWidth() : Number(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth);
    return effWidth / this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth * this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight;
  }
  return org.apache.royale.textLayout.elements.InlineGraphicElement.heightPropertyDefinition.computeActualPropertyValue(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight, this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight);
};


/**
 * @private
 * @param {*} h
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_internalSetHeight = function(h) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__height = org.apache.royale.textLayout.elements.InlineGraphicElement.heightPropertyDefinition.setHelper(this.height, h);
  this.elementHeight = this.org_apache_royale_textLayout_elements_InlineGraphicElement_heightIsComputed() ? 0 : Number(this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight);
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_okToUpdateHeightAndWidth && this.graphic != null) {
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_heightIsComputed())
      this.elementHeight = this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeHeight();
    this.graphic.height = this.elementHeight;
    
    if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth == "auto") {
      this.elementWidth = this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeWidth();
      this.graphic.width = this.elementWidth;
      
    }
  }
};


/** @asprivate This method starts and stops ILGs.  Generally TLF delays starting an ILG until the first compose.  It shuts them down when they
 * are deleted from the TextFlow or the TextFlow has its flowComposer removed.  Some cases are ambigious, for example removeAllControllers doesn't stop ILGs
 * but the client may desire it too.  In cases where ILGs don't get stopped or started there are two public functions on TextFlow:
 * unloadGraphics - unloads and stops all ILGs
 * prepareGraphicsForLoad - puts all ILGs that are not loaded in a list so that they are loaded on the next compose.
 * This function is also called when an auto-size or percentage sized graphic is loaded.  In that case the same list as prepareGraphicsForLoad is used.
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.applyDelayedElementUpdate = function(textFlow, okToUnloadGraphics, hasController) {
  if (textFlow != this.getTextFlow())
    hasController = false;
};


/** @asprivate This API supports the inputmanager 
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.updateForMustUseComposer = function(textFlow) {
  this.applyDelayedElementUpdate(textFlow, false, true);
  return this.status != org.apache.royale.textLayout.elements.InlineGraphicElementStatus.READY;
};


/** This function updates the size of the graphic element when the size is expressed as a percentage of the graphic's actual size. 
 * @private
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_updateAutoSizes = function() {
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_widthIsComputed()) {
    this.elementWidth = this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeWidth();
    this.graphic.width = this.elementWidth;
  }
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement_heightIsComputed()) {
    this.elementHeight = this.org_apache_royale_textLayout_elements_InlineGraphicElement_computeHeight();
    this.graphic.height = this.elementHeight;
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.getEffectiveFontSize = function() {
  if (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE)
    return 0;
  var /** @type {number} */ defaultLeading = org.apache.royale.textLayout.elements.InlineGraphicElement.superClass_.getEffectiveFontSize.apply(this);
  return Math.max(defaultLeading, this.elementHeightWithMarginsAndPadding());
};


/** Returns the calculated lineHeight from this element's properties.  @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.getEffectiveLineHeight = function(blockProgression) {
  if (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE)
    return 0;
  return org.apache.royale.textLayout.elements.InlineGraphicElement.superClass_.getEffectiveLineHeight.apply(this, [blockProgression]);
};


/** Returns the typographic ascent of the image (i.e. relative to the line's Roman baseline). @asprivate 
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @return {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.getTypographicAscent = function(textLine) {
  if (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE)
    return 0;
  var /** @type {number} */ effectiveHeight = this.elementHeightWithMarginsAndPadding();
  var /** @type {string} */ dominantBaselineString;
  if (this._computedFormat.dominantBaseline != "auto") {
    dominantBaselineString = org.apache.royale.utils.Language.string(this._computedFormat.dominantBaseline);
  } else {
    dominantBaselineString = this.getParagraph().getEffectiveDominantBaseline();
  }
  var /** @type {org.apache.royale.text.engine.ElementFormat} */ elementFormat = this._blockElement ? this._blockElement.elementFormat : this.computeElementFormat();
  var /** @type {string} */ alignmentBaseline = (elementFormat.alignmentBaseline == org.apache.royale.text.engine.TextBaseline.USE_DOMINANT_BASELINE ? dominantBaselineString : elementFormat.alignmentBaseline);
  var /** @type {number} */ top = 0;
  if (dominantBaselineString == org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_CENTER)
    top += effectiveHeight / 2;
  else if (dominantBaselineString == org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM || dominantBaselineString == org.apache.royale.text.engine.TextBaseline.DESCENT || dominantBaselineString == org.apache.royale.text.engine.TextBaseline.ROMAN)
    top += effectiveHeight;
  top += textLine.getBaselinePosition(org.apache.royale.text.engine.TextBaseline.ROMAN) - textLine.getBaselinePosition(alignmentBaseline);
  top += elementFormat.baselineShift;
  return top;
};


/** @asprivate 
 * Get the "inline box" for the element as defined by the CSS visual formatting model (http://www.w3.org/TR/CSS2/visuren.html)
 * For an inline graphic, lineHeight is ignored. The box dimensions are governed by the element height with padding. 
 * Alignment relative to the baseline (using baselineShift, dominantBaseline, alignmentBaseline) is taken into account.
 * @asreturn Null if the element is not "inline" (i.e., is a float). Otherwise, a rectangle representing the inline box. 
 * Top and Bottom are relative to the line's Roman baseline. Left and Right are ignored.
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.getCSSInlineBox = function(blockProgression, textLine, para, swfContext) {
  para = typeof para !== 'undefined' ? para : null;
  swfContext = typeof swfContext !== 'undefined' ? swfContext : null;
  if (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE)
    return null;
  var /** @type {org.apache.royale.geom.Rectangle} */ inlineBox = new org.apache.royale.geom.Rectangle();
  inlineBox.top = -this.getTypographicAscent(textLine);
  inlineBox.height = this.elementHeightWithMarginsAndPadding();
  inlineBox.width = this.elementWidth;
  return inlineBox;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.shallowCopy = function(startPos, endPos) {
  startPos = typeof startPos !== 'undefined' ? startPos : 0;
  endPos = typeof endPos !== 'undefined' ? endPos : -1;
  if (endPos == -1)
    endPos = this.textLength;
  var /** @type {org.apache.royale.textLayout.elements.InlineGraphicElement} */ retFlow = org.apache.royale.textLayout.elements.InlineGraphicElement.superClass_.shallowCopy.apply(this, [startPos, endPos]);
  retFlow.source = this.source;
  retFlow.width = this.width;
  retFlow.height = this.height;
  retFlow.float = this.float;
  return retFlow;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.appendElementsForDelayedUpdate = function(tf, changeType) {
  if (changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_ADDED)
    tf.incGraphicObjectCount();
  else if (changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL)
    tf.decGraphicObjectCount();
  if (this.status != org.apache.royale.textLayout.elements.InlineGraphicElementStatus.READY || changeType == org.apache.royale.textLayout.events.ModelChange.ELEMENT_REMOVAL)
    tf.appendOneElementForUpdate(this);
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__className = function() {
  return "InlineGraphicElement";
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__computedFormat = function() {
  var /** @type {boolean} */ updateGraphicElement = this._computedFormat == null;
  org.apache.royale.textLayout.elements.InlineGraphicElement.superClass_.get__computedFormat.apply(this);
  if (updateGraphicElement && this._blockElement)
    this.org_apache_royale_textLayout_elements_InlineGraphicElement_updateContentElement();
  return this._computedFormat;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IUIBase}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.graphic;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__graphic = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__graphic;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IParentIUIBase}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.placeholderGraphic;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__placeholderGraphic = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__placeholderGraphic;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.elementWidth;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__elementWidth = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__elementWidth;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__elementWidth = function(value) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__elementWidth = value;
  if (this._blockElement) {
    this._blockElement.elementWidth = (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE) ? 0 : this.elementWidthWithMarginsAndPadding();
    
  }
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength, true, false);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.elementHeight;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__elementHeight = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__elementHeight;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__elementHeight = function(value) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__elementHeight = value;
  if (this._blockElement) {
    this._blockElement.elementHeight = (this.effectiveFloat != org.apache.royale.textLayout.formats.Float.NONE) ? 0 : this.elementHeightWithMarginsAndPadding();
    
  }
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength, true, false);
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.status;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__status = function() {
  switch (this.org_apache_royale_textLayout_elements_InlineGraphicElement__graphicStatus) {
    case org.apache.royale.textLayout.elements.InlineGraphicElement.LOAD_INITIATED:
    
    case org.apache.royale.textLayout.elements.InlineGraphicElement.OPEN_RECEIVED:
      return org.apache.royale.textLayout.elements.InlineGraphicElementStatus.LOADING;
    case org.apache.royale.textLayout.elements.InlineGraphicElement.LOAD_COMPLETE:
    
    case org.apache.royale.textLayout.elements.InlineGraphicElement.EMBED_LOADED:
    
    case org.apache.royale.textLayout.elements.InlineGraphicElement.DISPLAY_OBJECT:
    
    case org.apache.royale.textLayout.elements.InlineGraphicElement.NULL_GRAPHIC:
      return org.apache.royale.textLayout.elements.InlineGraphicElementStatus.READY;
    case org.apache.royale.textLayout.elements.InlineGraphicElementStatus.LOAD_PENDING:
    
    case org.apache.royale.textLayout.elements.InlineGraphicElementStatus.SIZE_PENDING:
      return String(this.org_apache_royale_textLayout_elements_InlineGraphicElement__graphicStatus);
  }
  return org.apache.royale.textLayout.elements.InlineGraphicElementStatus.ERROR;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.width;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__width = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__width;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__width = function(w) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalSetWidth(w);
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.measuredWidth;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__measuredWidth = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredWidth;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.actualWidth;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__actualWidth = function() {
  return this.elementWidth;
};


/**
 * @type {Object}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__width === undefined ? org.apache.royale.textLayout.elements.InlineGraphicElement.widthPropertyDefinition.defaultValue : this.org_apache_royale_textLayout_elements_InlineGraphicElement__width;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.height;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__height = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__height;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__height = function(h) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_internalSetHeight(h);
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength);
};


/**
 * @type {Object}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__height === undefined ? org.apache.royale.textLayout.elements.InlineGraphicElement.heightPropertyDefinition.defaultValue : this.org_apache_royale_textLayout_elements_InlineGraphicElement__height;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.computedFloat;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__computedFloat = function() {
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement__float === undefined)
    return org.apache.royale.textLayout.elements.InlineGraphicElement.floatPropertyDefinition.defaultValue;
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__float;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.effectiveFloat;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__effectiveFloat = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__effectiveFloat ? this.org_apache_royale_textLayout_elements_InlineGraphicElement__effectiveFloat : this.computedFloat;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.float;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__float = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__float;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__float = function(value) {
  value = org.apache.royale.textLayout.elements.InlineGraphicElement.floatPropertyDefinition.setHelper(this.float, value);
  if (this.org_apache_royale_textLayout_elements_InlineGraphicElement__float != value) {
    this.org_apache_royale_textLayout_elements_InlineGraphicElement__float = value;
    if (this._blockElement)
      this.org_apache_royale_textLayout_elements_InlineGraphicElement_updateContentElement();
    this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength);
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.measuredHeight;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__measuredHeight = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__measuredHeight;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.actualHeight;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__actualHeight = function() {
  return this.elementHeight;
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.source;


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__source = function() {
  return this.org_apache_royale_textLayout_elements_InlineGraphicElement__source;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__source = function(value) {
  this.org_apache_royale_textLayout_elements_InlineGraphicElement__source = value;
  this.org_apache_royale_textLayout_elements_InlineGraphicElement_changeGraphicStatus(org.apache.royale.textLayout.elements.InlineGraphicElementStatus.LOAD_PENDING);
  this.modelChanged(org.apache.royale.textLayout.events.ModelChange.ELEMENT_MODIFIED, this, 0, this.textLength);
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__defaultTypeName = function() {
  return "img";
};


Object.defineProperties(org.apache.royale.textLayout.elements.InlineGraphicElement.prototype, /** @lends {org.apache.royale.textLayout.elements.InlineGraphicElement.prototype} */ {
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__className},
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
computedFormat: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__computedFormat},
/**
 * @type {org.apache.royale.core.IUIBase}
 */
graphic: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__graphic},
/**
 * @type {org.apache.royale.core.IParentIUIBase}
 */
placeholderGraphic: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__placeholderGraphic},
/**
 * @type {number}
 */
elementWidth: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__elementWidth,
set: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__elementWidth},
/**
 * @type {number}
 */
elementHeight: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__elementHeight,
set: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__elementHeight},
/**
 * @type {string}
 */
status: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__status},
/**
 * @type {*}
 */
width: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__width,
set: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__width},
/**
 * @type {number}
 */
measuredWidth: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__measuredWidth},
/**
 * @type {number}
 */
actualWidth: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__actualWidth},
/**
 * @type {Object}
 */
org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__org_apache_royale_textLayout_elements_InlineGraphicElement_internalWidth},
/**
 * @type {*}
 */
height: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__height,
set: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__height},
/**
 * @type {Object}
 */
org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__org_apache_royale_textLayout_elements_InlineGraphicElement_internalHeight},
/**
 * @type {*}
 */
computedFloat: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__computedFloat},
/**
 * @type {*}
 */
effectiveFloat: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__effectiveFloat},
/**
 * @type {*}
 */
float: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__float,
set: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__float},
/**
 * @type {number}
 */
measuredHeight: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__measuredHeight},
/**
 * @type {number}
 */
actualHeight: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__actualHeight},
/**
 * @type {Object}
 */
source: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__source,
set: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.set__source},
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.get__defaultTypeName}}
);


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.heightPropertyDefinition;


org.apache.royale.textLayout.elements.InlineGraphicElement.get__heightPropertyDefinition = function() {
  if (org.apache.royale.textLayout.elements.InlineGraphicElement._heightPropertyDefinition == null)
    org.apache.royale.textLayout.elements.InlineGraphicElement._heightPropertyDefinition = org.apache.royale.textLayout.property.PropertyFactory.numPercentEnum("height", "auto", false, null, 0, 32000, "0%", "1000000%", "auto");
  return org.apache.royale.textLayout.elements.InlineGraphicElement._heightPropertyDefinition;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.widthPropertyDefinition;


org.apache.royale.textLayout.elements.InlineGraphicElement.get__widthPropertyDefinition = function() {
  if (org.apache.royale.textLayout.elements.InlineGraphicElement._widthPropertyDefinition == null)
    org.apache.royale.textLayout.elements.InlineGraphicElement._widthPropertyDefinition = org.apache.royale.textLayout.property.PropertyFactory.numPercentEnum("width", "auto", false, null, 0, 32000, "0%", "1000000%", "auto");
  return org.apache.royale.textLayout.elements.InlineGraphicElement._widthPropertyDefinition;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.rotationPropertyDefinition;


org.apache.royale.textLayout.elements.InlineGraphicElement.get__rotationPropertyDefinition = function() {
  if (org.apache.royale.textLayout.elements.InlineGraphicElement._rotationPropertyDefinition == null)
    org.apache.royale.textLayout.elements.InlineGraphicElement._rotationPropertyDefinition = org.apache.royale.textLayout.property.PropertyFactory.enumString("rotation", "rotate0", false, null, "rotate0", "rotate90", "rotate180", "rotate270");
  return org.apache.royale.textLayout.elements.InlineGraphicElement._rotationPropertyDefinition;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.property.Property}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.floatPropertyDefinition;


org.apache.royale.textLayout.elements.InlineGraphicElement.get__floatPropertyDefinition = function() {
  if (org.apache.royale.textLayout.elements.InlineGraphicElement._floatPropertyDefinition == null)
    org.apache.royale.textLayout.elements.InlineGraphicElement._floatPropertyDefinition = org.apache.royale.textLayout.property.PropertyFactory.enumString("float", "none", false, null, "none", "left", "right", "start", "end");
  return org.apache.royale.textLayout.elements.InlineGraphicElement._floatPropertyDefinition;
};


Object.defineProperties(org.apache.royale.textLayout.elements.InlineGraphicElement, /** @lends {org.apache.royale.textLayout.elements.InlineGraphicElement} */ {
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
heightPropertyDefinition: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.get__heightPropertyDefinition},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
widthPropertyDefinition: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.get__widthPropertyDefinition},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
rotationPropertyDefinition: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.get__rotationPropertyDefinition},
/**
 * @type {org.apache.royale.textLayout.property.Property}
 */
floatPropertyDefinition: {
get: org.apache.royale.textLayout.elements.InlineGraphicElement.get__floatPropertyDefinition}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'InlineGraphicElement', qName: 'org.apache.royale.textLayout.elements.InlineGraphicElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.IInlineGraphicElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'computedFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'graphic': { type: 'org.apache.royale.core.IUIBase', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'placeholderGraphic': { type: 'org.apache.royale.core.IParentIUIBase', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'elementWidth': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'elementHeight': { type: 'Number', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        '|heightPropertyDefinition': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        '|widthPropertyDefinition': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        '|rotationPropertyDefinition': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        '|floatPropertyDefinition': { type: 'org.apache.royale.textLayout.property.Property', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'status': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'width': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'measuredWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'actualWidth': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'height': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'computedFloat': { type: '*', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'effectiveFloat': { type: '*', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'float': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'measuredHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'actualHeight': { type: 'Number', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'source': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'}
      };
    },
    methods: function () {
      return {
        'InlineGraphicElement': { type: '', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'createContentElement': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'elementWidthWithMarginsAndPadding': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'elementHeightWithMarginsAndPadding': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'getText': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'int', true ,'int', true ,'String', true ]; }},
        'setEffectiveFloat': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'String', false ]; }},
        'applyDelayedElementUpdate': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'Boolean', false ,'Boolean', false ]; }},
        'updateForMustUseComposer': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ]; }},
        'getEffectiveFontSize': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement'},
        'getEffectiveLineHeight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'String', false ]; }},
        'getTypographicAscent': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'org.apache.royale.text.engine.ITextLine', false ]; }},
        'getCSSInlineBox': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'String', false ,'org.apache.royale.text.engine.ITextLine', false ,'org.apache.royale.textLayout.elements.IParagraphElement', true ,'org.apache.royale.textLayout.compose.ISWFContext', true ]; }},
        'shallowCopy': { type: 'org.apache.royale.textLayout.elements.IFlowElement', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'int', true ,'int', true ]; }},
        'appendElementsForDelayedUpdate': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.InlineGraphicElement', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.InlineGraphicElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./InlineGraphicElement.js.map
