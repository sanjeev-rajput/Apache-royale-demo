/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/ListItemElement.as
 * org.apache.royale.textLayout.elements.ListItemElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.ListItemElement');
/* Royale Dependency List: org.apache.royale.textLayout.elements.ElementHelper,org.apache.royale.textLayout.elements.IDivElement,org.apache.royale.textLayout.elements.IFlowGroupElement,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.formats.BlockProgression,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.IListMarkerFormat,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.textLayout.elements.ContainerFormattedElement');
goog.require('org.apache.royale.textLayout.elements.IListItemElement');



/**
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.ContainerFormattedElement}
 * @implements {org.apache.royale.textLayout.elements.IListItemElement}
 */
org.apache.royale.textLayout.elements.ListItemElement = function() {
  org.apache.royale.textLayout.elements.ListItemElement.base(this, 'constructor');

this._listNumberHint = this.org_apache_royale_textLayout_elements_ListItemElement_MAX_VALUE;
};
goog.inherits(org.apache.royale.textLayout.elements.ListItemElement, org.apache.royale.textLayout.elements.ContainerFormattedElement);


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.org_apache_royale_textLayout_elements_ListItemElement_MAX_VALUE = 2147483647;


/**
 * @type {number}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype._listNumberHint;


/** @asprivate - make more efficient? save and damage results as need be 
 * @return {org.apache.royale.textLayout.formats.IListMarkerFormat}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.computedListMarkerFormat = function() {
  var /** @type {org.apache.royale.textLayout.formats.IListMarkerFormat} */ format = this.getUserStyleWorker("ListMarkerFormat");
  if (format == null) {
    var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = this.getTextFlow();
    if (tf)
      format = tf.configuration.defaultListMarkerFormat;
  }
  return format;
};


/**
 *  @asprivate ListItems must begin with zero or more divs with a paragraph
 * @royaleignorecoercion org.apache.royale.textLayout.elements.IFlowGroupElement
 * @return {boolean}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.normalizeNeedsInitialParagraph = function() {
  var /** @type {Object} */ p = this;
  while (p) {
    p = p.getChildAt(0);
    if (org.apache.royale.utils.Language.is(p, org.apache.royale.textLayout.elements.IParagraphElement))
      return false;
    if (!org.apache.royale.utils.Language.is(p, org.apache.royale.textLayout.elements.IDivElement))
      return true;
  }
  return true;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.normalizeRange = function(normalizeStart, normalizeEnd) {
  org.apache.royale.textLayout.elements.ListItemElement.superClass_.normalizeRange.apply(this, [normalizeStart, normalizeEnd]);
  this._listNumberHint = this.org_apache_royale_textLayout_elements_ListItemElement_MAX_VALUE;
  if (this.normalizeNeedsInitialParagraph()) {
    var /** @type {org.apache.royale.textLayout.elements.IParagraphElement} */ p = org.apache.royale.textLayout.elements.ElementHelper.getParagraph();
    this.replaceChildren(0, 0, p);
    p.normalizeRange(0, (p.textLength) >>> 0);
  }
};


/** @asprivate 
 * @param {org.apache.royale.textLayout.formats.IListMarkerFormat=} listMarkerFormat
 * @return {number}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.getListItemNumber = function(listMarkerFormat) {
  listMarkerFormat = typeof listMarkerFormat !== 'undefined' ? listMarkerFormat : null;
  
  if (this._listNumberHint == this.org_apache_royale_textLayout_elements_ListItemElement_MAX_VALUE) {
    if (listMarkerFormat == null)
      listMarkerFormat = this.computedListMarkerFormat();
    var /** @type {Object} */ counterReset = listMarkerFormat.counterReset;
    if (counterReset && counterReset.hasOwnProperty("ordered"))
      this._listNumberHint = (counterReset.ordered) >> 0; else {
      var /** @type {number} */ idx = this.parent.getChildIndex(this);
      this._listNumberHint = 0;
      while (idx > 0) {
        idx--;
        var /** @type {org.apache.royale.textLayout.elements.ListItemElement} */ sibling = this.parent.getChildAt(idx);
        if (sibling) {
          this._listNumberHint = sibling.getListItemNumber();
          break;
        }
      }
    }
    var /** @type {Object} */ counterIncrement = listMarkerFormat.counterIncrement;
    this._listNumberHint += ((counterIncrement && counterIncrement.hasOwnProperty("ordered")) ? counterIncrement.ordered : 1) >> 0;
  }
  return this._listNumberHint;
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.getEffectivePaddingLeft = function() {
  if (this.getTextFlow().computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    if (this.computedFormat.paddingLeft == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return 0;
    } else {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.paddingLeft + this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return Number(this.computedFormat.paddingLeft);
    }
  } else {
    return 0;
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.getEffectivePaddingTop = function() {
  if (this.getTextFlow().computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (this.computedFormat.paddingTop == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return 0;
    } else {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.paddingTop + this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return Number(this.computedFormat.paddingTop);
    }
  } else {
    return 0;
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.getEffectivePaddingRight = function() {
  if (this.getTextFlow().computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.TB) {
    if (this.computedFormat.paddingRight == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return 0;
    } else {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.paddingRight + this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return Number(this.computedFormat.paddingRight);
    }
  } else {
    return 0;
  }
};


/** @asprivate 
 * @override
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.getEffectivePaddingBottom = function() {
  if (this.getTextFlow().computedFormat.blockProgression == org.apache.royale.textLayout.formats.BlockProgression.RL) {
    if (this.computedFormat.paddingBottom == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return 0;
    } else {
      if (this.computedFormat.listMarkerFormat !== undefined && this.computedFormat.listMarkerFormat.paragraphStartIndent !== undefined) {
        return Number(this.computedFormat.paddingBottom + this.computedFormat.listMarkerFormat.paragraphStartIndent);
      }
      return Number(this.computedFormat.paddingBottom);
    }
  } else {
    return 0;
  }
};


org.apache.royale.textLayout.elements.ListItemElement.prototype.get__abstract = function() {
  return false;
};


org.apache.royale.textLayout.elements.ListItemElement.prototype.get__defaultTypeName = function() {
  return "li";
};


org.apache.royale.textLayout.elements.ListItemElement.prototype.get__className = function() {
  return "ListItemElement";
};


Object.defineProperties(org.apache.royale.textLayout.elements.ListItemElement.prototype, /** @lends {org.apache.royale.textLayout.elements.ListItemElement.prototype} */ {
/**
 * @type {boolean}
 */
abstract: {
get: org.apache.royale.textLayout.elements.ListItemElement.prototype.get__abstract},
/**
 * @type {string}
 */
defaultTypeName: {
get: org.apache.royale.textLayout.elements.ListItemElement.prototype.get__defaultTypeName},
/**
 * @type {string}
 */
className: {
get: org.apache.royale.textLayout.elements.ListItemElement.prototype.get__className}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListItemElement', qName: 'org.apache.royale.textLayout.elements.ListItemElement', kind: 'class' }], interfaces: [org.apache.royale.textLayout.elements.IListItemElement] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '_listNumberHint': { type: 'int', get_set: function (/** org.apache.royale.textLayout.elements.ListItemElement */ inst, /** * */ v) {return v !== undefined ? inst._listNumberHint = v : inst._listNumberHint;}}
      };
    },
    accessors: function () {
      return {
        'defaultTypeName': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'},
        'className': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'}
      };
    },
    methods: function () {
      return {
        'computedListMarkerFormat': { type: 'org.apache.royale.textLayout.formats.IListMarkerFormat', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'},
        'normalizeNeedsInitialParagraph': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'},
        'normalizeRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement', parameters: function () { return [ 'uint', false ,'uint', false ]; }},
        'getListItemNumber': { type: 'int', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement', parameters: function () { return [ 'org.apache.royale.textLayout.formats.IListMarkerFormat', true ]; }},
        'getEffectivePaddingLeft': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'},
        'getEffectivePaddingTop': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'},
        'getEffectivePaddingRight': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'},
        'getEffectivePaddingBottom': { type: 'Number', declaredBy: 'org.apache.royale.textLayout.elements.ListItemElement'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.ListItemElement.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ListItemElement.js.map
