/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/elements/utils/GeometricElementUtils.as
 * org.apache.royale.textLayout.elements.utils.GeometricElementUtils
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.elements.utils.GeometricElementUtils');
/* Royale Dependency List: org.apache.royale.geom.Rectangle,org.apache.royale.text.engine.ElementFormat,org.apache.royale.text.engine.FontDescription,org.apache.royale.text.engine.FontMetrics,org.apache.royale.text.engine.ITextLine,org.apache.royale.text.engine.TextBaseline,org.apache.royale.text.engine.TextRotation,org.apache.royale.text.engine.TypographicCase,org.apache.royale.textLayout.compose.ISWFContext,org.apache.royale.textLayout.elements.IParagraphElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.factory.TLFFactory,org.apache.royale.textLayout.formats.BaselineShift,org.apache.royale.textLayout.formats.ColorName,org.apache.royale.textLayout.formats.FormatValue,org.apache.royale.textLayout.formats.ITextLayoutFormat,org.apache.royale.textLayout.formats.TLFTypographicCase,org.apache.royale.textLayout.formats.TextLayoutFormat,org.apache.royale.textLayout.utils.LocaleUtil,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils = function() {
};


/** @asprivate 
 * @nocollapse
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} computedFormat
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} para
 * @return {string}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.resolveDomBaseline = function(computedFormat, para) {
  
  var /** @type {string} */ domBase = org.apache.royale.utils.Language.string(computedFormat.dominantBaseline);
  if (domBase == org.apache.royale.textLayout.formats.FormatValue.AUTO) {
    if (computedFormat.textRotation == org.apache.royale.text.engine.TextRotation.ROTATE_270)
      domBase = org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_CENTER; else {
      if (para != null)
        domBase = para.getEffectiveDominantBaseline();
      else
        domBase = org.apache.royale.textLayout.utils.LocaleUtil.dominantBaseline(org.apache.royale.utils.Language.string(computedFormat.locale));
    }
  }
  return domBase;
};


/** @asprivate 
 * Get the "inline box" for an element with the specified computed format as defined by the CSS visual formatting model (http://www.w3.org/TR/CSS2/visuren.html)
 * For a span, leading is applied equally above and below the em-box such that the box's height equals lineHeight. 
 * Alignment relative to the baseline (using baselineShift, dominantBaseline, alignmentBaseline) is taken into account.
 * @asparam	textLine		The containing text line
 * @asparam	para			The containing para. Only used for resolving AUTO dominantBaseline value. 
 * 							May be null, in which case the AUTO dominantBaseline value is resolved based on other attributes (such as the element's computed locale). 	
 * @asreturn 	A rectangle representing the inline box. Top and Bottom are relative to the line's Roman baseline. Left and Right are ignored.
 * @nocollapse
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} computedFormat
 * @param {org.apache.royale.text.engine.FontMetrics} metrics
 * @param {org.apache.royale.text.engine.ITextLine} textLine
 * @param {org.apache.royale.textLayout.elements.IParagraphElement=} para
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.getCSSInlineBoxHelper = function(computedFormat, metrics, textLine, para) {
  para = typeof para !== 'undefined' ? para : null;
  var /** @type {org.apache.royale.geom.Rectangle} */ emBox = metrics.emBox;
  var /** @type {number} */ ascent = -emBox.top;
  var /** @type {number} */ descent = emBox.bottom;
  var /** @type {number} */ textHeight = emBox.height;
  var /** @type {number} */ fontSize = Number(computedFormat.fontSize);
  var /** @type {number} */ lineHeight = org.apache.royale.textLayout.formats.TextLayoutFormat.lineHeightProperty.computeActualPropertyValue(computedFormat.lineHeight, fontSize);
  var /** @type {number} */ halfLeading = (lineHeight - textHeight) / 2;
  emBox.top -= halfLeading;
  emBox.bottom += halfLeading;
  var /** @type {string} */ computedDominantBaseline = org.apache.royale.textLayout.elements.utils.GeometricElementUtils.resolveDomBaseline(computedFormat, para);
  switch (computedDominantBaseline) {
    case org.apache.royale.text.engine.TextBaseline.ASCENT:
    
    case org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_TOP:
      emBox.offset(0, ascent);
      break;
    case org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_CENTER:
      emBox.offset(0, ascent - textHeight / 2);
      break;
    case org.apache.royale.text.engine.TextBaseline.ROMAN:
      break;
    case org.apache.royale.text.engine.TextBaseline.DESCENT:
    
    case org.apache.royale.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM:
      emBox.offset(0, -descent);
  }
  var /** @type {string} */ computedAlignmentBaseline = org.apache.royale.utils.Language.string((computedFormat.alignmentBaseline == org.apache.royale.text.engine.TextBaseline.USE_DOMINANT_BASELINE ? computedDominantBaseline : computedFormat.alignmentBaseline));
  emBox.offset(0, textLine.getBaselinePosition(computedAlignmentBaseline));
  var /** @type {number} */ baselineShift;
  if (computedFormat.baselineShift == org.apache.royale.textLayout.formats.BaselineShift.SUPERSCRIPT)
    baselineShift = metrics.superscriptOffset * fontSize;
  else if (computedFormat.baselineShift == org.apache.royale.textLayout.formats.BaselineShift.SUBSCRIPT)
    baselineShift = metrics.subscriptOffset * fontSize;
  else
    baselineShift = -computedFormat.baselineShift;
  emBox.offset(0, baselineShift);
  return emBox;
};


/** @asprivate 
 * @nocollapse
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat} computedFormat
 * @param {org.apache.royale.textLayout.elements.IParagraphElement} para
 * @param {org.apache.royale.textLayout.compose.ISWFContext} swfContext
 * @return {org.apache.royale.text.engine.ElementFormat}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.computeElementFormatHelper = function(computedFormat, para, swfContext) {
  var /** @type {org.apache.royale.text.engine.ElementFormat} */ format = new org.apache.royale.text.engine.ElementFormat();
  
  format.alignmentBaseline = org.apache.royale.utils.Language.string(computedFormat.alignmentBaseline);
  format.alpha = Number(computedFormat.textAlpha);
  format.breakOpportunity = org.apache.royale.utils.Language.string(computedFormat.breakOpportunity);
  format.color = (org.apache.royale.utils.Language.is(computedFormat.color, String) ? org.apache.royale.textLayout.elements.utils.GeometricElementUtils.translateColor(org.apache.royale.utils.Language.string(computedFormat.color)) : org.apache.royale.utils.Language.uint(computedFormat.color)) >>> 0;
  format.dominantBaseline = org.apache.royale.textLayout.elements.utils.GeometricElementUtils.resolveDomBaseline(computedFormat, para);
  format.digitCase = org.apache.royale.utils.Language.string(computedFormat.digitCase);
  format.digitWidth = org.apache.royale.utils.Language.string(computedFormat.digitWidth);
  format.ligatureLevel = org.apache.royale.utils.Language.string(computedFormat.ligatureLevel);
  format.fontSize = Number(computedFormat.fontSize);
  format.xScale = Number(computedFormat.xScale);
  format.yScale = Number(computedFormat.yScale);
  format.kerning = org.apache.royale.utils.Language.string(computedFormat.kerning);
  format.locale = org.apache.royale.utils.Language.string(computedFormat.locale);
  format.trackingLeft = org.apache.royale.textLayout.formats.TextLayoutFormat.trackingLeftProperty.computeActualPropertyValue(computedFormat.trackingLeft, format.fontSize);
  format.trackingRight = org.apache.royale.textLayout.formats.TextLayoutFormat.trackingRightProperty.computeActualPropertyValue(computedFormat.trackingRight, format.fontSize);
  format.textRotation = org.apache.royale.utils.Language.string(computedFormat.textRotation);
  format.baselineShift = -org.apache.royale.textLayout.formats.TextLayoutFormat.baselineShiftProperty.computeActualPropertyValue(computedFormat.baselineShift, format.fontSize);
  switch (computedFormat.typographicCase) {
    case org.apache.royale.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS:
      format.typographicCase = org.apache.royale.text.engine.TypographicCase.CAPS_AND_SMALL_CAPS;
      break;
    case org.apache.royale.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS:
      format.typographicCase = org.apache.royale.text.engine.TypographicCase.SMALL_CAPS;
      break;
    default:
      format.typographicCase = org.apache.royale.utils.Language.string(computedFormat.typographicCase);
      break;
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var /** @type {org.apache.royale.text.engine.FontDescription} */ fd = new org.apache.royale.text.engine.FontDescription();
  fd.fontStyle = org.apache.royale.utils.Language.string(computedFormat.fontStyle);
  fd.fontName = org.apache.royale.utils.Language.string(computedFormat.fontFamily);
  var /** @type {org.apache.royale.textLayout.elements.ITextFlow} */ tf = para.getTextFlow();
  if (tf)
    fd.fontLoader = tf.tlfFactory.textFactory.getFontLoader();
  else
    fd.fontLoader = org.apache.royale.textLayout.factory.TLFFactory.defaultTLFFactory.textFactory.getFontLoader();
  
  
  
  format.fontDescription = fd;
  
  if (computedFormat.baselineShift == org.apache.royale.textLayout.formats.BaselineShift.SUPERSCRIPT || computedFormat.baselineShift == org.apache.royale.textLayout.formats.BaselineShift.SUBSCRIPT) {
    var /** @type {org.apache.royale.text.engine.FontMetrics} */ fontMetrics;
    if (swfContext)
      fontMetrics = swfContext.callInContext(org.apache.royale.utils.Language.closure(format.getFontMetrics, format, 'getFontMetrics'), format, null, true);
    else
      fontMetrics = format.getFontMetrics();
    if (computedFormat.baselineShift == org.apache.royale.textLayout.formats.BaselineShift.SUPERSCRIPT) {
      format.baselineShift = (fontMetrics.superscriptOffset * format.fontSize);
      format.fontSize = fontMetrics.superscriptScale * format.fontSize;
    } else {
      format.baselineShift = (fontMetrics.subscriptOffset * format.fontSize);
      format.fontSize = fontMetrics.subscriptScale * format.fontSize;
    }
    
    
  }
  return format;
};


/** @asprivate 
 * @private
 * @param {string} color
 * @return {number}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.translateColor = function(color) {
  var /** @type {number} */ ret = NaN;
  switch (color.toLowerCase()) {
    case org.apache.royale.textLayout.formats.ColorName.BLACK:
      ret = 0x000000;
      break;
    case org.apache.royale.textLayout.formats.ColorName.BLUE:
      ret = 0x0000FF;
      break;
    case org.apache.royale.textLayout.formats.ColorName.GREEN:
      ret = 0x008000;
      break;
    case org.apache.royale.textLayout.formats.ColorName.GRAY:
      ret = 0x808080;
      break;
    case org.apache.royale.textLayout.formats.ColorName.SILVER:
      ret = 0xC0C0C0;
      break;
    case org.apache.royale.textLayout.formats.ColorName.LIME:
      ret = 0x00FF00;
      break;
    case org.apache.royale.textLayout.formats.ColorName.OLIVE:
      ret = 0x808000;
      break;
    case org.apache.royale.textLayout.formats.ColorName.WHITE:
      ret = 0xFFFFFF;
      break;
    case org.apache.royale.textLayout.formats.ColorName.YELLOW:
      ret = 0xFFFF00;
      break;
    case org.apache.royale.textLayout.formats.ColorName.MAROON:
      ret = 0x800000;
      break;
    case org.apache.royale.textLayout.formats.ColorName.NAVY:
      ret = 0x000080;
      break;
    case org.apache.royale.textLayout.formats.ColorName.RED:
      ret = 0xFF0000;
      break;
    case org.apache.royale.textLayout.formats.ColorName.PURPLE:
      ret = 0x800080;
      break;
    case org.apache.royale.textLayout.formats.ColorName.TEAL:
      ret = 0x008080;
      break;
    case org.apache.royale.textLayout.formats.ColorName.FUCHSIA:
      ret = 0xFF00FF;
      break;
    case org.apache.royale.textLayout.formats.ColorName.AQUA:
      ret = 0x00FFFF;
      break;
    case org.apache.royale.textLayout.formats.ColorName.MAGENTA:
      ret = 0xFF00FF;
      break;
    case org.apache.royale.textLayout.formats.ColorName.CYAN:
      ret = 0x00FFFF;
      break;
    case org.apache.royale.textLayout.formats.ColorName.ORANGE:
      ret = 0xFFA500;
      break;
    case org.apache.royale.textLayout.formats.ColorName.DARK_GREY:
      ret = 0xA9A9A9;
      break;
    case org.apache.royale.textLayout.formats.ColorName.BROWN:
      ret = 0xA52A2A;
      break;
    case org.apache.royale.textLayout.formats.ColorName.TAN:
      ret = 0xD2B48C;
      break;
    case org.apache.royale.textLayout.formats.ColorName.LIGHT_GREY:
      ret = 0xD3D3D3;
      break;
    case org.apache.royale.textLayout.formats.ColorName.DARK_GREEN:
      ret = 0x006400;
      break;
    default:
      break;
  }
  return ret;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'GeometricElementUtils', qName: 'org.apache.royale.textLayout.elements.utils.GeometricElementUtils', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|resolveDomBaseline': { type: 'String', declaredBy: 'org.apache.royale.textLayout.elements.utils.GeometricElementUtils', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.elements.IParagraphElement', false ]; }},
        '|getCSSInlineBoxHelper': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.textLayout.elements.utils.GeometricElementUtils', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.text.engine.FontMetrics', false ,'org.apache.royale.text.engine.ITextLine', false ,'org.apache.royale.textLayout.elements.IParagraphElement', true ]; }},
        '|computeElementFormatHelper': { type: 'org.apache.royale.text.engine.ElementFormat', declaredBy: 'org.apache.royale.textLayout.elements.utils.GeometricElementUtils', parameters: function () { return [ 'org.apache.royale.textLayout.formats.ITextLayoutFormat', false ,'org.apache.royale.textLayout.elements.IParagraphElement', false ,'org.apache.royale.textLayout.compose.ISWFContext', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.elements.utils.GeometricElementUtils.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./GeometricElementUtils.js.map
