/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/ISelectionManager.as
 * org.apache.royale.textLayout.edit.ISelectionManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.ISelectionManager');
/* Royale Dependency List: org.apache.royale.textLayout.edit.SelectionFormat,org.apache.royale.textLayout.edit.SelectionState,org.apache.royale.textLayout.elements.CellCoordinates,org.apache.royale.textLayout.elements.CellRange,org.apache.royale.textLayout.elements.ITableElement,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.elements.TextRange,org.apache.royale.textLayout.formats.TextLayoutFormat,XML*/

goog.require('org.apache.royale.textLayout.edit.IInteractionEventHandler');



/**
 * @interface
 * @extends {org.apache.royale.textLayout.edit.IInteractionEventHandler}
 */
org.apache.royale.textLayout.edit.ISelectionManager = function() {
};
/**  * @type {org.apache.royale.textLayout.elements.ITextFlow}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.textFlow;
/**  * @type {org.apache.royale.textLayout.elements.ITableElement}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.currentTable;
/**
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.hasCellRangeSelection = function() {
};
/**
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} anchorCoords
 * @param {org.apache.royale.textLayout.elements.CellCoordinates} activeCoords
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.selectCellRange = function(anchorCoords, activeCoords) {
};
/**
 * @return {org.apache.royale.textLayout.elements.CellRange}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.getCellRange = function() {
};
/**
 * @param {org.apache.royale.textLayout.elements.CellRange} range
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.setCellRange = function(range) {
};
/**  * @type {org.apache.royale.textLayout.elements.CellCoordinates}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.anchorCellPosition;
/**  * @type {org.apache.royale.textLayout.elements.CellCoordinates}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.activeCellPosition;
/**  * @type {number}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.absoluteStart;
/**  * @type {number}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.absoluteEnd;
/**
 * Selects a range of text.
 * 
 * <p>If a negative number is passed as either of the parameters, then any existing selection is
 * removed.</p>
 * 
 * @asparam anchorPosition	The anchor point for the new selection, as an absolute position in the TextFlow 
 * @asparam activePosition	The active end of the new selection, as an absolute position in the TextFlow
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} anchorPosition
 * @param {number} activePosition
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.selectRange = function(anchorPosition, activePosition) {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.selectAll = function() {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.selectLastPosition = function() {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.selectFirstPosition = function() {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.deselect = function() {
};
/**  * @type {number}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.anchorPosition;
/**  * @type {number}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.activePosition;
/**
 * Indicates whether there is a text selection. 
 * 
 * <p>Returns <code>true</code> if there is either a range selection or a point selection. 
 * By default, when a selection manager is first set up, there is no selection (the start and end are -1).</p>
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.hasSelection = function() {
};
/**
 * Indicates whether there is a text or cell selection. 
 * 
 * <p>Returns <code>true</code> if there is either a range selection or a point selection. 
 * By default, when a selection manager is first set up, there is no selection (the start and end are -1).</p>
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.hasAnySelection = function() {
};
/**  * @type {string}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.selectionType;
/**
 * Indicates whether the selection covers a range of text.
 * 
 * <p>Returns <code>true</code> if there is a selection that extends past a single position.</p> 
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {boolean}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.isRangeSelection = function() {
};
/**
 * Gets the SelectionState object of the current selection.
 * 
 * 
 * @see org.apache.royale.textLayout.edit.SelectionState
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.getSelectionState = function() {
};
/**
 * Sets the SelectionState object of the current selection.
 * 
 * @see org.apache.royale.textLayout.edit.SelectionState
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.edit.SelectionState} state
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.setSelectionState = function(state) {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.refreshSelection = function() {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.clearSelection = function() {
};
org.apache.royale.textLayout.edit.ISelectionManager.prototype.setFocus = function() {
};
/**  * @type {boolean}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.focused;
/**  * @type {boolean}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.windowActive;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.currentSelectionFormat;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.currentCellSelectionFormat;
/**
 * Gets the character format attributes that are common to all characters in the specified text range or current selection.
 * 
 * <p>Format attributes that do not have the same value for all characters in the specified element range or selection are set to 
 * <code>null</code> in the returned TextLayoutFormat instance.</p>
 * 
 * @asparam range The optional range of text for which common attributes are requested. If null, the current selection is used. 
 * @asreturn The common character style settings
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.elements.TextRange=} range
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.getCommonCharacterFormat = function(range) {
};
/**
 * Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.
 * 
 * <p>Format attributes that do not have the same value for all paragraphs in the specified element range or selection are set to 
 * <code>null</code> in the returned TextLayoutFormat instance.</p>
 * 
 * @asparam range The optional range of text for which common attributes are requested. If null, the current selection is used. 
 * @asreturn The common paragraph style settings
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.elements.TextRange=} range
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.getCommonParagraphFormat = function(range) {
};
/**
 * Gets the container format attributes that are common to all containers in the specified text range or current selection.
 * 
 * <p>Format attributes that do not have the same value for all containers in the specified element range or selection are set to 
 * <code>null</code> in the returned TextLayoutFormat instance.</p>
 * 
 * @asparam range The optional range of text for which common attributes are requested. If null, the current selection is used. 
 * @asreturn The common container style settings
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {org.apache.royale.textLayout.elements.TextRange=} range
 * @return {org.apache.royale.textLayout.formats.TextLayoutFormat}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.getCommonContainerFormat = function(range) {
};
/**  * @type {string}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.editingMode;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.focusedSelectionFormat;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.unfocusedSelectionFormat;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.inactiveSelectionFormat;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.focusedCellSelectionFormat;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.unfocusedCellSelectionFormat;
/**  * @type {org.apache.royale.textLayout.edit.SelectionFormat}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.inactiveCellSelectionFormat;
org.apache.royale.textLayout.edit.ISelectionManager.prototype.flushPendingOperations = function() {
};
/** 
 * Updates the selection manager when text is inserted or deleted.
 * 
 * <p>Operations must call <code>notifyInsertOrDelete</code> when changing the text in the text flow. 
 * The selection manager adjusts index-based position indicators accordingly. If you create a new Operation
 * class that changes text in a text flow directly (not using another operation) your operation must call this function 
 * to keep the selection up to date.</p>
 * 
 * @asparam absolutePosition	The point in the text where the change was made.
 * @asparam length A positive or negative number indicating how many characters were inserted or deleted.
 * 
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @param {number} absolutePosition
 * @param {number} length
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.notifyInsertOrDelete = function(absolutePosition, length) {
};
/**  * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.subManager;
/**  * @type {org.apache.royale.textLayout.edit.ISelectionManager}
 */org.apache.royale.textLayout.edit.ISelectionManager.prototype.superManager;
/**
 * @param {boolean} sharedUndo
 * @return {org.apache.royale.textLayout.edit.ISelectionManager}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.copy = function(sharedUndo) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ISelectionManager', qName: 'org.apache.royale.textLayout.edit.ISelectionManager', kind: 'interface' }], interfaces: [org.apache.royale.textLayout.edit.IInteractionEventHandler] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'textFlow': { type: 'org.apache.royale.textLayout.elements.ITextFlow', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'currentTable': { type: 'org.apache.royale.textLayout.elements.ITableElement', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'anchorCellPosition': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'activeCellPosition': { type: 'org.apache.royale.textLayout.elements.CellCoordinates', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'absoluteStart': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'absoluteEnd': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'anchorPosition': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'activePosition': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'selectionType': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'focused': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'windowActive': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'currentSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'currentCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'editingMode': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'focusedSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'unfocusedSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'inactiveSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'focusedCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'unfocusedCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'inactiveCellSelectionFormat': { type: 'org.apache.royale.textLayout.edit.SelectionFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'subManager': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'superManager': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'}
      };
    },
    methods: function () {
      return {
        'hasCellRangeSelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'selectCellRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellCoordinates', false ,'org.apache.royale.textLayout.elements.CellCoordinates', false ]; }},
        'getCellRange': { type: 'org.apache.royale.textLayout.elements.CellRange', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'setCellRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.CellRange', false ]; }},
        'selectRange': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'selectAll': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'selectLastPosition': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'selectFirstPosition': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'deselect': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'hasSelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'hasAnySelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'isRangeSelection': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'getSelectionState': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'setSelectionState': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.edit.SelectionState', false ]; }},
        'refreshSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'clearSelection': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'setFocus': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'getCommonCharacterFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', true ]; }},
        'getCommonParagraphFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', true ]; }},
        'getCommonContainerFormat': { type: 'org.apache.royale.textLayout.formats.TextLayoutFormat', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'org.apache.royale.textLayout.elements.TextRange', true ]; }},
        'flushPendingOperations': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager'},
        'notifyInsertOrDelete': { type: 'void', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'copy': { type: 'org.apache.royale.textLayout.edit.ISelectionManager', declaredBy: 'org.apache.royale.textLayout.edit.ISelectionManager', parameters: function () { return [ 'Boolean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.ISelectionManager.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ISelectionManager.js.map
