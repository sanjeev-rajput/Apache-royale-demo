/**
 * Generated by Apache Royale Compiler from org/apache/royale/textLayout/edit/SelectionState.as
 * org.apache.royale.textLayout.edit.SelectionState
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.textLayout.edit.SelectionState');
/* Royale Dependency List: org.apache.royale.textLayout.elements.CellRange,org.apache.royale.textLayout.elements.ITextFlow,org.apache.royale.textLayout.formats.ITextLayoutFormat,XML*/

goog.require('org.apache.royale.textLayout.elements.TextRange');



/** 
 * Creates a SelectionState object.
 * 
 * <p><b>Note:</b> Do not construct a SelectionState object in order to create a selection. To
 * create a selection in a text flow, call the <code>setSelection()</code> method of the relevant
 * ISelectionManager instance (which is the SelectionManager or EditManager object assigned 
 * to the <code>interactionManager</code> property of the text flow).</p>
 * 
 * @asparam	root	The TextFlow associated with the selection.
 * @asparam anchorPosition	The anchor index of the selection.
 * @asparam activePosition	The active index of the selection.
 * @asparam	format	The TextLayoutFormat to be applied on next character typed when a point selection
 * 
 * @see org.apache.royale.textLayout.edit.ISelectionManager#getSelectionState()
 * @see org.apache.royale.textLayout.edit.SelectionManager
 * @see org.apache.royale.textLayout.edit.EditManager
 * 
 * @playerversion Flash 10
 * @playerversion AIR 1.5
 * @langversion 3.0
 * @constructor
 * @extends {org.apache.royale.textLayout.elements.TextRange}
 * @param {org.apache.royale.textLayout.elements.ITextFlow} root
 * @param {number} anchorPosition
 * @param {number} activePosition
 * @param {org.apache.royale.textLayout.formats.ITextLayoutFormat=} format
 * @param {org.apache.royale.textLayout.elements.CellRange=} cellRange
 */
org.apache.royale.textLayout.edit.SelectionState = function(root, anchorPosition, activePosition, format, cellRange) {
  format = typeof format !== 'undefined' ? format : null;
  cellRange = typeof cellRange !== 'undefined' ? cellRange : null;
  org.apache.royale.textLayout.edit.SelectionState.base(this, 'constructor', root, anchorPosition, activePosition);
  if (format)
    this.org_apache_royale_textLayout_edit_SelectionState__pointFormat = format;
  this.org_apache_royale_textLayout_edit_SelectionState__cellRange = cellRange;
};
goog.inherits(org.apache.royale.textLayout.edit.SelectionState, org.apache.royale.textLayout.elements.TextRange);


/**
 * @private
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.org_apache_royale_textLayout_edit_SelectionState__pointFormat;


/**
 * @private
 * @type {org.apache.royale.textLayout.elements.CellRange}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.org_apache_royale_textLayout_edit_SelectionState__cellRange;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.org_apache_royale_textLayout_edit_SelectionState__selectionManagerOperationState;


/** 
 * Updates the selection range with new anchor or active position values.  
 * 
 * <p>The <code>pointFormat</code> styles are cleared if the selection is changed.</p>
 * 
 * @asparam newAnchorPosition	the anchor index of the selection.
 * @asparam newActivePosition	the active index of the selection.
 * @asreturn true if selection is changed
 * 
 * @override
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.updateRange = function(newAnchorPosition, newActivePosition) {
  if (org.apache.royale.textLayout.edit.SelectionState.superClass_.updateRange.apply(this, [newAnchorPosition, newActivePosition])) {
    this.org_apache_royale_textLayout_edit_SelectionState__pointFormat = null;
    return true;
  }
  return false;
};


/** @asprivate 
 * @return {org.apache.royale.textLayout.edit.SelectionState}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.clone = function() {
  return new org.apache.royale.textLayout.edit.SelectionState(this.textFlow, this.anchorPosition, this.activePosition, this.pointFormat);
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.pointFormat;


org.apache.royale.textLayout.edit.SelectionState.prototype.get__pointFormat = function() {
  return this.org_apache_royale_textLayout_edit_SelectionState__pointFormat;
};


org.apache.royale.textLayout.edit.SelectionState.prototype.set__pointFormat = function(format) {
  this.org_apache_royale_textLayout_edit_SelectionState__pointFormat = format;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.selectionManagerOperationState;


org.apache.royale.textLayout.edit.SelectionState.prototype.get__selectionManagerOperationState = function() {
  return this.org_apache_royale_textLayout_edit_SelectionState__selectionManagerOperationState;
};


org.apache.royale.textLayout.edit.SelectionState.prototype.set__selectionManagerOperationState = function(val) {
  this.org_apache_royale_textLayout_edit_SelectionState__selectionManagerOperationState = val;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.textLayout.elements.CellRange}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.cellRange;


org.apache.royale.textLayout.edit.SelectionState.prototype.get__cellRange = function() {
  return this.org_apache_royale_textLayout_edit_SelectionState__cellRange;
};


org.apache.royale.textLayout.edit.SelectionState.prototype.set__cellRange = function(value) {
  this.org_apache_royale_textLayout_edit_SelectionState__cellRange = value;
};


Object.defineProperties(org.apache.royale.textLayout.edit.SelectionState.prototype, /** @lends {org.apache.royale.textLayout.edit.SelectionState.prototype} */ {
/**
 * @type {org.apache.royale.textLayout.formats.ITextLayoutFormat}
 */
pointFormat: {
get: org.apache.royale.textLayout.edit.SelectionState.prototype.get__pointFormat,
set: org.apache.royale.textLayout.edit.SelectionState.prototype.set__pointFormat},
/**
 * @type {boolean}
 */
selectionManagerOperationState: {
get: org.apache.royale.textLayout.edit.SelectionState.prototype.get__selectionManagerOperationState,
set: org.apache.royale.textLayout.edit.SelectionState.prototype.set__selectionManagerOperationState},
/**
 * @type {org.apache.royale.textLayout.elements.CellRange}
 */
cellRange: {
get: org.apache.royale.textLayout.edit.SelectionState.prototype.get__cellRange,
set: org.apache.royale.textLayout.edit.SelectionState.prototype.set__cellRange}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SelectionState', qName: 'org.apache.royale.textLayout.edit.SelectionState', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'pointFormat': { type: 'org.apache.royale.textLayout.formats.ITextLayoutFormat', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionState'},
        'selectionManagerOperationState': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionState'},
        'cellRange': { type: 'org.apache.royale.textLayout.elements.CellRange', access: 'readwrite', declaredBy: 'org.apache.royale.textLayout.edit.SelectionState'}
      };
    },
    methods: function () {
      return {
        'SelectionState': { type: '', declaredBy: 'org.apache.royale.textLayout.edit.SelectionState', parameters: function () { return [ 'org.apache.royale.textLayout.elements.ITextFlow', false ,'int', false ,'int', false ,'org.apache.royale.textLayout.formats.ITextLayoutFormat', true ,'org.apache.royale.textLayout.elements.CellRange', true ]; }},
        'updateRange': { type: 'Boolean', declaredBy: 'org.apache.royale.textLayout.edit.SelectionState', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'clone': { type: 'org.apache.royale.textLayout.edit.SelectionState', declaredBy: 'org.apache.royale.textLayout.edit.SelectionState'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.textLayout.edit.SelectionState.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./SelectionState.js.map
