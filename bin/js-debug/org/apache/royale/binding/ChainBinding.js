/**
 * Generated by Apache Royale Compiler from org/apache/royale/binding/ChainBinding.as
 * org.apache.royale.binding.ChainBinding
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.binding.ChainBinding');
/* Royale Dependency List: org.apache.royale.core.IStrand,org.apache.royale.events.ValueChangeEvent,org.apache.royale.utils.Language*/
goog.provide('org.apache.royale.binding.ChainBinding.ChainWatcher');

goog.require('org.apache.royale.core.IBead');
goog.require('org.apache.royale.core.IDocument');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @implements {org.apache.royale.core.IBead}
 * @implements {org.apache.royale.core.IDocument}
 */
org.apache.royale.binding.ChainBinding = function() {
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.binding.ChainBinding.prototype.org_apache_royale_binding_ChainBinding__source;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.binding.ChainBinding.prototype.document;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.binding.ChainBinding.prototype.org_apache_royale_binding_ChainBinding__destination;


/**
 * @type {Object}
 */
org.apache.royale.binding.ChainBinding.prototype.watcherChain;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.binding.ChainBinding.prototype.org_apache_royale_binding_ChainBinding_value;


/**
 * @private
 */
org.apache.royale.binding.ChainBinding.prototype.org_apache_royale_binding_ChainBinding_applyBinding = function() {
  var /** @type {boolean} */ chainSet = this.org_apache_royale_binding_ChainBinding_evaluateSourceChain();
  if (chainSet)
    this.org_apache_royale_binding_ChainBinding_applyValue();
};


/**
 * @private
 * @return {boolean}
 */
org.apache.royale.binding.ChainBinding.prototype.org_apache_royale_binding_ChainBinding_evaluateSourceChain = function() {
  var self = this;
  function valueChangeHandler(event) {
    if (event.propertyName != propName)
      return;
    self.org_apache_royale_binding_ChainBinding_value = event.newValue;
    self.org_apache_royale_binding_ChainBinding_applyValue();
  };
  var /** @type {number} */ n = (this.source.length) >> 0;
  var /** @type {Object} */ obj = this.document;
  for (var /** @type {number} */ i = 0; i < n - 1; i++) {
    var /** @type {string} */ propName = org.apache.royale.utils.Language.string(this.source[i]);
    var /** @type {Object} */ propObj = obj[propName];
    var /** @type {org.apache.royale.binding.ChainBinding.ChainWatcher} */ watcher = new org.apache.royale.binding.ChainBinding.ChainWatcher(propName, org.apache.royale.utils.Language.closure(this.org_apache_royale_binding_ChainBinding_applyBinding, this, 'org_apache_royale_binding_ChainBinding_applyBinding'));
    obj.addEventListener("valueChange", org.apache.royale.utils.Language.closure(watcher.handler, watcher, 'handler'));
    if (propObj == null)
      return false;
    obj = propObj;
  }
  propName = org.apache.royale.utils.Language.string(this.source[n - 1]);
  obj.addEventListener("valueChange", valueChangeHandler);
  this.org_apache_royale_binding_ChainBinding_value = obj[propName];
  return true;
};


/**
 * @royaleignorecoercion String
 * @private
 */
org.apache.royale.binding.ChainBinding.prototype.org_apache_royale_binding_ChainBinding_applyValue = function() {
  var self = this;
  function handler(event) {
    if (event.propertyName != propName)
      return;
    if (event.oldValue != null)
      event.oldValue.removeEventListener("valueChange", handler);
    self.org_apache_royale_binding_ChainBinding_applyValue();
  };
  var /** @type {string} */ destinationName;
  if (org.apache.royale.utils.Language.is(this.destination, String)) {
    destinationName = this.destination;
    this.document[destinationName] = this.org_apache_royale_binding_ChainBinding_value;
    return;
  }
  var /** @type {number} */ n = (this.destination.length) >> 0;
  var /** @type {Object} */ obj = this.document;
  for (var /** @type {number} */ i = 0; i < n - 1; i++) {
    var /** @type {string} */ propName = org.apache.royale.utils.Language.string(this.destination[i]);
    var /** @type {Object} */ propObj = obj[propName];
    if (propObj == null) {
      obj.addEventListener("valueChange", handler);
      return;
    }
    obj = propObj;
  }
  obj[this.destination[n - 1]] = this.org_apache_royale_binding_ChainBinding_value;
};


/**
 *  @copy org.apache.royale.core.IDocument#setDocument()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @param {Object} document
 * @param {string=} id
 */
org.apache.royale.binding.ChainBinding.prototype.setDocument = function(document, id) {
  id = typeof id !== 'undefined' ? id : null;
  this.document = document;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
org.apache.royale.binding.ChainBinding.prototype.source;


org.apache.royale.binding.ChainBinding.prototype.get__source = function() {
  return this.org_apache_royale_binding_ChainBinding__source;
};


org.apache.royale.binding.ChainBinding.prototype.set__source = function(value) {
  this.org_apache_royale_binding_ChainBinding__source = value;
};


/**
 * @nocollapse
 * @export
 * @type {Object}
 */
org.apache.royale.binding.ChainBinding.prototype.destination;


org.apache.royale.binding.ChainBinding.prototype.get__destination = function() {
  return this.org_apache_royale_binding_ChainBinding__destination;
};


org.apache.royale.binding.ChainBinding.prototype.set__destination = function(value) {
  this.org_apache_royale_binding_ChainBinding__destination = value;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IStrand}
 */
org.apache.royale.binding.ChainBinding.prototype.strand;


org.apache.royale.binding.ChainBinding.prototype.set__strand = function(value) {
  this.org_apache_royale_binding_ChainBinding_applyBinding();
};


Object.defineProperties(org.apache.royale.binding.ChainBinding.prototype, /** @lends {org.apache.royale.binding.ChainBinding.prototype} */ {
/**
 * @type {Array}
 */
source: {
get: org.apache.royale.binding.ChainBinding.prototype.get__source,
set: org.apache.royale.binding.ChainBinding.prototype.set__source},
/**
 * @type {Object}
 */
destination: {
get: org.apache.royale.binding.ChainBinding.prototype.get__destination,
set: org.apache.royale.binding.ChainBinding.prototype.set__destination},
/**
 * @type {org.apache.royale.core.IStrand}
 */
strand: {
set: org.apache.royale.binding.ChainBinding.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.binding.ChainBinding.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ChainBinding', qName: 'org.apache.royale.binding.ChainBinding', kind: 'class' }], interfaces: [org.apache.royale.core.IBead, org.apache.royale.core.IDocument] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.binding.ChainBinding.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'watcherChain': { type: 'Object', get_set: function (/** org.apache.royale.binding.ChainBinding */ inst, /** * */ v) {return v !== undefined ? inst.watcherChain = v : inst.watcherChain;}}
      };
    },
    accessors: function () {
      return {
        'source': { type: 'Array', access: 'readwrite', declaredBy: 'org.apache.royale.binding.ChainBinding'},
        'destination': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.binding.ChainBinding'},
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.binding.ChainBinding'}
      };
    },
    methods: function () {
      return {
        'ChainBinding': { type: '', declaredBy: 'org.apache.royale.binding.ChainBinding'},
        'setDocument': { type: 'void', declaredBy: 'org.apache.royale.binding.ChainBinding', parameters: function () { return [ 'Object', false ,'String', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.binding.ChainBinding.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ChainBinding.js.map


/**
 * @constructor
 * @param {string} propertyName
 * @param {Function} callback
 */
org.apache.royale.binding.ChainBinding.ChainWatcher = function(propertyName, callback) {
  this.ChainWatcher_propertyName = propertyName;
  this.ChainWatcher_callback = callback;
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.binding.ChainBinding.ChainWatcher.prototype.ChainWatcher_propertyName;


/**
 * @private
 * @type {Function}
 */
org.apache.royale.binding.ChainBinding.ChainWatcher.prototype.ChainWatcher_callback;


/**
 * @param {org.apache.royale.events.ValueChangeEvent} event
 */
org.apache.royale.binding.ChainBinding.ChainWatcher.prototype.handler = function(event) {
  if (event.propertyName != this.ChainWatcher_propertyName)
    return;
  if (event.oldValue != null)
    event.oldValue.removeEventListener("valueChange", org.apache.royale.utils.Language.closure(this.handler, this, 'handler'));
  this.ChainWatcher_callback();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.binding.ChainBinding.ChainWatcher.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ChainWatcher', qName: 'org.apache.royale.binding.ChainBinding.ChainWatcher', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.binding.ChainBinding.ChainWatcher.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'ChainWatcher': { type: '', declaredBy: 'org.apache.royale.binding.ChainBinding.ChainWatcher', parameters: function () { return [ 'String', false ,'Function', false ]; }},
        'handler': { type: 'void', declaredBy: 'org.apache.royale.binding.ChainBinding.ChainWatcher', parameters: function () { return [ 'org.apache.royale.events.ValueChangeEvent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.binding.ChainBinding.ChainWatcher.prototype.ROYALE_COMPILE_FLAGS = 10;
