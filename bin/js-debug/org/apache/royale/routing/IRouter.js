/**
 * Generated by Apache Royale Compiler from org/apache/royale/routing/IRouter.as
 * org.apache.royale.routing.IRouter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.routing.IRouter');
/* Royale Dependency List: org.apache.royale.core.IStrand,org.apache.royale.routing.RouteState,XML*/




/**
 * @interface
 */
org.apache.royale.routing.IRouter = function() {
};
/**  * @type {org.apache.royale.routing.RouteState}
 */org.apache.royale.routing.IRouter.prototype.routeState;
/**  * @type {org.apache.royale.core.IStrand}
 */org.apache.royale.routing.IRouter.prototype.host;
org.apache.royale.routing.IRouter.prototype.setState = function() {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.routing.IRouter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IRouter', qName: 'org.apache.royale.routing.IRouter', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.routing.IRouter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'routeState': { type: 'org.apache.royale.routing.RouteState', access: 'readwrite', declaredBy: 'org.apache.royale.routing.IRouter'},
        'host': { type: 'org.apache.royale.core.IStrand', access: 'readonly', declaredBy: 'org.apache.royale.routing.IRouter'}
      };
    },
    methods: function () {
      return {
        'setState': { type: 'void', declaredBy: 'org.apache.royale.routing.IRouter'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.routing.IRouter.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./IRouter.js.map
