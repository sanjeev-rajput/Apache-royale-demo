/**
 * Generated by Apache Royale Compiler from org/apache/royale/storage/providers/LocalStorageProvider.as
 * org.apache.royale.storage.providers.LocalStorageProvider
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.storage.providers.LocalStorageProvider');
/* Royale Dependency List: */

goog.require('org.apache.royale.storage.IWebStorage');



/**
 * Constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @constructor
 * @implements {org.apache.royale.storage.IWebStorage}
 */
org.apache.royale.storage.providers.LocalStorageProvider = function() {
  
};


/**
 * Returns true if the platform provides local storage.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @return {boolean}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.storageAvailable = function() {
  var /** @type {boolean} */ result = false;
  
  try {
    result = 'localStorage' in window && window['localStorage'] !== null;
  } catch (e) {
    result = false;
  }
  return result;
};


/**
 * Stores a value with a key.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @param {string} value
 * @return {boolean}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.setItem = function(key, value) {
  if (!this.storageAvailable())
    return false;
  
  window.localStorage.setItem(key, value);
  return true;
};


/**
 * Returns the value associated with the key, or undefined if there is
 * no value stored. Note that a String version of the value is stored.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {string}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.getItem = function(key) {
  if (!this.storageAvailable())
    return null;
  var /** @type {string} */ result = null;
  
  result = window.localStorage.getItem(key);
  return result;
};


/**
 * Removed the value and, possibly, the key from local storage. On some
 * platforms, retriving the value after removing it will be an error, on
 * others it may return undefined or null.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {boolean}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.removeItem = function(key) {
  if (!this.storageAvailable())
    return false;
  
  window.localStorage.removeItem(key);
  return true;
};


/**
 * Returns true if there is a value stored for the key.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {boolean}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.hasItem = function(key) {
  if (!this.storageAvailable())
    return false;
  var /** @type {boolean} */ result = false;
  
  result = (window.localStorage[key] !== null);
  return result;
};


/**
 * Clears all values from local storage.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.clear = function() {
  if (!this.storageAvailable())
    return;
  
  window.localStorage.clear();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LocalStorageProvider', qName: 'org.apache.royale.storage.providers.LocalStorageProvider', kind: 'class' }], interfaces: [org.apache.royale.storage.IWebStorage] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'LocalStorageProvider': { type: '', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider'},
        'storageAvailable': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider'},
        'setItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'getItem': { type: 'String', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider', parameters: function () { return [ 'String', false ]; }},
        'removeItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider', parameters: function () { return [ 'String', false ]; }},
        'hasItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider', parameters: function () { return [ 'String', false ]; }},
        'clear': { type: 'void', declaredBy: 'org.apache.royale.storage.providers.LocalStorageProvider'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.storage.providers.LocalStorageProvider.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./LocalStorageProvider.js.map
