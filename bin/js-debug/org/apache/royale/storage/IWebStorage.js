/**
 * Generated by Apache Royale Compiler from org/apache/royale/storage/IWebStorage.as
 * org.apache.royale.storage.IWebStorage
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.storage.IWebStorage');
/* Royale Dependency List: */



/**
 * @interface
 */
org.apache.royale.storage.IWebStorage = function() {
};
/**
 * Returns true if the platform provides local storage.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @return {boolean}
 */
org.apache.royale.storage.IWebStorage.prototype.storageAvailable = function() {
};
/**
 * Stores a value with a key.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @param {string} value
 * @return {boolean}
 */
org.apache.royale.storage.IWebStorage.prototype.setItem = function(key, value) {
};
/**
 * Returns the value of a key, if present. If the key is not
 * present in the storage area, null or undefined may be returned.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {string}
 */
org.apache.royale.storage.IWebStorage.prototype.getItem = function(key) {
};
/**
 * Removes the key=value pair from storage.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {boolean}
 */
org.apache.royale.storage.IWebStorage.prototype.removeItem = function(key) {
};
/**
 * Returns true if there is a value associated with the key.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {boolean}
 */
org.apache.royale.storage.IWebStorage.prototype.hasItem = function(key) {
};
org.apache.royale.storage.IWebStorage.prototype.clear = function() {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.storage.IWebStorage.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IWebStorage', qName: 'org.apache.royale.storage.IWebStorage', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.storage.IWebStorage.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'storageAvailable': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.IWebStorage'},
        'setItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.IWebStorage', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'getItem': { type: 'String', declaredBy: 'org.apache.royale.storage.IWebStorage', parameters: function () { return [ 'String', false ]; }},
        'removeItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.IWebStorage', parameters: function () { return [ 'String', false ]; }},
        'hasItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.IWebStorage', parameters: function () { return [ 'String', false ]; }},
        'clear': { type: 'void', declaredBy: 'org.apache.royale.storage.IWebStorage'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.storage.IWebStorage.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./IWebStorage.js.map
