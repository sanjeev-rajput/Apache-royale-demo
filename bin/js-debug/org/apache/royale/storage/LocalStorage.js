/**
 * Generated by Apache Royale Compiler from org/apache/royale/storage/LocalStorage.as
 * org.apache.royale.storage.LocalStorage
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.storage.LocalStorage');
/* Royale Dependency List: org.apache.royale.core.ValuesManager,org.apache.royale.storage.IWebStorage,org.apache.royale.utils.Language*/




/**
 * Constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @constructor
 */
org.apache.royale.storage.LocalStorage = function() {
  this.org_apache_royale_storage_LocalStorage_storageProvider = org.apache.royale.utils.Language.as(org.apache.royale.core.ValuesManager.valuesImpl.newInstance(this, "iStorageProvider"), org.apache.royale.storage.IWebStorage);
};


/**
 * @private
 * @type {org.apache.royale.storage.IWebStorage}
 */
org.apache.royale.storage.LocalStorage.prototype.org_apache_royale_storage_LocalStorage_storageProvider;


/**
 * Returns true if the platform provides local storage.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @return {boolean}
 */
org.apache.royale.storage.LocalStorage.prototype.storageAvailable = function() {
  return this.org_apache_royale_storage_LocalStorage_storageProvider.storageAvailable();
};


/**
 * Stores a value with a key.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @param {Object} value
 * @return {boolean}
 */
org.apache.royale.storage.LocalStorage.prototype.setItem = function(key, value) {
  var /** @type {string} */ valueAsString = value.toString();
  return this.org_apache_royale_storage_LocalStorage_storageProvider.setItem(key, valueAsString);
};


/**
 * Returns the value associated with the key, or undefined if there is
 * no value stored. Note that a String version of the value may have been
 * stored, depending on the platform.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {Object}
 */
org.apache.royale.storage.LocalStorage.prototype.getItem = function(key) {
  var /** @type {Object} */ value = this.org_apache_royale_storage_LocalStorage_storageProvider.getItem(key);
  return value;
};


/**
 * Removed the value and, possibly, the key from local storage. On some
 * platforms, retriving the value after removing it will be an error, on
 * others it may return undefined or null.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {boolean}
 */
org.apache.royale.storage.LocalStorage.prototype.removeItem = function(key) {
  return this.org_apache_royale_storage_LocalStorage_storageProvider.removeItem(key);
};


/**
 * Returns true if there is a value stored for the key.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 * @param {string} key
 * @return {boolean}
 */
org.apache.royale.storage.LocalStorage.prototype.hasItem = function(key) {
  return this.org_apache_royale_storage_LocalStorage_storageProvider.hasItem(key);
};


/**
 * Clears all values from local storage.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignoreimport window
 */
org.apache.royale.storage.LocalStorage.prototype.clear = function() {
  this.org_apache_royale_storage_LocalStorage_storageProvider.clear();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.storage.LocalStorage.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LocalStorage', qName: 'org.apache.royale.storage.LocalStorage', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.storage.LocalStorage.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'LocalStorage': { type: '', declaredBy: 'org.apache.royale.storage.LocalStorage'},
        'storageAvailable': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.LocalStorage'},
        'setItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.LocalStorage', parameters: function () { return [ 'String', false ,'Object', false ]; }},
        'getItem': { type: 'Object', declaredBy: 'org.apache.royale.storage.LocalStorage', parameters: function () { return [ 'String', false ]; }},
        'removeItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.LocalStorage', parameters: function () { return [ 'String', false ]; }},
        'hasItem': { type: 'Boolean', declaredBy: 'org.apache.royale.storage.LocalStorage', parameters: function () { return [ 'String', false ]; }},
        'clear': { type: 'void', declaredBy: 'org.apache.royale.storage.LocalStorage'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.storage.LocalStorage.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./LocalStorage.js.map
