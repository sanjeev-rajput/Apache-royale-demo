/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/ObjectUtil.as
 * org.apache.royale.utils.ObjectUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.ObjectUtil');
/* Royale Dependency List: org.apache.royale.utils.Language*/



/**
 * @constructor
 */
org.apache.royale.utils.ObjectUtil = function() {
  throw new Error("ObjectUtil should not be instantiated.");
};


/**
 * Count the properties in an object.
 * @asparam obj Object to count the properties of
 * @asreturn The number of properties in the specified object. If the specified object is null, this is 0.
 * @nocollapse
 * @param {Object} obj
 * @return {number}
 */
org.apache.royale.utils.ObjectUtil.numProperties = function(obj) {
  var /** @type {number} */ count = 0;
  var foreachiter0_target = obj;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var prop = foreachiter0_target[foreachiter0];
  {
    count++;
  }}
  
  return count;
};


/**
 * Check if an object has any properties
 * @asparam obj Object to check for properties
 * @asreturn If the specified object has any properties. If the specified object is null, this is false.
 * @nocollapse
 * @param {Object} obj
 * @return {boolean}
 */
org.apache.royale.utils.ObjectUtil.hasProperties = function(obj) {
  var foreachiter1_target = obj;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var prop = foreachiter1_target[foreachiter1];
  {
    return true;
  }}
  
  return false;
};


/**
 * Check if the properties of an object are all the same
 * @asparam obj Object whose properties should be checked
 * @asparam type Type to check the object's properties against
 * @asreturn If all of the properties of the specified object are of the specified type
 * @nocollapse
 * @param {Object} obj
 * @param {Object} type
 * @return {boolean}
 */
org.apache.royale.utils.ObjectUtil.isUniformPropertyType = function(obj, type) {
  var foreachiter2_target = obj;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var prop = foreachiter2_target[foreachiter2];
  {
    if (!org.apache.royale.utils.Language.is(prop, type)) {
      return false;
    }
  }}
  
  return true;
};


/**
 * Copy an object
 * @asparam obj Object to copy
 * @asparam into (optional) Object to copy into. If null, a new object is created.
 * @asreturn A one-level deep copy of the object or null if the argument is null
 * @nocollapse
 * @param {Object} obj
 * @param {Object=} into
 * @return {Object}
 */
org.apache.royale.utils.ObjectUtil.shallowCopy = function(obj, into) {
  into = typeof into !== 'undefined' ? into : null;
  if (into == null) {
    into = {};
  }
  if (obj != null) {
    for (var /** @type {*} */ o in obj) {
      into[o] = obj[o];
    }
  }
  return into;
};


/**
 * Convert the object to an array. Note that the order of the array is undefined.
 * @asparam obj Object to convert
 * @asreturn An array with all of the properties of the given object or null if the given object is null
 * @nocollapse
 * @param {Object} obj
 * @return {Array}
 */
org.apache.royale.utils.ObjectUtil.toArray = function(obj) {
  if (obj == null) {
    return null;
  } else {
    var /** @type {Array} */ ret = [];
    var foreachiter3_target = obj;
    for (var foreachiter3 in foreachiter3_target) 
    {
    var prop = foreachiter3_target[foreachiter3];
    {
      ret.push(prop);
    }}
    
    return ret;
  }
};


/**
 * Convert the object to a string of form: PROP: VAL&PROP: VAL where: PROP is a property VAL is its corresponding value & is the specified optional delimiter
 * This method is named with underscore "_" since toString is in use
 * @asparam obj Object to convert
 * @asparam delimiter (optional) Delimiter of property/value pairs
 * @asreturn An string of all property/value pairs delimited by the given string or null if the input object or delimiter is null.
 * @nocollapse
 * @param {Object=} obj
 * @param {string=} delimiter
 * @return {string}
 */
org.apache.royale.utils.ObjectUtil._toString = function(obj, delimiter) {
  obj = typeof obj !== 'undefined' ? obj : null;
  delimiter = typeof delimiter !== 'undefined' ? delimiter : "\n";
  if (obj == null || delimiter == null) {
    return "";
  } else {
    var /** @type {Array} */ ret = [];
    for (var /** @type {Object} */ s in obj) {
      ret.push(s + ": " + obj[s]);
    }
    return ret.join(delimiter);
  }
};


/**
 * @nocollapse
 * @param {Object} obj
 * @param {string} name
 * @param {*} value
 */
org.apache.royale.utils.ObjectUtil.addNonEnumerableProperty = function(obj, name, value) {
  Object.defineProperty(obj, name, {"value":value, "enumerable":false});
  
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.utils.ObjectUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ObjectUtil', qName: 'org.apache.royale.utils.ObjectUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.utils.ObjectUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'ObjectUtil': { type: '', declaredBy: 'org.apache.royale.utils.ObjectUtil'},
        '|numProperties': { type: 'int', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', false ]; }},
        '|hasProperties': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', false ]; }},
        '|isUniformPropertyType': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', false ,'Class', false ]; }},
        '|shallowCopy': { type: 'Object', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', false ,'Object', true ]; }},
        '|toArray': { type: 'Array', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', false ]; }},
        '|_toString': { type: 'String', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', true ,'String', true ]; }},
        '|addNonEnumerableProperty': { type: 'void', declaredBy: 'org.apache.royale.utils.ObjectUtil', parameters: function () { return [ 'Object', false ,'String', false ,'*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.utils.ObjectUtil.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ObjectUtil.js.map
