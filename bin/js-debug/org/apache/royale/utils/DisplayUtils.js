/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/DisplayUtils.as
 * org.apache.royale.utils.DisplayUtils
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.DisplayUtils');
/* Royale Dependency List: org.apache.royale.core.IParent,org.apache.royale.core.IRenderedObject,org.apache.royale.core.ITransformHost,org.apache.royale.core.IUIBase,org.apache.royale.geom.Matrix,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.utils.DisplayUtils = function() {
};


/**
 *  Gets the bounding box of an object relative to the screen ignoring any scrolling.
 * 
 *  @asparam obj The object to test.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion HTMLElement
 *  @royaleignorecoercion ITransformHost
 * @nocollapse
 * @param {org.apache.royale.core.IUIBase} obj
 * @param {org.apache.royale.geom.Rectangle=} boundsBeforeTransform
 * @return {org.apache.royale.geom.Rectangle}
 */
org.apache.royale.utils.DisplayUtils.getScreenBoundingRect = function(obj, boundsBeforeTransform) {
  boundsBeforeTransform = typeof boundsBeforeTransform !== 'undefined' ? boundsBeforeTransform : null;
  
  var /** @type {org.apache.royale.geom.Rectangle} */ bounds = boundsBeforeTransform;
  if (bounds == null) {
    var /** @type {Object} */ r = obj.element.getBoundingClientRect();
    bounds = new org.apache.royale.geom.Rectangle(r.left, r.top, r.right - r.left, r.bottom - r.top);
  }
  bounds.x -= window.pageXOffset;
  bounds.y -= window.pageYOffset;
  if (org.apache.royale.utils.Language.is(obj.element, SVGElement)) {
    var /** @type {org.apache.royale.geom.Matrix} */ m = org.apache.royale.utils.DisplayUtils.getTransormMatrix(obj);
    var /** @type {org.apache.royale.geom.Point} */ tl = m.transformPoint(bounds.topLeft);
    var /** @type {org.apache.royale.geom.Point} */ tr = m.transformPoint(new org.apache.royale.geom.Point(bounds.right, bounds.top));
    var /** @type {org.apache.royale.geom.Point} */ bl = m.transformPoint(new org.apache.royale.geom.Point(bounds.left, bounds.bottom));
    var /** @type {org.apache.royale.geom.Point} */ br = m.transformPoint(bounds.bottomRight);
    var /** @type {number} */ leftX = Math.min(tl.x, tr.x, bl.x, br.x);
    var /** @type {number} */ topY = Math.min(tl.y, tr.y, bl.y, br.y);
    var /** @type {number} */ rightX = Math.max(tl.x, tr.x, bl.x, br.x);
    var /** @type {number} */ bottomY = Math.max(tl.y, tr.y, bl.y, br.y);
    bounds.top = topY;
    bounds.left = leftX;
    bounds.bottom = bottomY;
    bounds.right = rightX;
  }
  return bounds;
};


/**
 *  Gets a composition all transform matrices applied to an IUIBase. Currently only works for SVG on JS side.
 * 
 *  @asparam obj The object to test.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion HTMLElement
 *  @royaleignorecoercion org.apache.royale.core.ITransformHost
 * @nocollapse
 * @param {org.apache.royale.core.IUIBase} obj
 * @return {org.apache.royale.geom.Matrix}
 */
org.apache.royale.utils.DisplayUtils.getTransormMatrix = function(obj) {
  
  var /** @type {Object} */ svgElement = obj.transformElement;
  var /** @type {SVGMatrix} */ sm = svgElement.getScreenCTM();
  return new org.apache.royale.geom.Matrix(sm.a, sm.b, sm.c, sm.d, sm.e, sm.f);
};


/**
 *  Evaluates the bounding box of two objects to see if thier bounding boxes overlap.
 * 
 *  @asparam obj1 The object to test.
 *  @asparam obj2 The object to test against.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion HTMLElement
 * @nocollapse
 * @param {org.apache.royale.core.IUIBase} obj1
 * @param {org.apache.royale.core.IUIBase} obj2
 * @return {boolean}
 */
org.apache.royale.utils.DisplayUtils.objectsOverlap = function(obj1, obj2) {
  
  var /** @type {Object} */ r1 = obj1.element.getBoundingClientRect();
  var /** @type {Object} */ r2 = obj2.element.getBoundingClientRect();
  var /** @type {org.apache.royale.geom.Rectangle} */ bounds1 = new org.apache.royale.geom.Rectangle(r1.x, r1.y, r1.width, r1.height);
  var /** @type {org.apache.royale.geom.Rectangle} */ bounds2 = new org.apache.royale.geom.Rectangle(r2.x, r2.y, r2.width, r2.height);
  return bounds1.intersects(bounds2);
};


/**
 *  Evaluates the object to see if it overlaps or intersects with
 *  the point specified by the x and y parameters.
 *  The x and y parameters specify a point in the top level coordinate space,
 *  not the container that contains the object being tested (unless parent is the top level).
 * 
 *  @asparam x The x coordinate to test against this object.
 *  @asparam y The y coordinate to test against this object.
 *  @asparam obj The object to test.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion HTMLElement
 * @nocollapse
 * @param {number} x
 * @param {number} y
 * @param {org.apache.royale.core.IUIBase} obj
 * @return {boolean}
 */
org.apache.royale.utils.DisplayUtils.hitTestPoint = function(x, y, obj) {
  
  var /** @type {Array} */ result = org.apache.royale.utils.DisplayUtils.examineElementsUnderPoint(x, y, obj.element);
  return result.length > 0;
};


/**
 * @private
 * @param {number} x
 * @param {number} y
 * @param {Element=} elem
 * @return {Array}
 */
org.apache.royale.utils.DisplayUtils.examineElementsUnderPoint = function(x, y, elem) {
  elem = typeof elem !== 'undefined' ? elem : null;
  var /** @type {Element} */ element;
  var /** @type {Array} */ elements = [];
  var /** @type {Array} */ visibility = [];
  var /** @type {Element} */ found;
  while (true) {
    element = document.elementFromPoint(x, y);
    if (!element || element === document.documentElement) {
      break;
    }
    elements[elements.length] = element;
    var /** @type {Element} */ parent = element;
    while (parent) {
      if (elem && elem == parent) {
        found = parent;
        break;
      }
      parent = parent.parentElement;
    }
    visibility[visibility.length] = element.style.visibility;
    element.style.visibility = 'hidden';
  }
  for (var /** @type {number} */ i = 0; i < elements.length; i++) {
    elements[i].style.visibility = visibility[i];
  }
  if (elem)
    return found ? [found] : [];
  elements.reverse();
  return elements;
};


/**
 *  Determines if the potentialChild has the container somewhere in its parent hierarchy.
 *
 *  @asparam container The container to check
 *  @asparam potentialChild The target to verify as part of the child tree below the container
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 *  @royaleignorecoercion org.apache.royale.core.IRenderedObject
 *
 * @nocollapse
 * @param {org.apache.royale.core.IParent} container
 * @param {org.apache.royale.core.IUIBase} potentialChild
 * @return {boolean}
 */
org.apache.royale.utils.DisplayUtils.containerContains = function(container, potentialChild) {
  
  return org.apache.royale.utils.Language.is(container, org.apache.royale.core.IRenderedObject) && container.element.contains(potentialChild.element);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.utils.DisplayUtils.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DisplayUtils', qName: 'org.apache.royale.utils.DisplayUtils', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.utils.DisplayUtils.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|getScreenBoundingRect': { type: 'org.apache.royale.geom.Rectangle', declaredBy: 'org.apache.royale.utils.DisplayUtils', parameters: function () { return [ 'org.apache.royale.core.IUIBase', false ,'org.apache.royale.geom.Rectangle', true ]; }},
        '|getTransormMatrix': { type: 'org.apache.royale.geom.Matrix', declaredBy: 'org.apache.royale.utils.DisplayUtils', parameters: function () { return [ 'org.apache.royale.core.IUIBase', false ]; }},
        '|objectsOverlap': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.DisplayUtils', parameters: function () { return [ 'org.apache.royale.core.IUIBase', false ,'org.apache.royale.core.IUIBase', false ]; }},
        '|hitTestPoint': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.DisplayUtils', parameters: function () { return [ 'Number', false ,'Number', false ,'org.apache.royale.core.IUIBase', false ]; }},
        '|containerContains': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.DisplayUtils', parameters: function () { return [ 'org.apache.royale.core.IParent', false ,'org.apache.royale.core.IUIBase', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.utils.DisplayUtils.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./DisplayUtils.js.map
