/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/rgbToHsv.as
 * org.apache.royale.utils.rgbToHsv
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.rgbToHsv');
/* Royale Dependency List: org.apache.royale.utils.HSV*/




/**
 *  Converts RGB values to HSV values.
 *  @asparam r: A uint from 0 to 255 representing the red value.
 *  @asparam g: A uint from 0 to 255 representing the green value.
 *  @asparam b: A uint from 0 to 255 representing the blue value.
 *  @asreturn Returns an HSV object with the properties h, s, and v defined.
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.9.6
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {org.apache.royale.utils.HSV}
 */
org.apache.royale.utils.rgbToHsv = function(r, g, b) {
  var /** @type {number} */ max = (Math.max(r, g, b)) >>> 0;
  var /** @type {number} */ min = (Math.min(r, g, b)) >>> 0;
  var /** @type {number} */ hue = 0;
  var /** @type {number} */ saturation = 0;
  var /** @type {number} */ value = 0;
  if (max == min)
    hue = 0;
  else if (max == r)
    hue = (60 * (g - b) / (max - min) + 360) % 360;
  else if (max == g)
    hue = (60 * (b - r) / (max - min) + 120);
  else if (max == b)
    hue = (60 * (r - g) / (max - min) + 240);
  value = max;
  if (max == 0) {
    saturation = 0;
  } else {
    saturation = (max - min) / max;
  }
  var /** @type {org.apache.royale.utils.HSV} */ hsv = new org.apache.royale.utils.HSV();
  hsv.h = Math.round(hue);
  hsv.s = Math.round(saturation * 100);
  hsv.v = Math.round(value / 255 * 100);
  return hsv;
}
