/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/observeElementSize.as
 * org.apache.royale.utils.observeElementSize
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.observeElementSize');
/* Royale Dependency List: */
goog.provide('org.apache.royale.utils.observeElementSize.referenceMap');



/**
 *
 * @royaleignorecoercion Class
 * @param {HTMLElement} target
 * @param {Function} callback
 * @param {boolean=} stop
 * @return {boolean}
 */
org.apache.royale.utils.observeElementSize = function(target, callback, stop) {
  stop = typeof stop !== 'undefined' ? stop : false;
  var /** @type {boolean} */ isNative = true;
  if (window['ResizeObserver'] !== undefined) {
    var /** @type {Object} */ existing = org.apache.royale.utils.observeElementSize.referenceMap.get(callback);
    if (existing) {
      if (stop)
        existing['unobserve'](target);
      else
        existing['observe'](target);
    } else {
      if (!stop) {
        var /** @type {Object} */ RO =  /** @type {Object|null} */ (window['ResizeObserver']);
        existing = new RO(callback);
        org.apache.royale.utils.observeElementSize.referenceMap.set(callback, existing);
        existing['observe'](target);
      }
    }
  } else {
    isNative = false;
    var /** @type {Array} */ callbacks;
    if (org.apache.royale.utils.observeElementSize['t'] == null) {
      if (stop)
        return false;
      callbacks = [];
      org.apache.royale.utils.observeElementSize.referenceMap.set(org.apache.royale.utils.observeElementSize, callbacks);
      org.apache.royale.utils.observeElementSize['c'] = function(el, callback) {
        var /** @type {Object} */ checks;
        var /** @type {boolean} */ change;
        if (org.apache.royale.utils.observeElementSize.referenceMap.has(el)) {
          checks = org.apache.royale.utils.observeElementSize.referenceMap.get(el);
          var /** @type {number} */ latest = el.offsetHeight;
          if (latest != checks['h'] || checks['ch'] != el.clientHeight) {
            change = true;
            checks['h'] = latest;
            checks['ch'] = el.clientHeight;
          }
          latest = el.offsetWidth;
          if (latest != checks['w'] || checks['cw'] != el.clientWidth) {
            change = true;
            checks['w'] = latest;
            checks['cw'] = el.clientWidth;
          }
        } else {
          checks = {'h':el.offsetHeight, 'ch':el.clientHeight, 'w':el.offsetWidth, 'cw':el.clientWidth};
          org.apache.royale.utils.observeElementSize.referenceMap.set(el, checks);
          change = true;
        }
        if (change) {
          try {
            callback();
          } catch (e) {
          }
        }
      };
      org.apache.royale.utils.observeElementSize['t'] = function() {
        var /** @type {number} */ l = (callbacks.length) >>> 0;
        for (var /** @type {number} */ i = 0; i < l; i++) {
          var /** @type {Function} */ cb = callbacks[i];
          var /** @type {Array} */ els = org.apache.royale.utils.observeElementSize.referenceMap.get(cb);
          if (els) {
            var /** @type {number} */ l2 = (els.length) >>> 0;
            for (var /** @type {number} */ ii = 0; ii < l2; ii++) {
              org.apache.royale.utils.observeElementSize['c'](els[ii], cb);
            }
          }
        }
      };
      org.apache.royale.utils.observeElementSize['t']['interval'] = setInterval(org.apache.royale.utils.observeElementSize['t'], 50);
    } else {
      callbacks = org.apache.royale.utils.observeElementSize.referenceMap.get(org.apache.royale.utils.observeElementSize);
    }
    var /** @type {Array} */ elements;
    var /** @type {number} */ idcb = (callbacks.indexOf(callback)) >> 0;
    if (stop) {
      if (idcb != -1) {
        callbacks.splice(idcb, 1);
        if (callbacks.indexOf(callback) == -1) {
          org.apache.royale.utils.observeElementSize.referenceMap.delete(callback);
        }
        if (callbacks.length == 0) {
          org.apache.royale.utils.observeElementSize.referenceMap = new WeakMap();
          if (org.apache.royale.utils.observeElementSize['t']) {
            clearInterval(Number(org.apache.royale.utils.observeElementSize['t']['interval']));
            org.apache.royale.utils.observeElementSize['t'] = null;
          }
          org.apache.royale.utils.observeElementSize['c'] = null;
        }
      }
    } else {
      callbacks.push(callback);
      elements = org.apache.royale.utils.observeElementSize.referenceMap.get(callback);
      if (!elements) {
        elements = [];
        org.apache.royale.utils.observeElementSize.referenceMap.set(callback, elements);
      }
      if (elements.indexOf(target) == -1)
        elements.push(target);
    }
  }
  return isNative;
}


/**
 * @package
 * @type {WeakMap}
 */
org.apache.royale.utils.observeElementSize.referenceMap = new WeakMap()
