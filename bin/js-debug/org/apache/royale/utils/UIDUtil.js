/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/UIDUtil.as
 * org.apache.royale.utils.UIDUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.UIDUtil');
/* Royale Dependency List: org.apache.royale.utils.BinaryData,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.utils.UIDUtil = function() {
};


/**
 * @private
 * @const
 * @type {Array}
 */
org.apache.royale.utils.UIDUtil.ALPHA_CHAR_CODES = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.utils.UIDUtil.DASH = 45;


/**
 * @private
 * @type {org.apache.royale.utils.BinaryData}
 */
org.apache.royale.utils.UIDUtil._UIDBuffer;


/**
 *  Generates a UID (unique identifier) based on ActionScript's
 *  pseudo-random number generator and the current time.
 *
 *  <p>The UID has the form
 *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>
 *  where X is a hexadecimal digit (0-9, A-F).</p>
 *
 *  <p>This UID will not be truly globally unique; but it is the best
 *  we can do without player support for UID generation.</p>
 *
 *  @asreturn The newly-generated UID.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 1.0.0
 *  @productversion Royale 0.0
 * @nocollapse
 * @return {string}
 */
org.apache.royale.utils.UIDUtil.createUID = function() {
  var /** @type {number} */ i = 0;
  var /** @type {number} */ j = 0;
  //var /** @type {number} */ i = 0;
  //var /** @type {number} */ j = 0;
  org.apache.royale.utils.UIDUtil.UIDBuffer.position = 0;
  for (i = 0; i < 8; i++) {
    org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte((org.apache.royale.utils.UIDUtil.ALPHA_CHAR_CODES[org.apache.royale.utils.Language._int(Math.random() * 16)]) >> 0);
  }
  for (i = 0; i < 3; i++) {
    org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte(org.apache.royale.utils.UIDUtil.DASH);
    for (j = 0; j < 4; j++) {
      org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte((org.apache.royale.utils.UIDUtil.ALPHA_CHAR_CODES[org.apache.royale.utils.Language._int(Math.random() * 16)]) >> 0);
    }
  }
  org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte(org.apache.royale.utils.UIDUtil.DASH);
  var /** @type {number} */ time = (Math.floor(new Date().getTime() / 1000)) >>> 0;
  
  var /** @type {string} */ timeString = time.toString(16).toUpperCase();
  for (i = 8; i > timeString.length; i--)
    org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte(48);
  org.apache.royale.utils.UIDUtil.UIDBuffer.writeUTFBytes(timeString);
  for (i = 0; i < 4; i++) {
    org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte((org.apache.royale.utils.UIDUtil.ALPHA_CHAR_CODES[org.apache.royale.utils.Language._int(Math.random() * 16)]) >> 0);
  }
  org.apache.royale.utils.UIDUtil.UIDBuffer.position = 0;
  return org.apache.royale.utils.UIDUtil.UIDBuffer.toString();
};


/**
 * Converts a 128-bit UID encoded as a ByteArray to a String representation.
 * The format matches that generated by createUID. If a suitable ByteArray
 * is not provided, null is returned.
 * 
 * @asparam ba ByteArray 16 bytes in length representing a 128-bit UID.
 * 
 * @asreturn String representation of the UID, or null if an invalid
 * ByteArray is provided.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 1.0.0
 *  @productversion Royale 0.0
 * @nocollapse
 * @param {org.apache.royale.utils.BinaryData} ba
 * @return {string}
 */
org.apache.royale.utils.UIDUtil.fromBinary = function(ba) {
  if (ba != null && ba.length >= 16 && ba.bytesAvailable >= 16) {
    org.apache.royale.utils.UIDUtil.UIDBuffer.position = 0;
    var /** @type {number} */ index = 0;
    for (var /** @type {number} */ i = 0; i < 16; i++) {
      if (i == 4 || i == 6 || i == 8 || i == 10)
        org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte(org.apache.royale.utils.UIDUtil.DASH);
      var /** @type {number} */ b = ba.readByte();
      org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte((org.apache.royale.utils.UIDUtil.ALPHA_CHAR_CODES[(b & 0xF0) >>> 4]) >> 0);
      org.apache.royale.utils.UIDUtil.UIDBuffer.writeByte((org.apache.royale.utils.UIDUtil.ALPHA_CHAR_CODES[(b & 0x0F)]) >> 0);
    }
    org.apache.royale.utils.UIDUtil.UIDBuffer.position = 0;
    return org.apache.royale.utils.UIDUtil.UIDBuffer.readUTFBytes((org.apache.royale.utils.UIDUtil.UIDBuffer.length) >>> 0);
  }
  return null;
};


/**
 * A utility method to check whether a String value represents a 
 * correctly formatted UID value. UID values are expected to be 
 * in the format generated by createUID(), implying that only
 * capitalized A-F characters in addition to 0-9 digits are
 * supported.
 * 
 * @asparam uid The value to test whether it is formatted as a UID.
 * 
 * @asreturn Returns true if the value is formatted as a UID.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 1.0.0
 *  @productversion Royale 0.0
 * @nocollapse
 * @param {string} uid
 * @return {boolean}
 */
org.apache.royale.utils.UIDUtil.isUID = function(uid) {
  if (uid != null && uid.length == 36) {
    for (var /** @type {number} */ i = 0; i < 36; i++) {
      var /** @type {number} */ c = uid.charCodeAt(i);
      if (i == 8 || i == 13 || i == 18 || i == 23) {
        if (c != org.apache.royale.utils.UIDUtil.DASH) {
          return false;
        }
      } else if (c < 48 || c > 70 || (c > 57 && c < 65)) {
        return false;
      }
    }
    return true;
  }
  return false;
};


/**
 * Converts a UID formatted String to a BinaryData. The UID must be in the
 * format generated by createUID, otherwise null is returned.
 * 
 * @asparam String representing a 128-bit UID
 * 
 * @asreturn ByteArray 16 bytes in length representing the 128-bits of the
 * UID or null if the uid could not be converted.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 1.0.0
 *  @productversion Royale 0.0
 * @nocollapse
 * @param {string} uid
 * @return {org.apache.royale.utils.BinaryData}
 */
org.apache.royale.utils.UIDUtil.toBinary = function(uid) {
  if (org.apache.royale.utils.UIDUtil.isUID(uid)) {
    var /** @type {org.apache.royale.utils.BinaryData} */ result = new org.apache.royale.utils.BinaryData();
    for (var /** @type {number} */ i = 0; i < uid.length; i++) {
      var /** @type {string} */ c = uid.charAt(i);
      if (c == "-")
        continue;
      var /** @type {number} */ h1 = org.apache.royale.utils.UIDUtil.getDigit(c);
      i++;
      var /** @type {number} */ h2 = org.apache.royale.utils.UIDUtil.getDigit(uid.charAt(i));
      result.writeByte(((h1 << 4) | h2) & 0xFF);
    }
    result.position = 0;
    return result;
  }
  return null;
};


/**
 * Returns the decimal representation of a hex digit.
 * @asprivate
 * @private
 * @param {string} hex
 * @return {number}
 */
org.apache.royale.utils.UIDUtil.getDigit = function(hex) {
  return (parseInt(hex, 16)) >>> 0;
};


/**
 * @nocollapse
 * @type {org.apache.royale.utils.BinaryData}
 */
org.apache.royale.utils.UIDUtil.UIDBuffer;


org.apache.royale.utils.UIDUtil.get__UIDBuffer = function() {
  if (org.apache.royale.utils.UIDUtil._UIDBuffer == null)
    org.apache.royale.utils.UIDUtil._UIDBuffer = new org.apache.royale.utils.BinaryData();
  return org.apache.royale.utils.UIDUtil._UIDBuffer;
};


Object.defineProperties(org.apache.royale.utils.UIDUtil, /** @lends {org.apache.royale.utils.UIDUtil} */ {
/**
 * @type {org.apache.royale.utils.BinaryData}
 */
UIDBuffer: {
get: org.apache.royale.utils.UIDUtil.get__UIDBuffer}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.utils.UIDUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'UIDUtil', qName: 'org.apache.royale.utils.UIDUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.utils.UIDUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|createUID': { type: 'String', declaredBy: 'org.apache.royale.utils.UIDUtil'},
        '|fromBinary': { type: 'String', declaredBy: 'org.apache.royale.utils.UIDUtil', parameters: function () { return [ 'org.apache.royale.utils.BinaryData', false ]; }},
        '|isUID': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.UIDUtil', parameters: function () { return [ 'String', false ]; }},
        '|toBinary': { type: 'org.apache.royale.utils.BinaryData', declaredBy: 'org.apache.royale.utils.UIDUtil', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.utils.UIDUtil.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./UIDUtil.js.map
