/**
 * Generated by Apache Royale Compiler from org/apache/royale/utils/ClassSelectorList.as
 * org.apache.royale.utils.ClassSelectorList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.utils.ClassSelectorList');
/* Royale Dependency List: org.apache.royale.core.IUIBase*/




/**
 * @constructor
 * @param {org.apache.royale.core.IUIBase} component
 */
org.apache.royale.utils.ClassSelectorList = function(component) {
  this.org_apache_royale_utils_ClassSelectorList_component = component;
};


/**
 * @private
 * @type {org.apache.royale.core.IUIBase}
 */
org.apache.royale.utils.ClassSelectorList.prototype.org_apache_royale_utils_ClassSelectorList_component;


/**
 * @private
 * @type {HTMLElement}
 */
org.apache.royale.utils.ClassSelectorList.prototype.org_apache_royale_utils_ClassSelectorList__override;


/**
 * @royaleignorecoercion HTMLElement
 * @param {Object} value
 */
org.apache.royale.utils.ClassSelectorList.prototype.setOverride = function(value) {
  this.org_apache_royale_utils_ClassSelectorList__override = value;
};


/**
 * @private
 * @type {number}
 */
org.apache.royale.utils.ClassSelectorList.prototype.org_apache_royale_utils_ClassSelectorList_startIndex = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.utils.ClassSelectorList.prototype.org_apache_royale_utils_ClassSelectorList_count = 0;


/**
 * Add a class selector to the list.
 * 
 * @asparam name Name of selector to add.
 * 
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9.3
 * @param {string} name
 */
org.apache.royale.utils.ClassSelectorList.prototype.add = function(name) {
  this.org_apache_royale_utils_ClassSelectorList_classSelectorTarget.classList.add(name);
  if (!this.org_apache_royale_utils_ClassSelectorList_component.parent)
    this.org_apache_royale_utils_ClassSelectorList_startIndex++;
};


/**
 * Removes a class selector from the list.
 * 
 * @asparam name Name of selector to remove.
 *
 * @royaleignorecoercion HTMLElement
 * @royaleignorecoercion DOMTokenList
 * 
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9.3
 * @param {string} name
 */
org.apache.royale.utils.ClassSelectorList.prototype.remove = function(name) {
  var /** @type {HTMLElement} */ positioner = this.org_apache_royale_utils_ClassSelectorList_classSelectorTarget;
  var /** @type {DOMTokenList} */ classList = positioner.classList;
  for (var /** @type {number} */ i = 0; i < this.org_apache_royale_utils_ClassSelectorList_startIndex; i++) {
    if (classList.item(i) == name)
      this.org_apache_royale_utils_ClassSelectorList_startIndex--;
  }
  positioner.classList.remove(name);
};


/**
 * Add or remove a class selector to/from the list.
 * 
 * @asparam name Name of selector to add or remove.
 * @asparam value True to add, False to remove.
 * 
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9.3
 * @param {string} name
 * @param {boolean} value
 */
org.apache.royale.utils.ClassSelectorList.prototype.toggle = function(name, value) {
  if (value)
    this.org_apache_royale_utils_ClassSelectorList_classSelectorTarget.classList.add(name);
  else
    this.org_apache_royale_utils_ClassSelectorList_classSelectorTarget.classList.remove(name);
  if (!this.org_apache_royale_utils_ClassSelectorList_component.parent && value)
    this.org_apache_royale_utils_ClassSelectorList_startIndex++;
};


/**
 *  Search for the name in the element class list 
 *
 *  @asparam name Name of selector to find.
 *  @asreturn return true if the name is found or false otherwise.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.9.3
 * @param {string} name
 * @return {boolean}
 */
org.apache.royale.utils.ClassSelectorList.prototype.contains = function(name) {
  return this.org_apache_royale_utils_ClassSelectorList_classSelectorTarget.classList.contains(name);
  
};


/**
 * Add a space-separated list of names.
 * @asparam names Space-separated list of names to add.
 * 
 * @royaleignorecoercion HTMLElement
 * @royaleignorecoercion DOMTokenList
 * 
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9.3
 * @param {string} names
 */
org.apache.royale.utils.ClassSelectorList.prototype.addNames = function(names) {
  var /** @type {HTMLElement} */ positioner = this.org_apache_royale_utils_ClassSelectorList_classSelectorTarget;
  var /** @type {DOMTokenList} */ classList = positioner.classList;
  if (this.org_apache_royale_utils_ClassSelectorList_component.parent) {
    while (this.org_apache_royale_utils_ClassSelectorList_count > 0) {
      var /** @type {string} */ name = classList.item(this.org_apache_royale_utils_ClassSelectorList_startIndex);
      classList.remove(name);
      this.org_apache_royale_utils_ClassSelectorList_count = (classList.length - this.org_apache_royale_utils_ClassSelectorList_startIndex) >> 0;
    }
  }
  if (this.org_apache_royale_utils_ClassSelectorList_startIndex > 0) {
    positioner.className += " " + names;
  } else {
    positioner.className = names;
  }
  this.org_apache_royale_utils_ClassSelectorList_count = (classList.length - this.org_apache_royale_utils_ClassSelectorList_startIndex) >> 0;
};


/**
 * @type {HTMLElement}
 */
org.apache.royale.utils.ClassSelectorList.prototype.org_apache_royale_utils_ClassSelectorList_classSelectorTarget;


org.apache.royale.utils.ClassSelectorList.prototype.get__org_apache_royale_utils_ClassSelectorList_classSelectorTarget = function() {
  return this.org_apache_royale_utils_ClassSelectorList__override || this.org_apache_royale_utils_ClassSelectorList_component.positioner;
};


Object.defineProperties(org.apache.royale.utils.ClassSelectorList.prototype, /** @lends {org.apache.royale.utils.ClassSelectorList.prototype} */ {
/**
 * @type {HTMLElement}
 */
org_apache_royale_utils_ClassSelectorList_classSelectorTarget: {
get: org.apache.royale.utils.ClassSelectorList.prototype.get__org_apache_royale_utils_ClassSelectorList_classSelectorTarget}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.utils.ClassSelectorList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ClassSelectorList', qName: 'org.apache.royale.utils.ClassSelectorList', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.utils.ClassSelectorList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'ClassSelectorList': { type: '', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'org.apache.royale.core.IUIBase', false ]; }},
        'setOverride': { type: 'void', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'Object', false ]; }},
        'add': { type: 'void', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'String', false ]; }},
        'remove': { type: 'void', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'String', false ]; }},
        'toggle': { type: 'void', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'String', false ,'Boolean', false ]; }},
        'contains': { type: 'Boolean', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'String', false ]; }},
        'addNames': { type: 'void', declaredBy: 'org.apache.royale.utils.ClassSelectorList', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.utils.ClassSelectorList.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ClassSelectorList.js.map
