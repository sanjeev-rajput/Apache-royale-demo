/**
 * Generated by Apache Royale Compiler from views/ContentLoaderIframe.mxml
 * views.ContentLoaderIframe
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.ContentLoaderIframe');
/* Royale Dependency List: org.apache.royale.html.elements.Iframe,org.apache.royale.jewel.Image,com.event.DsEvent,org.apache.royale.events.Event,org.apache.royale.events.MouseEvent,XML*/

goog.require('org.apache.royale.jewel.ResponsiveView');



/**
 * @constructor
 * @extends {org.apache.royale.jewel.ResponsiveView}
 */
views.ContentLoaderIframe = function() {
  views.ContentLoaderIframe.base(this, 'constructor');
  
  /**
   * @private
   * @type {org.apache.royale.html.elements.Iframe}
   */
  this.iFrm_;
  
  /**
   * @private
   * @type {org.apache.royale.jewel.Image}
   */
  this.hideMe_;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldd;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldp;

  this.generateMXMLAttributes([
    1,
    'visible',
    true,
    false,
    0,
    1,
    'initComplete',
    this.$EH_12_0
  ]);
  
};
goog.inherits(views.ContentLoaderIframe, org.apache.royale.jewel.ResponsiveView);




/**
 * @private
 * @type {views.ContentLoaderIframe}
 */
views.ContentLoaderIframe._instance = null;


/**
 * @private
 */
views.ContentLoaderIframe.prototype.views_ContentLoaderIframe_init = function() {
  views.ContentLoaderIframe._instance = this;
};


;


/**
 * @param {Object} data
 */
views.ContentLoaderIframe.prototype.loadPage = function(data) {
  this.visible = true;
  this.iFrm.src = org.apache.royale.utils.Language.string(data["url"]);
  com.event.DsEvent.instance.dispatch(com.event.DsEvent.IFRAMEOPENED);
};


/**
 */
views.ContentLoaderIframe.prototype.disposeMe = function() {
  this.iFrm.src = "ht-pages/loading.html";
  this.visible = false;
  com.event.DsEvent.instance.dispatch(com.event.DsEvent.IFRAMECLOSED);
};


/**
 * @return {boolean}
 */
views.ContentLoaderIframe.prototype.visibleState = function() {
  return views.ContentLoaderIframe._instance.visible;
};





/**
 * @nocollapse
 * @export
 * @type {views.ContentLoaderIframe}
 */
views.ContentLoaderIframe.instance;


views.ContentLoaderIframe.get__instance = function() {
  return views.ContentLoaderIframe._instance;
};


Object.defineProperties(views.ContentLoaderIframe, /** @lends {views.ContentLoaderIframe} */ {
/**
 * @type {views.ContentLoaderIframe}
 */
instance: {
get: views.ContentLoaderIframe.get__instance}}
);/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
views.ContentLoaderIframe.prototype.$EH_12_0 = function(event)
{
  this.views_ContentLoaderIframe_init();
};


/**
 * @export
 * @param {org.apache.royale.events.MouseEvent} event
 */
views.ContentLoaderIframe.prototype.$EH_12_1 = function(event)
{
  this.disposeMe();
};


Object.defineProperties(views.ContentLoaderIframe.prototype, /** @lends {views.ContentLoaderIframe.prototype} */ {
  iFrm: {
    /** @this {views.ContentLoaderIframe} */
    get: function() {
      return this.iFrm_;
    },
    /** @this {views.ContentLoaderIframe} */
    set: function(value) {
      if (value != this.iFrm_) {
        this.iFrm_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'iFrm', null, value));
      }
    }
  },
  hideMe: {
    /** @this {views.ContentLoaderIframe} */
    get: function() {
      return this.hideMe_;
    },
    /** @this {views.ContentLoaderIframe} */
    set: function(value) {
      if (value != this.hideMe_) {
        this.hideMe_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'hideMe', null, value));
      }
    }
  },
  'MXMLDescriptor': {
    /** @this {views.ContentLoaderIframe} */
    get: function() {
      if (this.mxmldd == undefined)
      {
        /** @type {Array} */
        var arr = views.ContentLoaderIframe.superClass_.get__MXMLDescriptor.apply(this);
        /** @type {Array} */
        var mxmldd = [
          org.apache.royale.html.elements.Iframe,
          4,
          '_id',
          true,
          'iFrm',
          'className',
          true,
          'iFrmCssFullScreen',
          'percentHeight',
          true,
          100,
          'percentWidth',
          true,
          100,
          0,
          0,
          null,
          org.apache.royale.jewel.Image,
          3,
          '_id',
          true,
          'hideMe',
          'src',
          true,
          'img/full-screen.png',
          'className',
          true,
          'iFrmCssFullScreenBth',
          0,
          1,
          'click',
          this.$EH_12_1,
          null
        ];
        if (arr)
          this.mxmldd = arr.concat(mxmldd);
        else
          this.mxmldd = mxmldd;
      }
      return this.mxmldd;
    }
  }
});
/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.ContentLoaderIframe.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ContentLoaderIframe', qName: 'views.ContentLoaderIframe', kind: 'class'  }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.ContentLoaderIframe.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|instance': { type: 'views.ContentLoaderIframe', access: 'readonly', declaredBy: 'views.ContentLoaderIframe'},
        'iFrm': { type: 'org.apache.royale.html.elements.Iframe', access: 'readwrite', declaredBy: 'views.ContentLoaderIframe'},
        'hideMe': { type: 'org.apache.royale.jewel.Image', access: 'readwrite', declaredBy: 'views.ContentLoaderIframe'}
      };
    },
    methods: function () {
      return {
        'loadPage': { type: 'void', declaredBy: 'views.ContentLoaderIframe', parameters: function () { return [ 'Object', false ]; }},
        'disposeMe': { type: 'void', declaredBy: 'views.ContentLoaderIframe'},
        'visibleState': { type: 'Boolean', declaredBy: 'views.ContentLoaderIframe'},
        'ContentLoaderIframe': { type: '', declaredBy: 'views.ContentLoaderIframe'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.ContentLoaderIframe.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
views.ContentLoaderIframe.prototype.ROYALE_INITIAL_STATICS = Object.keys(views.ContentLoaderIframe);



//# sourceMappingURL=./ContentLoaderIframe.js.map
