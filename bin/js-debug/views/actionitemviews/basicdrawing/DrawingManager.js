/**
 * Generated by Apache Royale Compiler from views/actionitemviews/basicdrawing/DrawingManager.as
 * views.actionitemviews.basicdrawing.DrawingManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.basicdrawing.DrawingManager');
/* Royale Dependency List: com.unhurdle.spectrum.Container,org.apache.royale.core.IChild,org.apache.royale.events.MouseEvent,org.apache.royale.svg.elements.Circle,org.apache.royale.svg.elements.Line,org.apache.royale.svg.elements.Rect,org.apache.royale.svg.elements.Svg,views.actionitemviews.basicdrawing.shapes.CircleShape,views.actionitemviews.basicdrawing.shapes.FreehandShape,views.actionitemviews.basicdrawing.shapes.IDrawableShape,views.actionitemviews.basicdrawing.shapes.LineShape,views.actionitemviews.basicdrawing.shapes.RectangleShape,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 * @param {com.unhurdle.spectrum.Container} host
 */
views.actionitemviews.basicdrawing.DrawingManager = function(host) {
  
  this.views_actionitemviews_basicdrawing_DrawingManager_shapes = [];
  this.views_actionitemviews_basicdrawing_DrawingManager_container = host;
  this.initCanvas();
};


/**
 * @private
 * @type {org.apache.royale.svg.elements.Svg}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.Container}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_container = null;


/**
 * @private
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_currentShapeType = "Rectangle";


/**
 * @private
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_currentColor = "#ffcc99";


/**
 * @private
 * @type {views.actionitemviews.basicdrawing.shapes.IDrawableShape}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_drawingShape = null;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_startX = NaN;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_startY = NaN;


/**
 * @private
 * @type {boolean}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_isDrawing = false;


/**
 * @private
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_mode = "draw";


/**
 * @nocollapse
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.DRAW = "draw";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.SELECT = "select";


/**
 * @private
 * @type {views.actionitemviews.basicdrawing.shapes.IDrawableShape}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_selectedShape = null;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_lastMouseX = NaN;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_lastMouseY = NaN;


/**
 * @private
 * @type {Array}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_shapes = null;


/**
 * @private
 * @type {org.apache.royale.svg.elements.Rect}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_selectionRect = null;


/**
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.initCanvas = function() {
  if (this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas)
    this.views_actionitemviews_basicdrawing_DrawingManager_container.removeElement(this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas);
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas = new org.apache.royale.svg.elements.Svg();
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.width = 800;
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.height = 600;
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.style = "border: 1px solid #ccc;";
  this.views_actionitemviews_basicdrawing_DrawingManager_container.addElement(this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas);
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.views_actionitemviews_basicdrawing_DrawingManager_onMouseDown, this, 'views_actionitemviews_basicdrawing_DrawingManager_onMouseDown'));
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.views_actionitemviews_basicdrawing_DrawingManager_onMouseMove, this, 'views_actionitemviews_basicdrawing_DrawingManager_onMouseMove'));
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.views_actionitemviews_basicdrawing_DrawingManager_onMouseUp, this, 'views_actionitemviews_basicdrawing_DrawingManager_onMouseUp'));
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} e
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_onMouseDown = function(e) {
  this.views_actionitemviews_basicdrawing_DrawingManager_startX = e.localX;
  this.views_actionitemviews_basicdrawing_DrawingManager_startY = e.localY;
  this.views_actionitemviews_basicdrawing_DrawingManager_lastMouseX = this.views_actionitemviews_basicdrawing_DrawingManager_startX;
  this.views_actionitemviews_basicdrawing_DrawingManager_lastMouseY = this.views_actionitemviews_basicdrawing_DrawingManager_startY;
  if (this.views_actionitemviews_basicdrawing_DrawingManager_mode == "draw") {
    this.views_actionitemviews_basicdrawing_DrawingManager_drawingShape = this.views_actionitemviews_basicdrawing_DrawingManager_getShapeInstance();
    var /** @type {org.apache.royale.core.IChild} */ shapeElement = this.views_actionitemviews_basicdrawing_DrawingManager_drawingShape.create(this.views_actionitemviews_basicdrawing_DrawingManager_startX, this.views_actionitemviews_basicdrawing_DrawingManager_startY, this.views_actionitemviews_basicdrawing_DrawingManager_startX, this.views_actionitemviews_basicdrawing_DrawingManager_startY, this.views_actionitemviews_basicdrawing_DrawingManager_currentColor);
    this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.addElement(shapeElement);
    this.views_actionitemviews_basicdrawing_DrawingManager_shapes.push(this.views_actionitemviews_basicdrawing_DrawingManager_drawingShape);
  } else if (this.views_actionitemviews_basicdrawing_DrawingManager_mode == "select") {
    this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape = this.views_actionitemviews_basicdrawing_DrawingManager_findShapeAtPoint(this.views_actionitemviews_basicdrawing_DrawingManager_startX, this.views_actionitemviews_basicdrawing_DrawingManager_startY);
    if (this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape) {
      this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.removeElement(this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape.shape);
      this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.addElement(this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape.shape);
      this.views_actionitemviews_basicdrawing_DrawingManager_showSelection(this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape);
    } else {
      if (this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect) {
        this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.removeElement(this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect);
        this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect = null;
      }
    }
  }
  this.views_actionitemviews_basicdrawing_DrawingManager_isDrawing = true;
  org.apache.royale.utils.Language.trace(this.views_actionitemviews_basicdrawing_DrawingManager_mode);
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} e
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_onMouseMove = function(e) {
  if (!this.views_actionitemviews_basicdrawing_DrawingManager_isDrawing)
    return;
  if (this.views_actionitemviews_basicdrawing_DrawingManager_mode == "draw" && this.views_actionitemviews_basicdrawing_DrawingManager_drawingShape) {
    this.views_actionitemviews_basicdrawing_DrawingManager_drawingShape.update(e.localX, e.localY);
  } else if (this.views_actionitemviews_basicdrawing_DrawingManager_mode == "select" && this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape) {
    var /** @type {number} */ dx = e.localX - this.views_actionitemviews_basicdrawing_DrawingManager_lastMouseX;
    var /** @type {number} */ dy = e.localY - this.views_actionitemviews_basicdrawing_DrawingManager_lastMouseY;
    this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape.move(dx, dy);
    this.views_actionitemviews_basicdrawing_DrawingManager_lastMouseX = e.localX;
    this.views_actionitemviews_basicdrawing_DrawingManager_lastMouseY = e.localY;
    if (this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect) {
      var /** @type {Object} */ bounds = this.views_actionitemviews_basicdrawing_DrawingManager_getShapeBounds(this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape);
      this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.x = Number(bounds.x);
      this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.y = Number(bounds.y);
      this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.width = Number(bounds.width);
      this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.height = Number(bounds.height);
    }
  }
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} e
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_onMouseUp = function(e) {
  this.views_actionitemviews_basicdrawing_DrawingManager_isDrawing = false;
  this.views_actionitemviews_basicdrawing_DrawingManager_drawingShape = null;
};


/**
 * @private
 * @return {views.actionitemviews.basicdrawing.shapes.IDrawableShape}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_getShapeInstance = function() {
  switch (this.views_actionitemviews_basicdrawing_DrawingManager_currentShapeType) {
    case "Rectangle":
      return new views.actionitemviews.basicdrawing.shapes.RectangleShape();
    case "Circle":
      return new views.actionitemviews.basicdrawing.shapes.CircleShape();
    case "Line":
      return new views.actionitemviews.basicdrawing.shapes.LineShape();
    case "Freehand":
      return new views.actionitemviews.basicdrawing.shapes.FreehandShape();
    default:
      return new views.actionitemviews.basicdrawing.shapes.RectangleShape();
  }
};


/**
 * @private
 * @param {number} x
 * @param {number} y
 * @return {views.actionitemviews.basicdrawing.shapes.IDrawableShape}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_findShapeAtPoint = function(x, y) {
  for (var /** @type {number} */ i = (this.views_actionitemviews_basicdrawing_DrawingManager_shapes.length - 1) >> 0; i >= 0; i--) {
    if (this.views_actionitemviews_basicdrawing_DrawingManager_shapes[i].hitTest(x, y))
      return /* implicit cast */ org.apache.royale.utils.Language.as(this.views_actionitemviews_basicdrawing_DrawingManager_shapes[i], views.actionitemviews.basicdrawing.shapes.IDrawableShape, true);
  }
  return null;
};


/**
 * @private
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_updateCursor = function() {
  switch (this.views_actionitemviews_basicdrawing_DrawingManager_mode) {
    case "draw":
      this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.element.style.cursor = "crosshair";
      break;
    case "move":
      this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.element.style.cursor = "move";
      break;
    default:
      this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.element.style.cursor = "default";
      break;
  }
};


/**
 * @private
 * @param {views.actionitemviews.basicdrawing.shapes.IDrawableShape} shape
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_showSelection = function(shape) {
  if (this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect) {
    this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.removeElement(this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect);
    this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect = null;
  }
  var /** @type {Object} */ bounds = this.views_actionitemviews_basicdrawing_DrawingManager_getShapeBounds(shape);
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect = new org.apache.royale.svg.elements.Rect();
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.x = Number(bounds.x);
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.y = Number(bounds.y);
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.width = Number(bounds.width);
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.height = Number(bounds.height);
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.fill = "none";
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.stroke = "#00f";
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.strokeWidth = "2";
  this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect.style = "stroke-dasharray:4,2;";
  this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas.addElement(this.views_actionitemviews_basicdrawing_DrawingManager_selectionRect);
};


/**
 * @private
 * @param {views.actionitemviews.basicdrawing.shapes.IDrawableShape} shape
 * @return {Object}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.views_actionitemviews_basicdrawing_DrawingManager_getShapeBounds = function(shape) {
  var /** @type {Object} */ s = shape.shape;
  if (org.apache.royale.utils.Language.is(s, org.apache.royale.svg.elements.Rect)) {
    return {x:s.x, y:s.y, width:s.width, height:s.height};
  } else if (org.apache.royale.utils.Language.is(s, org.apache.royale.svg.elements.Circle)) {
    var /** @type {number} */ cx = Number(s.cx);
    var /** @type {number} */ cy = Number(s.cy);
    var /** @type {number} */ r = Number(s.r);
    return {x:cx - r, y:cy - r, width:r * 2, height:r * 2};
  } else if (org.apache.royale.utils.Language.is(s, org.apache.royale.svg.elements.Line)) {
    var /** @type {number} */ x1 = Number(s.x1);
    var /** @type {number} */ y1 = Number(s.y1);
    var /** @type {number} */ x2 = Number(s.x2);
    var /** @type {number} */ y2 = Number(s.y2);
    return {x:Math.min(x1, x2), y:Math.min(y1, y2), width:Math.abs(x2 - x1), height:Math.abs(y2 - y1)};
  }
  return {x:0, y:0, width:0, height:0};
};


/**
 * @param {string} color
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.changeSelectedShapeColor = function(color) {
  if (this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape && this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape.shape) {
    this.views_actionitemviews_basicdrawing_DrawingManager_currentColor = color;
    this.views_actionitemviews_basicdrawing_DrawingManager_selectedShape.setColor(color);
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.shapeType;


views.actionitemviews.basicdrawing.DrawingManager.prototype.set__shapeType = function(value) {
  this.views_actionitemviews_basicdrawing_DrawingManager_currentShapeType = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.color;


views.actionitemviews.basicdrawing.DrawingManager.prototype.set__color = function(value) {
  this.views_actionitemviews_basicdrawing_DrawingManager_currentColor = value;
  this.changeSelectedShapeColor(value);
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.drawingMode;


views.actionitemviews.basicdrawing.DrawingManager.prototype.set__drawingMode = function(value) {
  this.views_actionitemviews_basicdrawing_DrawingManager_mode = value;
  this.views_actionitemviews_basicdrawing_DrawingManager_updateCursor();
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.svg.elements.Svg}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.canvas;


views.actionitemviews.basicdrawing.DrawingManager.prototype.get__canvas = function() {
  return this.views_actionitemviews_basicdrawing_DrawingManager_svgCanvas;
};


Object.defineProperties(views.actionitemviews.basicdrawing.DrawingManager.prototype, /** @lends {views.actionitemviews.basicdrawing.DrawingManager.prototype} */ {
/**
 * @type {string}
 */
shapeType: {
set: views.actionitemviews.basicdrawing.DrawingManager.prototype.set__shapeType},
/**
 * @type {string}
 */
color: {
set: views.actionitemviews.basicdrawing.DrawingManager.prototype.set__color},
/**
 * @type {string}
 */
drawingMode: {
set: views.actionitemviews.basicdrawing.DrawingManager.prototype.set__drawingMode},
/**
 * @type {org.apache.royale.svg.elements.Svg}
 */
canvas: {
get: views.actionitemviews.basicdrawing.DrawingManager.prototype.get__canvas}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DrawingManager', qName: 'views.actionitemviews.basicdrawing.DrawingManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|DRAW': { type: 'String', get_set: function (/** * */ v) {return v !== undefined ? views.actionitemviews.basicdrawing.DrawingManager.DRAW = v : views.actionitemviews.basicdrawing.DrawingManager.DRAW;}}
      };
    },
    accessors: function () {
      return {
        'shapeType': { type: 'String', access: 'writeonly', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager'},
        'color': { type: 'String', access: 'writeonly', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager'},
        'drawingMode': { type: 'String', access: 'writeonly', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager'},
        'canvas': { type: 'org.apache.royale.svg.elements.Svg', access: 'readonly', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager'}
      };
    },
    methods: function () {
      return {
        'DrawingManager': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager', parameters: function () { return [ 'com.unhurdle.spectrum.Container', false ]; }},
        'initCanvas': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager'},
        'changeSelectedShapeColor': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.DrawingManager', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
views.actionitemviews.basicdrawing.DrawingManager.prototype.ROYALE_INITIAL_STATICS = Object.keys(views.actionitemviews.basicdrawing.DrawingManager);
