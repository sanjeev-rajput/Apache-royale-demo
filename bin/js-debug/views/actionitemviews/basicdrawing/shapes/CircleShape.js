/**
 * Generated by Apache Royale Compiler from views/actionitemviews/basicdrawing/shapes/CircleShape.as
 * views.actionitemviews.basicdrawing.shapes.CircleShape
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.basicdrawing.shapes.CircleShape');
/* Royale Dependency List: org.apache.royale.core.IChild,org.apache.royale.svg.elements.Circle,XML*/

goog.require('views.actionitemviews.basicdrawing.shapes.IDrawableShape');



/**
 * @constructor
 * @implements {views.actionitemviews.basicdrawing.shapes.IDrawableShape}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape = function() {
};


/**
 * @private
 * @type {org.apache.royale.svg.elements.Circle}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.views_actionitemviews_basicdrawing_shapes_CircleShape__shape = null;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.views_actionitemviews_basicdrawing_shapes_CircleShape__startX = NaN;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.views_actionitemviews_basicdrawing_shapes_CircleShape__startY = NaN;


/**
 * @param {number} startX
 * @param {number} startY
 * @param {number} endX
 * @param {number} endY
 * @param {string} color
 * @return {org.apache.royale.core.IChild}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.create = function(startX, startY, endX, endY, color) {
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape = new org.apache.royale.svg.elements.Circle();
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__startX = startX;
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__startY = startY;
  this.update(endX, endY);
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.fill = color;
  return this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape;
};


/**
 * @param {number} endX
 * @param {number} endY
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.update = function(endX, endY) {
  var /** @type {number} */ dx = endX - this.views_actionitemviews_basicdrawing_shapes_CircleShape__startX;
  var /** @type {number} */ dy = endY - this.views_actionitemviews_basicdrawing_shapes_CircleShape__startY;
  var /** @type {number} */ radius = Math.sqrt(dx * dx + dy * dy) / 2;
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cx = ((this.views_actionitemviews_basicdrawing_shapes_CircleShape__startX + endX) / 2).toString();
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cy = ((this.views_actionitemviews_basicdrawing_shapes_CircleShape__startY + endY) / 2).toString();
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.r = radius.toString();
};


/**
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.hitTest = function(x, y) {
  var /** @type {number} */ dx = x - Number(this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cx);
  var /** @type {number} */ dy = y - Number(this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cy);
  return (dx * dx + dy * dy) <= Number(this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.r) * Number(this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.r);
};


/**
 * @param {number} dx
 * @param {number} dy
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.move = function(dx, dy) {
  var /** @type {number} */ cx = Number(this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cx) + dx;
  var /** @type {number} */ cy = Number(this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cy) + dy;
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cx = cx.toString();
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.cy = cy.toString();
};


/**
 * @param {string} color
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.setColor = function(color) {
  this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape.fill = color;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IChild}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.shape;


views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.get__shape = function() {
  return this.views_actionitemviews_basicdrawing_shapes_CircleShape__shape;
};


Object.defineProperties(views.actionitemviews.basicdrawing.shapes.CircleShape.prototype, /** @lends {views.actionitemviews.basicdrawing.shapes.CircleShape.prototype} */ {
/**
 * @type {org.apache.royale.core.IChild}
 */
shape: {
get: views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.get__shape}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CircleShape', qName: 'views.actionitemviews.basicdrawing.shapes.CircleShape', kind: 'class' }], interfaces: [views.actionitemviews.basicdrawing.shapes.IDrawableShape] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'shape': { type: 'org.apache.royale.core.IChild', access: 'readonly', declaredBy: 'views.actionitemviews.basicdrawing.shapes.CircleShape'}
      };
    },
    methods: function () {
      return {
        'create': { type: 'org.apache.royale.core.IChild', declaredBy: 'views.actionitemviews.basicdrawing.shapes.CircleShape', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ,'String', false ]; }},
        'update': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.shapes.CircleShape', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'hitTest': { type: 'Boolean', declaredBy: 'views.actionitemviews.basicdrawing.shapes.CircleShape', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'move': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.shapes.CircleShape', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'setColor': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.shapes.CircleShape', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.basicdrawing.shapes.CircleShape.prototype.ROYALE_COMPILE_FLAGS = 9;
