/**
 * Generated by Apache Royale Compiler from views/actionitemviews/basicdrawing/shapes/LineShape.as
 * views.actionitemviews.basicdrawing.shapes.LineShape
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.basicdrawing.shapes.LineShape');
/* Royale Dependency List: org.apache.royale.core.IChild,org.apache.royale.svg.elements.Line,XML*/

goog.require('views.actionitemviews.basicdrawing.shapes.IDrawableShape');



/**
 * @constructor
 * @implements {views.actionitemviews.basicdrawing.shapes.IDrawableShape}
 */
views.actionitemviews.basicdrawing.shapes.LineShape = function() {
};


/**
 * @private
 * @type {org.apache.royale.svg.elements.Line}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.views_actionitemviews_basicdrawing_shapes_LineShape__shape = null;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.views_actionitemviews_basicdrawing_shapes_LineShape__startX = NaN;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.views_actionitemviews_basicdrawing_shapes_LineShape__startY = NaN;


/**
 * @param {number} startX
 * @param {number} startY
 * @param {number} endX
 * @param {number} endY
 * @param {string} color
 * @return {org.apache.royale.core.IChild}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.create = function(startX, startY, endX, endY, color) {
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape = new org.apache.royale.svg.elements.Line();
  this.views_actionitemviews_basicdrawing_shapes_LineShape__startX = startX;
  this.views_actionitemviews_basicdrawing_shapes_LineShape__startY = startY;
  this.update(endX, endY);
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.stroke = color;
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.strokeWidth = "5";
  return this.views_actionitemviews_basicdrawing_shapes_LineShape__shape;
};


/**
 * @param {number} endX
 * @param {number} endY
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.update = function(endX, endY) {
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.x1 = this.views_actionitemviews_basicdrawing_shapes_LineShape__startX;
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.y1 = this.views_actionitemviews_basicdrawing_shapes_LineShape__startY;
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.x2 = endX;
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.y2 = endY;
};


/**
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.hitTest = function(x, y) {
  var /** @type {org.apache.royale.svg.elements.Line} */ line = this.views_actionitemviews_basicdrawing_shapes_LineShape__shape;
  var /** @type {number} */ x1 = Number(line.x1);
  var /** @type {number} */ y1 = Number(line.y1);
  var /** @type {number} */ x2 = Number(line.x2);
  var /** @type {number} */ y2 = Number(line.y2);
  var /** @type {number} */ dx = x2 - x1;
  var /** @type {number} */ dy = y2 - y1;
  var /** @type {number} */ lengthSq = dx * dx + dy * dy;
  if (lengthSq == 0) {
    var /** @type {number} */ distToPoint = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));
    return distToPoint <= 5;
  }
  var /** @type {number} */ t = ((x - x1) * dx + (y - y1) * dy) / lengthSq;
  t = Math.max(0, Math.min(1, t));
  var /** @type {number} */ projX = x1 + t * dx;
  var /** @type {number} */ projY = y1 + t * dy;
  var /** @type {number} */ dist = Math.sqrt((x - projX) * (x - projX) + (y - projY) * (y - projY));
  return dist <= 5;
};


/**
 * @param {number} dx
 * @param {number} dy
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.move = function(dx, dy) {
  var /** @type {org.apache.royale.svg.elements.Line} */ line = this.views_actionitemviews_basicdrawing_shapes_LineShape__shape;
  line.x1 = Number(line.x1) + dx;
  line.y1 = Number(line.y1) + dy;
  line.x2 = Number(line.x2) + dx;
  line.y2 = Number(line.y2) + dy;
};


/**
 * @param {string} color
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.setColor = function(color) {
  this.views_actionitemviews_basicdrawing_shapes_LineShape__shape.stroke = color;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.core.IChild}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.shape;


views.actionitemviews.basicdrawing.shapes.LineShape.prototype.get__shape = function() {
  return this.views_actionitemviews_basicdrawing_shapes_LineShape__shape;
};


Object.defineProperties(views.actionitemviews.basicdrawing.shapes.LineShape.prototype, /** @lends {views.actionitemviews.basicdrawing.shapes.LineShape.prototype} */ {
/**
 * @type {org.apache.royale.core.IChild}
 */
shape: {
get: views.actionitemviews.basicdrawing.shapes.LineShape.prototype.get__shape}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LineShape', qName: 'views.actionitemviews.basicdrawing.shapes.LineShape', kind: 'class' }], interfaces: [views.actionitemviews.basicdrawing.shapes.IDrawableShape] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'shape': { type: 'org.apache.royale.core.IChild', access: 'readonly', declaredBy: 'views.actionitemviews.basicdrawing.shapes.LineShape'}
      };
    },
    methods: function () {
      return {
        'create': { type: 'org.apache.royale.core.IChild', declaredBy: 'views.actionitemviews.basicdrawing.shapes.LineShape', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ,'String', false ]; }},
        'update': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.shapes.LineShape', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'hitTest': { type: 'Boolean', declaredBy: 'views.actionitemviews.basicdrawing.shapes.LineShape', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'move': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.shapes.LineShape', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'setColor': { type: 'void', declaredBy: 'views.actionitemviews.basicdrawing.shapes.LineShape', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.basicdrawing.shapes.LineShape.prototype.ROYALE_COMPILE_FLAGS = 9;
