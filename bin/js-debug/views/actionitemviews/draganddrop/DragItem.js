/**
 * Generated by Apache Royale Compiler from views/actionitemviews/draganddrop/DragItem.mxml
 * views.actionitemviews.draganddrop.DragItem
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.draganddrop.DragItem');
/* Royale Dependency List: org.apache.royale.html.elements.Span,org.apache.royale.events.Event,XML*/

goog.require('org.apache.royale.html.elements.Div');



/**
 * @constructor
 * @extends {org.apache.royale.html.elements.Div}
 */
views.actionitemviews.draganddrop.DragItem = function() {
  views.actionitemviews.draganddrop.DragItem.base(this, 'constructor');
  
  /**
   * @private
   * @type {org.apache.royale.html.elements.Span}
   */
  this.icnx_;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldd;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldp;

  this.generateMXMLAttributes([
    1,
    'className',
    true,
    'dragableItem',
    0,
    1,
    'initComplete',
    this.$EH_12_0
  ]);
  
};
goog.inherits(views.actionitemviews.draganddrop.DragItem, org.apache.royale.html.elements.Div);




/**
 * @private
 */
views.actionitemviews.draganddrop.DragItem.prototype.views_actionitemviews_draganddrop_DragItem_init = function() {
};


/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
views.actionitemviews.draganddrop.DragItem.prototype.$EH_12_0 = function(event)
{
  this.views_actionitemviews_draganddrop_DragItem_init();
};


Object.defineProperties(views.actionitemviews.draganddrop.DragItem.prototype, /** @lends {views.actionitemviews.draganddrop.DragItem.prototype} */ {
  icnx: {
    /** @this {views.actionitemviews.draganddrop.DragItem} */
    get: function() {
      return this.icnx_;
    },
    /** @this {views.actionitemviews.draganddrop.DragItem} */
    set: function(value) {
      if (value != this.icnx_) {
        this.icnx_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'icnx', null, value));
      }
    }
  },
  'MXMLDescriptor': {
    /** @this {views.actionitemviews.draganddrop.DragItem} */
    get: function() {
      if (this.mxmldd == undefined)
      {
        /** @type {Array} */
        var arr = views.actionitemviews.draganddrop.DragItem.superClass_.get__MXMLDescriptor.apply(this);
        /** @type {Array} */
        var mxmldd = [
          org.apache.royale.html.elements.Span,
          4,
          'id',
          true,
          'icnx',
          'className',
          true,
          'closeicon',
          'visible',
          true,
          false,
          'innerHTML',
          true,
          'âœ•',
          0,
          0,
          null
        ];
        if (arr)
          this.mxmldd = arr.concat(mxmldd);
        else
          this.mxmldd = mxmldd;
      }
      return this.mxmldd;
    }
  }
});
/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.draganddrop.DragItem.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DragItem', qName: 'views.actionitemviews.draganddrop.DragItem', kind: 'class'  }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.draganddrop.DragItem.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'icnx': { type: 'org.apache.royale.html.elements.Span', access: 'readwrite', declaredBy: 'views.actionitemviews.draganddrop.DragItem'}
      };
    },
    methods: function () {
      return {
        'DragItem': { type: '', declaredBy: 'views.actionitemviews.draganddrop.DragItem'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.draganddrop.DragItem.prototype.ROYALE_COMPILE_FLAGS = 9;
