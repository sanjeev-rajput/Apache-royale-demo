/**
 * Generated by Apache Royale Compiler from views/actionitemviews/websocket/SocketService.as
 * views.actionitemviews.websocket.SocketService
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.websocket.SocketService');
/* Royale Dependency List: com.model.Config,com.util.AppAlert,views.actionitemviews.websocket.SocketServiceHelper,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
views.actionitemviews.websocket.SocketService = function() {

this.views_actionitemviews_websocket_SocketService__url = com.model.Config.wsUrl;
};


/**
 * @private
 * @type {WebSocket}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService_ws = null;


/**
 * @private
 * @type {string}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService__url = null;


/**
 * @private
 * @type {boolean}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService__isConnected = false;


/**
 * @private
 * @type {Function}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService__callBackFunction = null;


/**
 * @private
 * @type {Function}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService__statusUpdateCallback = null;


/**
 * @private
 * @type {boolean}
 */
views.actionitemviews.websocket.SocketService._isFirstConnect = true;


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.websocket.SocketService.SUBSCRIBE_WIKI = "subscribe_wiki";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.websocket.SocketService.SUBSCRIBE_COLLABARATION = "subscribe_collabaration";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.websocket.SocketService.SUBSCRIBE_STOCK = "subscribe_stock";


/**
 * @private
 * @type {Object}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService__subscribeWithObj = null;


/**
 * @private
 * @type {string}
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService__subscribeType = null;


/**
 * @param {Function} callback
 */
views.actionitemviews.websocket.SocketService.prototype.setStatusUpdateCallback = function(callback) {
  this.views_actionitemviews_websocket_SocketService__statusUpdateCallback = callback;
};


/**
 * @param {Function} callBackFunction
 */
views.actionitemviews.websocket.SocketService.prototype.addCAllBackFunction = function(callBackFunction) {
  this.views_actionitemviews_websocket_SocketService__callBackFunction = callBackFunction;
};


/**
 * @param {string=} type
 * @param {Object=} obj
 */
views.actionitemviews.websocket.SocketService.prototype.connectWebSocket = function(type, obj) {
  type = typeof type !== 'undefined' ? type : null;
  obj = typeof obj !== 'undefined' ? obj : null;
  if (views.actionitemviews.websocket.SocketService._isFirstConnect) {
    views.actionitemviews.websocket.SocketService._isFirstConnect = false;
    views.actionitemviews.websocket.SocketServiceHelper.showWakeUpMessage();
  }
  if (this.views_actionitemviews_websocket_SocketService__statusUpdateCallback != null)
    this.views_actionitemviews_websocket_SocketService__statusUpdateCallback("âœ… Connected successfully.");
  if (type)
    this.views_actionitemviews_websocket_SocketService__subscribeType = type;
  if (obj)
    this.views_actionitemviews_websocket_SocketService__subscribeWithObj = obj;
  if (this.views_actionitemviews_websocket_SocketService__callBackFunction == null) {
    com.util.AppAlert.show(com.util.AppAlert.ERROR, "CallBack function is not set");
    return;
  }
  if (this.views_actionitemviews_websocket_SocketService__isConnected && this.views_actionitemviews_websocket_SocketService_ws) {
    this.views_actionitemviews_websocket_SocketService_subscribeWs();
    return;
  }
  this.views_actionitemviews_websocket_SocketService_ws = new WebSocket(this.views_actionitemviews_websocket_SocketService__url);
  this.views_actionitemviews_websocket_SocketService_ws.addEventListener('open', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionOpenEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionOpenEvtHandler'));
  this.views_actionitemviews_websocket_SocketService_ws.addEventListener('message', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionMessageEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionMessageEvtHandler'));
  this.views_actionitemviews_websocket_SocketService_ws.addEventListener('close', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionCloseEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionCloseEvtHandler'));
  this.views_actionitemviews_websocket_SocketService_ws.addEventListener('error', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionErrorEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionErrorEvtHandler'));
};


/**
 */
views.actionitemviews.websocket.SocketService.prototype.disconnectWebSocket = function() {
  if (this.views_actionitemviews_websocket_SocketService_ws) {
    this.views_actionitemviews_websocket_SocketService_ws.removeEventListener('open', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionOpenEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionOpenEvtHandler'));
    this.views_actionitemviews_websocket_SocketService_ws.removeEventListener('message', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionMessageEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionMessageEvtHandler'));
    this.views_actionitemviews_websocket_SocketService_ws.removeEventListener('close', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionCloseEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionCloseEvtHandler'));
    this.views_actionitemviews_websocket_SocketService_ws.removeEventListener('error', org.apache.royale.utils.Language.closure(this.views_actionitemviews_websocket_SocketService_connectionErrorEvtHandler, this, 'views_actionitemviews_websocket_SocketService_connectionErrorEvtHandler'));
    this.views_actionitemviews_websocket_SocketService_ws.close();
    this.views_actionitemviews_websocket_SocketService_ws = null;
  }
};


/**
 * @private
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService_connectionOpenEvtHandler = function() {
  this.views_actionitemviews_websocket_SocketService__isConnected = true;
  views.actionitemviews.websocket.SocketServiceHelper.showConnectedMessage();
  this.views_actionitemviews_websocket_SocketService_subscribeWs();
  console.log('Connected to the WebSocket server');
  this.views_actionitemviews_websocket_SocketService__isConnected = true;
  this.views_actionitemviews_websocket_SocketService_subscribeWs();
};


/**
 * @private
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService_subscribeWs = function() {
  console.log(this.views_actionitemviews_websocket_SocketService__subscribeWithObj);
  if (this.views_actionitemviews_websocket_SocketService__subscribeType == views.actionitemviews.websocket.SocketService.SUBSCRIBE_WIKI)
    this.views_actionitemviews_websocket_SocketService_ws.send(JSON.stringify({"type":this.views_actionitemviews_websocket_SocketService__subscribeType}));
  if (this.views_actionitemviews_websocket_SocketService__subscribeType == views.actionitemviews.websocket.SocketService.SUBSCRIBE_COLLABARATION)
    this.views_actionitemviews_websocket_SocketService_ws.send(JSON.stringify({"type":this.views_actionitemviews_websocket_SocketService__subscribeType, "shape":'rect'}));
  if (this.views_actionitemviews_websocket_SocketService__subscribeType == views.actionitemviews.websocket.SocketService.SUBSCRIBE_STOCK)
    this.views_actionitemviews_websocket_SocketService_ws.send(JSON.stringify({"type":this.views_actionitemviews_websocket_SocketService__subscribeType, "length":this.views_actionitemviews_websocket_SocketService__subscribeWithObj["length"]}));
};


/**
 * @private
 * @param {*} e
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService_connectionMessageEvtHandler = function(e) {
  var /** @type {Object} */ data = JSON.parse(org.apache.royale.utils.Language.string(e["data"]));
  this.views_actionitemviews_websocket_SocketService__callBackFunction(data);
};


/**
 * @private
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService_connectionCloseEvtHandler = function() {
  this.views_actionitemviews_websocket_SocketService__isConnected = false;
  console.log('Disconnected from the WebSocket server');
};


/**
 * @private
 * @param {*} e
 */
views.actionitemviews.websocket.SocketService.prototype.views_actionitemviews_websocket_SocketService_connectionErrorEvtHandler = function(e) {
  com.util.AppAlert.show(com.util.AppAlert.ERROR, 'WebSocket error: <br>' + e);
};


/**
 * @param {Object} obj
 */
views.actionitemviews.websocket.SocketService.prototype.sendToSocket = function(obj) {
  if (this.views_actionitemviews_websocket_SocketService_ws && this.views_actionitemviews_websocket_SocketService_ws.readyState == 1) {
    this.views_actionitemviews_websocket_SocketService_ws.send(JSON.stringify(obj));
  } else {
    com.util.AppAlert.show(com.util.AppAlert.ERROR, "WebSocket is not open. Cannot send message.");
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
views.actionitemviews.websocket.SocketService.prototype.connected;


views.actionitemviews.websocket.SocketService.prototype.get__connected = function() {
  return this.views_actionitemviews_websocket_SocketService__isConnected;
};


Object.defineProperties(views.actionitemviews.websocket.SocketService.prototype, /** @lends {views.actionitemviews.websocket.SocketService.prototype} */ {
/**
 * @type {boolean}
 */
connected: {
get: views.actionitemviews.websocket.SocketService.prototype.get__connected}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.websocket.SocketService.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SocketService', qName: 'views.actionitemviews.websocket.SocketService', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.websocket.SocketService.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'connected': { type: 'Boolean', access: 'readonly', declaredBy: 'views.actionitemviews.websocket.SocketService'}
      };
    },
    methods: function () {
      return {
        'SocketService': { type: 'void', declaredBy: 'views.actionitemviews.websocket.SocketService'},
        'setStatusUpdateCallback': { type: 'void', declaredBy: 'views.actionitemviews.websocket.SocketService', parameters: function () { return [ 'Function', false ]; }},
        'addCAllBackFunction': { type: 'void', declaredBy: 'views.actionitemviews.websocket.SocketService', parameters: function () { return [ 'Function', false ]; }},
        'connectWebSocket': { type: 'void', declaredBy: 'views.actionitemviews.websocket.SocketService', parameters: function () { return [ 'String', true ,'Object', true ]; }},
        'disconnectWebSocket': { type: 'void', declaredBy: 'views.actionitemviews.websocket.SocketService'},
        'sendToSocket': { type: 'void', declaredBy: 'views.actionitemviews.websocket.SocketService', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.websocket.SocketService.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
views.actionitemviews.websocket.SocketService.prototype.ROYALE_INITIAL_STATICS = Object.keys(views.actionitemviews.websocket.SocketService);

//# sourceMappingURL=./SocketService.js.map
