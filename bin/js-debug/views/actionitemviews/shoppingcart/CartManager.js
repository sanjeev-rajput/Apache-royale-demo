/**
 * Generated by Apache Royale Compiler from views/actionitemviews/shoppingcart/CartManager.as
 * views.actionitemviews.shoppingcart.CartManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.shoppingcart.CartManager');
/* Royale Dependency List: com.unhurdle.spectrum.Toast,org.apache.royale.jewel.Group,views.actionitemviews.shoppingcart.CartItem,views.actionitemviews.shoppingcart.CheckoutManager,views.actionitemviews.shoppingcart.Product,views.actionitemviews.shoppingcart.ProductManager,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
views.actionitemviews.shoppingcart.CartManager = function() {
  
  this.views_actionitemviews_shoppingcart_CartManager__cartItems = [];
  if (views.actionitemviews.shoppingcart.CartManager._instance) {
    throw new Error("CartManager is a singleton and cannot be instantiated multiple times.");
  }
};


/**
 * @private
 * @type {views.actionitemviews.shoppingcart.CartManager}
 */
views.actionitemviews.shoppingcart.CartManager._instance = null;


/**
 * @private
 * @type {Array}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.views_actionitemviews_shoppingcart_CartManager__cartItems = null;


/**
 * @private
 * @type {org.apache.royale.jewel.Group}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.views_actionitemviews_shoppingcart_CartManager__view = null;


/**
 * @param {string} id
 */
views.actionitemviews.shoppingcart.CartManager.prototype.addToCart = function(id) {
  var self = this;
  var /** @type {Object} */ existing = this.views_actionitemviews_shoppingcart_CartManager__cartItems.find(function(item, index, arr) {
    return item.id == id;
  });
  var /** @type {views.actionitemviews.shoppingcart.Product} */ p = views.actionitemviews.shoppingcart.ProductManager.instance.getProductById(id);
  if (parseInt(p.qt.text, 0) == 0) {
    p.alpha = 0.5;
    var /** @type {com.unhurdle.spectrum.Toast} */ snk = new com.unhurdle.spectrum.Toast();
    snk.flavor = com.unhurdle.spectrum.Toast.INFO;
    snk.text = "No more items left in stock";
    snk.autoClose = 2000;
    snk.show();
    return;
  }
  var /** @type {number} */ qty = (parseInt(p.qt.text, 0)) >> 0;
  p.qt.text = (qty - 1).toString();
  if (existing) {
    existing.qty++;
  } else {
    var foreachiter0_target = views.actionitemviews.shoppingcart.ProductManager.instance.products;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var product = foreachiter0_target[foreachiter0];
    {
      if (product.id == id) {
        var /** @type {Object} */ item = {id:product.id, name:product.title, price:product.price, img:product.filename, qty:1, maxQty:product.qty};
        this.views_actionitemviews_shoppingcart_CartManager__cartItems.push(item);
        break;
      }
    }}
    
  }
  this.views_actionitemviews_shoppingcart_CartManager_updateCartUI();
};


/**
 * @private
 */
views.actionitemviews.shoppingcart.CartManager.prototype.views_actionitemviews_shoppingcart_CartManager_updateCartUI = function() {
  while (this.views_actionitemviews_shoppingcart_CartManager__view.numElements > 0) {
    this.views_actionitemviews_shoppingcart_CartManager__view.removeElement(this.views_actionitemviews_shoppingcart_CartManager__view.getElementAt(0));
  }
  for (var /** @type {number} */ i = 0; i < this.views_actionitemviews_shoppingcart_CartManager__cartItems.length; i++) {
    var /** @type {Object} */ item = this.views_actionitemviews_shoppingcart_CartManager__cartItems[i];
    var /** @type {views.actionitemviews.shoppingcart.CartItem} */ cItem = new views.actionitemviews.shoppingcart.CartItem();
    cItem.addEventListener(views.actionitemviews.shoppingcart.CartItem.ITEM_REMOVED, org.apache.royale.utils.Language.closure(this.views_actionitemviews_shoppingcart_CartManager_cartItemRemoveHandler, this, 'views_actionitemviews_shoppingcart_CartManager_cartItemRemoveHandler'));
    cItem.addEventListener(views.actionitemviews.shoppingcart.CartItem.ITEM_QTY_CHANGED, org.apache.royale.utils.Language.closure(this.views_actionitemviews_shoppingcart_CartManager_cartItemQtyChangeHandler, this, 'views_actionitemviews_shoppingcart_CartManager_cartItemQtyChangeHandler'));
    cItem.data = item;
    this.views_actionitemviews_shoppingcart_CartManager__view.addElement(cItem);
  }
  views.actionitemviews.shoppingcart.CheckoutManager.instance.updaPriceTotal();
};


/**
 * @private
 * @param {Object} cItem
 */
views.actionitemviews.shoppingcart.CartManager.prototype.views_actionitemviews_shoppingcart_CartManager_cartItemRemoveHandler = function(cItem) {
  var self = this;
  var /** @type {views.actionitemviews.shoppingcart.CartItem} */ p = cItem.item;
  p.qt.value = 0;
  this.views_actionitemviews_shoppingcart_CartManager__cartItems = this.views_actionitemviews_shoppingcart_CartManager__cartItems.filter(function(item, index, arr) {
    return item.id != p.id;
  });
  this.views_actionitemviews_shoppingcart_CartManager_updateCartUI();
  views.actionitemviews.shoppingcart.ProductManager.instance.updateProductViewQty(p);
};


/**
 * @private
 * @param {Object} cItem
 */
views.actionitemviews.shoppingcart.CartManager.prototype.views_actionitemviews_shoppingcart_CartManager_cartItemQtyChangeHandler = function(cItem) {
  var self = this;
  var /** @type {views.actionitemviews.shoppingcart.CartItem} */ item = cItem.item;
  var /** @type {number} */ qty = (item.qt.value) >> 0;
  if (qty == 0) {
    var /** @type {Object} */ obj = new Object();
    obj.item = item;
    this.views_actionitemviews_shoppingcart_CartManager_cartItemRemoveHandler(obj);
  } else {
    var /** @type {Object} */ existing = this.views_actionitemviews_shoppingcart_CartManager__cartItems.find(function(i, index, arr) {
      return i.id == item.id;
    });
    if (existing)
      existing.qty = qty;
    views.actionitemviews.shoppingcart.ProductManager.instance.updateProductViewQty(item);
  }
  views.actionitemviews.shoppingcart.CheckoutManager.instance.updaPriceTotal();
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.jewel.Group}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.view;


views.actionitemviews.shoppingcart.CartManager.prototype.set__view = function(v) {
  this.views_actionitemviews_shoppingcart_CartManager__cartItems = [];
  this.views_actionitemviews_shoppingcart_CartManager__view = v;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.cartItems;


views.actionitemviews.shoppingcart.CartManager.prototype.get__cartItems = function() {
  return this.views_actionitemviews_shoppingcart_CartManager__cartItems;
};


Object.defineProperties(views.actionitemviews.shoppingcart.CartManager.prototype, /** @lends {views.actionitemviews.shoppingcart.CartManager.prototype} */ {
/**
 * @type {org.apache.royale.jewel.Group}
 */
view: {
set: views.actionitemviews.shoppingcart.CartManager.prototype.set__view},
/**
 * @type {Array}
 */
cartItems: {
get: views.actionitemviews.shoppingcart.CartManager.prototype.get__cartItems}}
);


/**
 * @nocollapse
 * @export
 * @type {views.actionitemviews.shoppingcart.CartManager}
 */
views.actionitemviews.shoppingcart.CartManager.instance;


views.actionitemviews.shoppingcart.CartManager.get__instance = function() {
  if (!views.actionitemviews.shoppingcart.CartManager._instance) {
    views.actionitemviews.shoppingcart.CartManager._instance = new views.actionitemviews.shoppingcart.CartManager();
  }
  return views.actionitemviews.shoppingcart.CartManager._instance;
};


Object.defineProperties(views.actionitemviews.shoppingcart.CartManager, /** @lends {views.actionitemviews.shoppingcart.CartManager} */ {
/**
 * @type {views.actionitemviews.shoppingcart.CartManager}
 */
instance: {
get: views.actionitemviews.shoppingcart.CartManager.get__instance}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CartManager', qName: 'views.actionitemviews.shoppingcart.CartManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|instance': { type: 'views.actionitemviews.shoppingcart.CartManager', access: 'readonly', declaredBy: 'views.actionitemviews.shoppingcart.CartManager'},
        'view': { type: 'org.apache.royale.jewel.Group', access: 'writeonly', declaredBy: 'views.actionitemviews.shoppingcart.CartManager'},
        'cartItems': { type: 'Array', access: 'readonly', declaredBy: 'views.actionitemviews.shoppingcart.CartManager'}
      };
    },
    methods: function () {
      return {
        'CartManager': { type: '', declaredBy: 'views.actionitemviews.shoppingcart.CartManager'},
        'addToCart': { type: 'void', declaredBy: 'views.actionitemviews.shoppingcart.CartManager', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
views.actionitemviews.shoppingcart.CartManager.prototype.ROYALE_INITIAL_STATICS = Object.keys(views.actionitemviews.shoppingcart.CartManager);
