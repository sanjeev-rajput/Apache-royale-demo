/**
 * Generated by Apache Royale Compiler from views/actionitemviews/shoppingcart/ProductManager.as
 * views.actionitemviews.shoppingcart.ProductManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('views.actionitemviews.shoppingcart.ProductManager');
/* Royale Dependency List: com.controller.PopupManager,org.apache.royale.core.UIBase,org.apache.royale.debugging.throwError,org.apache.royale.events.MouseEvent,org.apache.royale.jewel.Group,views.actionitemviews.shoppingcart.CartItem,views.actionitemviews.shoppingcart.Product,views.actionitemviews.shoppingcart.ProductPreview,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
views.actionitemviews.shoppingcart.ProductManager = function() {
};


/**
 * @private
 * @type {views.actionitemviews.shoppingcart.ProductManager}
 */
views.actionitemviews.shoppingcart.ProductManager._instance = null;


/**
 * @private
 * @type {org.apache.royale.jewel.Group}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.views_actionitemviews_shoppingcart_ProductManager__view = null;


/**
 * @private
 * @type {JSON}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.views_actionitemviews_shoppingcart_ProductManager__products = null;


/**
 * @private
 * @type {number}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.views_actionitemviews_shoppingcart_ProductManager_pIdx = 0;


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.shoppingcart.ProductManager.SORT_BY_PRICE = "sortbyprice";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.shoppingcart.ProductManager.SORT_BY_QUANTITY = "softbyqty";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.shoppingcart.ProductManager.ASCENDING = "ascending";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
views.actionitemviews.shoppingcart.ProductManager.DESCENDING = "descending";


/**
 * @private
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.views_actionitemviews_shoppingcart_ProductManager_addPid = function() {
  var foreachiter0_target = this.products;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var product = foreachiter0_target[foreachiter0];
  {
    product.id = this.views_actionitemviews_shoppingcart_ProductManager_pIdx.toString();
    this.views_actionitemviews_shoppingcart_ProductManager_pIdx++;
  }}
  
};


/**
 * @param {org.apache.royale.jewel.Group} view
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.renderProductList = function(view) {
  this.views_actionitemviews_shoppingcart_ProductManager__view = view;
  if (!this.products) {
    org.apache.royale.debugging.throwError("product data is not set");
    return;
  }
  var foreachiter1_target = this.products;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var product = foreachiter1_target[foreachiter1];
  {
    var /** @type {views.actionitemviews.shoppingcart.Product} */ p = new views.actionitemviews.shoppingcart.Product();
    p.data = product;
    p.addEventListener(org.apache.royale.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.views_actionitemviews_shoppingcart_ProductManager_pClickHandler, this, 'views_actionitemviews_shoppingcart_ProductManager_pClickHandler'));
    this.views_actionitemviews_shoppingcart_ProductManager__view.addElement(p);
  }}
  
};


/**
 * @param {string} sortType
 * @param {string} sortOrder
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.shortProductListBy = function(sortType, sortOrder) {
  var self = this;
  var /** @type {Array} */ jsonArr = this.products;
  if (sortType == views.actionitemviews.shoppingcart.ProductManager.SORT_BY_PRICE) {
    this.products.sort(function(a, b) {
      if (sortOrder == views.actionitemviews.shoppingcart.ProductManager.ASCENDING)
        return (a.price > b.price ? 1 : (a.price < b.price ? -1 : 0)) >> 0;
      if (sortOrder == views.actionitemviews.shoppingcart.ProductManager.DESCENDING)
        return (a.price < b.price ? 1 : (a.price > b.price ? -1 : 0)) >> 0;
    });
  }
  if (sortType == views.actionitemviews.shoppingcart.ProductManager.SORT_BY_QUANTITY) {
    this.products.sort(function(a, b) {
      if (sortOrder == views.actionitemviews.shoppingcart.ProductManager.ASCENDING)
        return (a.qty - b.qty) >> 0;
      if (sortOrder == views.actionitemviews.shoppingcart.ProductManager.DESCENDING)
        return (b.qty - a.qty) >> 0;
    });
  }
  while (this.views_actionitemviews_shoppingcart_ProductManager__view.numElements > 0) {
    this.views_actionitemviews_shoppingcart_ProductManager__view.removeElement(this.views_actionitemviews_shoppingcart_ProductManager__view.getElementAt(0));
  }
  this.renderProductList(this.views_actionitemviews_shoppingcart_ProductManager__view);
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} event
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.views_actionitemviews_shoppingcart_ProductManager_pClickHandler = function(event) {
  var /** @type {views.actionitemviews.shoppingcart.Product} */ product = event.currentTarget;
  if (product) {
    var /** @type {views.actionitemviews.shoppingcart.ProductPreview} */ p = new views.actionitemviews.shoppingcart.ProductPreview();
    p.data = product.data;
    com.controller.PopupManager.getInstance().createPopup(p, this.views_actionitemviews_shoppingcart_ProductManager__view.parent, 640, 480);
  }
};


/**
 * @param {string} id
 * @return {views.actionitemviews.shoppingcart.Product}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.getProductById = function(id) {
  var /** @type {number} */ items = this.views_actionitemviews_shoppingcart_ProductManager__view.numElements;
  for (var /** @type {number} */ i = 0; i < items; i++) {
    var /** @type {views.actionitemviews.shoppingcart.Product} */ product = this.views_actionitemviews_shoppingcart_ProductManager__view.getElementAt(i);
    if (product.id == id) {
      return product;
    }
  }
  return null;
};


/**
 * @param {views.actionitemviews.shoppingcart.CartItem} item
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.updateProductViewQty = function(item) {
  var /** @type {number} */ updateQty = (item.qt.max - item.qt.value) >> 0;
  this.getProductById(item.id).qt.text = updateQty.toString();
  this.getProductDataById(item.id).qty = updateQty;
  this.getProductById(item.id).alpha = 1.0;
};


/**
 * @param {string} id
 * @return {Object}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.getProductDataById = function(id) {
  var self = this;
  var /** @type {Object} */ existing = this.products.find(function(i, index, arr) {
    return i.id == id;
  });
  if (existing) {
    return existing;
  } else {
    return null;
  }
};


/**
 * @nocollapse
 * @export
 * @type {JSON}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.products;


views.actionitemviews.shoppingcart.ProductManager.prototype.get__products = function() {
  return this.views_actionitemviews_shoppingcart_ProductManager__products;
};


views.actionitemviews.shoppingcart.ProductManager.prototype.set__products = function(p) {
  this.views_actionitemviews_shoppingcart_ProductManager__products = p;
  this.views_actionitemviews_shoppingcart_ProductManager_addPid();
};


Object.defineProperties(views.actionitemviews.shoppingcart.ProductManager.prototype, /** @lends {views.actionitemviews.shoppingcart.ProductManager.prototype} */ {
/**
 * @type {JSON}
 */
products: {
get: views.actionitemviews.shoppingcart.ProductManager.prototype.get__products,
set: views.actionitemviews.shoppingcart.ProductManager.prototype.set__products}}
);


/**
 * @nocollapse
 * @export
 * @type {views.actionitemviews.shoppingcart.ProductManager}
 */
views.actionitemviews.shoppingcart.ProductManager.instance;


views.actionitemviews.shoppingcart.ProductManager.get__instance = function() {
  if (views.actionitemviews.shoppingcart.ProductManager._instance == null) {
    views.actionitemviews.shoppingcart.ProductManager._instance = new views.actionitemviews.shoppingcart.ProductManager();
  }
  return views.actionitemviews.shoppingcart.ProductManager._instance;
};


Object.defineProperties(views.actionitemviews.shoppingcart.ProductManager, /** @lends {views.actionitemviews.shoppingcart.ProductManager} */ {
/**
 * @type {views.actionitemviews.shoppingcart.ProductManager}
 */
instance: {
get: views.actionitemviews.shoppingcart.ProductManager.get__instance}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ProductManager', qName: 'views.actionitemviews.shoppingcart.ProductManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|instance': { type: 'views.actionitemviews.shoppingcart.ProductManager', access: 'readonly', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager'},
        'products': { type: 'JSON', access: 'readwrite', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager'}
      };
    },
    methods: function () {
      return {
        'renderProductList': { type: 'void', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager', parameters: function () { return [ 'org.apache.royale.jewel.Group', false ]; }},
        'shortProductListBy': { type: 'void', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'getProductById': { type: 'views.actionitemviews.shoppingcart.Product', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager', parameters: function () { return [ 'String', false ]; }},
        'updateProductViewQty': { type: 'void', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager', parameters: function () { return [ 'views.actionitemviews.shoppingcart.CartItem', false ]; }},
        'getProductDataById': { type: 'Object', declaredBy: 'views.actionitemviews.shoppingcart.ProductManager', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
views.actionitemviews.shoppingcart.ProductManager.prototype.ROYALE_INITIAL_STATICS = Object.keys(views.actionitemviews.shoppingcart.ProductManager);

//# sourceMappingURL=./ProductManager.js.map
