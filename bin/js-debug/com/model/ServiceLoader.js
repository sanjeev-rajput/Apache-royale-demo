/**
 * Generated by Apache Royale Compiler from com/model/ServiceLoader.as
 * com.model.ServiceLoader
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.model.ServiceLoader');
/* Royale Dependency List: XML,com.util.AppAlert,com.util.ServerColdStartManager,com.util.preloader.DsPreloader,org.apache.royale.debugging.throwError,org.apache.royale.events.Event,org.apache.royale.net.HTTPConstants,org.apache.royale.net.HTTPService,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
com.model.ServiceLoader = function() {
  this.com_model_ServiceLoader__service = new org.apache.royale.net.HTTPService();
};


/**
 * @private
 * @type {Function}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__callBack = null;


/**
 * @private
 * @type {Function}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__errorCallback = null;


/**
 * @private
 * @type {org.apache.royale.net.HTTPService}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__service = null;


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.model.ServiceLoader.DATA_TYPE_JSON = "json";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.model.ServiceLoader.DATA_TYPE_TEXT = "text";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.model.ServiceLoader.DATA_TYPE_XML = "xml";


/**
 * @private
 * @type {string}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__dataType = null;


/**
 * @private
 * @type {string}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__reqMethod = "GET";


/**
 * @private
 * @type {string}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__contentType = null;


/**
 * @private
 * @type {*}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__reqData = undefined;


/**
 * @private
 * @type {Array}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__headers = null;


/**
 * @private
 * @type {boolean}
 */
com.model.ServiceLoader._isFirstConnect = true;


/**
 * @private
 * @param {string} url
 * @return {boolean}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader_isServerReq = function(url) {
  if (url.indexOf("api/") != -1) {
    return true;
  } else {
    return false;
  }
};


/**
 * @param {string} url
 * @param {Function} callBack
 * @param {string=} dataType
 * @param {Function=} errCallBack
 * @param {boolean=} randUrl
 */
com.model.ServiceLoader.prototype.loadJData = function(url, callBack, dataType, errCallBack, randUrl) {
  dataType = typeof dataType !== 'undefined' ? dataType : com.model.ServiceLoader.DATA_TYPE_JSON;
  errCallBack = typeof errCallBack !== 'undefined' ? errCallBack : null;
  randUrl = typeof randUrl !== 'undefined' ? randUrl : true;
  if (this.com_model_ServiceLoader_isServerReq(url) && com.model.ServiceLoader._isFirstConnect) {
    com.util.ServerColdStartManager.showWakeUpMessage();
    com.model.ServiceLoader._isFirstConnect = false;
  }
  this.com_model_ServiceLoader__callBack = callBack;
  if (this.com_model_ServiceLoader__callBack == null) {
    org.apache.royale.debugging.throwError('Callback function cannot be null');
  }
  if (errCallBack) {
    this.com_model_ServiceLoader__errorCallback = errCallBack;
  }
  this.com_model_ServiceLoader__service.method = this.com_model_ServiceLoader__reqMethod;
  this.com_model_ServiceLoader__dataType = dataType;
  if (this.com_model_ServiceLoader__contentType)
    this.com_model_ServiceLoader__service.contentType = this.com_model_ServiceLoader__contentType;
  if (this.com_model_ServiceLoader__headers)
    this.com_model_ServiceLoader__service.headers = this.com_model_ServiceLoader__headers;
  if (randUrl) {
    (url.indexOf("?") == -1) ? this.com_model_ServiceLoader__service.url = url + "?" + Math.random() : this.com_model_ServiceLoader__service.url = url + "&" + Math.random();
  } else {
    this.com_model_ServiceLoader__service.url = url;
  }
  this.com_model_ServiceLoader__service.addEventListener(org.apache.royale.net.HTTPConstants.COMPLETE, org.apache.royale.utils.Language.closure(this.com_model_ServiceLoader_completeJdataHandler, this, 'com_model_ServiceLoader_completeJdataHandler'));
  this.com_model_ServiceLoader__service.addEventListener(org.apache.royale.net.HTTPConstants.IO_ERROR, org.apache.royale.utils.Language.closure(this.com_model_ServiceLoader_errorEventHandler, this, 'com_model_ServiceLoader_errorEventHandler'));
  com.util.preloader.DsPreloader.instance.showPreloader("serviceLoader");
  this.com_model_ServiceLoader__service.send();
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader_completeJdataHandler = function(event) {
  if (this.com_model_ServiceLoader_isServerReq(this.com_model_ServiceLoader__service.url)) {
    com.util.ServerColdStartManager.showConnectedMessage();
  }
  com.util.preloader.DsPreloader.instance.remvoePreloader("serviceLoader");
  if (this.com_model_ServiceLoader__service.status == 0) {
    com.util.AppAlert.show(com.util.AppAlert.ERROR, "Unable to connect!!! Pelase check you network (internet) connection !!!");
    return;
  }
  if (this.com_model_ServiceLoader__dataType == com.model.ServiceLoader.DATA_TYPE_JSON)
    this.com_model_ServiceLoader__callBack(JSON.parse(this.com_model_ServiceLoader__service.data));
  if (this.com_model_ServiceLoader__dataType == com.model.ServiceLoader.DATA_TYPE_TEXT)
    this.com_model_ServiceLoader__callBack(this.com_model_ServiceLoader__service.data);
  if (this.com_model_ServiceLoader__dataType == com.model.ServiceLoader.DATA_TYPE_XML)
    this.com_model_ServiceLoader__callBack(new XML(this.com_model_ServiceLoader__service.data));
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader_errorEventHandler = function(event) {
  com.util.preloader.DsPreloader.instance.remvoePreloader("serviceLoader");
  com.util.AppAlert.show(com.util.AppAlert.ERROR, "errorEventHandler ERROR!!! <br>" + event.target);
  if (this.com_model_ServiceLoader__errorCallback != null)
    this.com_model_ServiceLoader__errorCallback(event);
};


/**
 */
com.model.ServiceLoader.prototype.sendReqData = function() {
  if (this.com_model_ServiceLoader__service) {
    this.com_model_ServiceLoader__service.send();
  } else {
    org.apache.royale.utils.Language.trace("Service not initialized.");
  }
};


/**
 */
com.model.ServiceLoader.prototype.cancel = function() {
  if (this.com_model_ServiceLoader__service) {
    this.com_model_ServiceLoader__service.dispose();
    this.com_model_ServiceLoader__service = null;
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.model.ServiceLoader.prototype.reqMethod;


com.model.ServiceLoader.prototype.set__reqMethod = function(value) {
  this.com_model_ServiceLoader__reqMethod = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.model.ServiceLoader.prototype.contentType;


com.model.ServiceLoader.prototype.set__contentType = function(value) {
  this.com_model_ServiceLoader__contentType = value;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
com.model.ServiceLoader.prototype.headers;


com.model.ServiceLoader.prototype.set__headers = function(value) {
  this.com_model_ServiceLoader__headers = value;
};


/**
 * @nocollapse
 * @export
 * @type {*}
 */
com.model.ServiceLoader.prototype.reqData;


com.model.ServiceLoader.prototype.set__reqData = function(value) {
  this.com_model_ServiceLoader__reqData = value;
  if (this.com_model_ServiceLoader__reqData) {
    if (this.com_model_ServiceLoader__contentType && this.com_model_ServiceLoader__contentType.toLowerCase() == "application/json") {
      org.apache.royale.utils.Language.trace(this.com_model_ServiceLoader__reqData);
      this.com_model_ServiceLoader__service.contentData = this.com_model_ServiceLoader__reqData;
    } else {
      this.com_model_ServiceLoader__service.contentData = this.com_model_ServiceLoader__reqData;
    }
  }
};


Object.defineProperties(com.model.ServiceLoader.prototype, /** @lends {com.model.ServiceLoader.prototype} */ {
/**
 * @type {string}
 */
reqMethod: {
set: com.model.ServiceLoader.prototype.set__reqMethod},
/**
 * @type {string}
 */
contentType: {
set: com.model.ServiceLoader.prototype.set__contentType},
/**
 * @type {Array}
 */
headers: {
set: com.model.ServiceLoader.prototype.set__headers},
/**
 * @type {*}
 */
reqData: {
set: com.model.ServiceLoader.prototype.set__reqData}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.model.ServiceLoader.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ServiceLoader', qName: 'com.model.ServiceLoader', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.model.ServiceLoader.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'reqMethod': { type: 'String', access: 'writeonly', declaredBy: 'com.model.ServiceLoader'},
        'contentType': { type: 'String', access: 'writeonly', declaredBy: 'com.model.ServiceLoader'},
        'headers': { type: 'Array', access: 'writeonly', declaredBy: 'com.model.ServiceLoader'},
        'reqData': { type: '*', access: 'writeonly', declaredBy: 'com.model.ServiceLoader'}
      };
    },
    methods: function () {
      return {
        'ServiceLoader': { type: 'void', declaredBy: 'com.model.ServiceLoader'},
        'loadJData': { type: 'void', declaredBy: 'com.model.ServiceLoader', parameters: function () { return [ 'String', false ,'Function', false ,'String', true ,'Function', true ,'Boolean', true ]; }},
        'sendReqData': { type: 'void', declaredBy: 'com.model.ServiceLoader'},
        'cancel': { type: 'void', declaredBy: 'com.model.ServiceLoader'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.model.ServiceLoader.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.model.ServiceLoader.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.model.ServiceLoader);

//# sourceMappingURL=./ServiceLoader.js.map
