/**
 * Generated by Apache Royale Compiler from com/model/ServiceLoader.as
 * com.model.ServiceLoader
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.model.ServiceLoader');
/* Royale Dependency List: com.util.preloader.DsPreloader,org.apache.royale.events.Event,org.apache.royale.jewel.Alert,org.apache.royale.net.HTTPConstants,org.apache.royale.net.HTTPService,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
com.model.ServiceLoader = function() {
};


/**
 * @private
 * @type {Function}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__callBack = null;


/**
 * @private
 * @type {org.apache.royale.net.HTTPService}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__service = null;


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.model.ServiceLoader.J_SON = "json";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.model.ServiceLoader.X_ML = "xml";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.model.ServiceLoader.T_EXT = "text";


/**
 * @private
 * @type {string}
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader__dataType = null;


/**
 * @param {string} url
 * @param {Function} callBack
 * @param {string=} dataType
 */
com.model.ServiceLoader.prototype.loadJData = function(url, callBack, dataType) {
  dataType = typeof dataType !== 'undefined' ? dataType : com.model.ServiceLoader.J_SON;
  this.com_model_ServiceLoader__callBack = callBack;
  this.com_model_ServiceLoader__service = new org.apache.royale.net.HTTPService();
  this.com_model_ServiceLoader__dataType = dataType;
  (url.indexOf("?") == -1) ? this.com_model_ServiceLoader__service.url = url + "?" + Math.random() : this.com_model_ServiceLoader__service.url = url + "&" + Math.random();
  this.com_model_ServiceLoader__service.addEventListener(org.apache.royale.net.HTTPConstants.COMPLETE, org.apache.royale.utils.Language.closure(this.com_model_ServiceLoader_completeJdataHandler, this, 'com_model_ServiceLoader_completeJdataHandler'));
  this.com_model_ServiceLoader__service.addEventListener(org.apache.royale.net.HTTPConstants.IO_ERROR, org.apache.royale.utils.Language.closure(this.com_model_ServiceLoader_errorEventHandler, this, 'com_model_ServiceLoader_errorEventHandler'));
  com.util.preloader.DsPreloader.instance.showPreloader("serviceLoader");
  this.com_model_ServiceLoader__service.send();
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader_completeJdataHandler = function(event) {
  com.util.preloader.DsPreloader.instance.remvoePreloader("serviceLoader");
  if (this.com_model_ServiceLoader__service.status == 0) {
    org.apache.royale.jewel.Alert.show("Pelase check you network (internet) connection !!!", "Unable to connect");
    return;
  }
  if (this.com_model_ServiceLoader__dataType == com.model.ServiceLoader.J_SON)
    this.com_model_ServiceLoader__callBack(JSON.parse(this.com_model_ServiceLoader__service.data));
  if (this.com_model_ServiceLoader__dataType == com.model.ServiceLoader.T_EXT)
    this.com_model_ServiceLoader__callBack(this.com_model_ServiceLoader__service.data);
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
com.model.ServiceLoader.prototype.com_model_ServiceLoader_errorEventHandler = function(event) {
  com.util.preloader.DsPreloader.instance.remvoePreloader("serviceLoader");
  org.apache.royale.utils.Language.trace("errorEventHandler ERROR!!!" + event.target);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.model.ServiceLoader.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ServiceLoader', qName: 'com.model.ServiceLoader', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.model.ServiceLoader.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'ServiceLoader': { type: 'void', declaredBy: 'com.model.ServiceLoader'},
        'loadJData': { type: 'void', declaredBy: 'com.model.ServiceLoader', parameters: function () { return [ 'String', false ,'Function', false ,'String', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.model.ServiceLoader.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.model.ServiceLoader.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.model.ServiceLoader);
