/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Button.as
 * com.unhurdle.spectrum.Button
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Button');
/* Royale Dependency List: com.unhurdle.spectrum.Icon,com.unhurdle.spectrum.TextNode,com.unhurdle.spectrum.beads.KeyboardFocusHandler,org.apache.royale.core.WrappedHTMLElement*/

goog.require('com.unhurdle.spectrum.SpectrumBase');
goog.require('com.unhurdle.spectrum.interfaces.IKeyboardFocusable');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/button/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 * @implements {com.unhurdle.spectrum.interfaces.IKeyboardFocusable}
 */
com.unhurdle.spectrum.Button = function() {
  com.unhurdle.spectrum.Button.base(this, 'constructor');
  this.flavor = "primary";
  this.com_unhurdle_spectrum_Button__text = "";
  this._tabFocusable = true;
  this.submit = false;
};
goog.inherits(com.unhurdle.spectrum.Button, com.unhurdle.spectrum.SpectrumBase);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.Button.CTA = "cta";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.Button.PRIMARY = "primary";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.Button.SECONDARY = "secondary";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.Button.WARNING = "warning";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.Button.OVER_BACKGROUND = "overBackground";


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Button.prototype.getSelector = function() {
  return "spectrum-Button";
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__submit = false;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__text = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__icon = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__iconClass = "";


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__iconSize = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__iconType = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.Icon}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__iconElement = null;


/**
 * @protected
 * @param {string} selector
 */
com.unhurdle.spectrum.Button.prototype.createIcon = function(selector) {
  if (this.com_unhurdle_spectrum_Button__iconElement) {
    this.com_unhurdle_spectrum_Button__iconElement.selector = selector;
    this.setIconProps();
  } else {
    this.com_unhurdle_spectrum_Button__iconElement = new com.unhurdle.spectrum.Icon(selector);
    this.setIconProps();
    this.addElementAt(this.com_unhurdle_spectrum_Button__iconElement, 0);
  }
};


/**
 * @protected
 */
com.unhurdle.spectrum.Button.prototype.setIconProps = function() {
  if (this.iconClass) {
    this.com_unhurdle_spectrum_Button__iconElement.className = this.iconClass;
  }
  this.com_unhurdle_spectrum_Button__iconElement.size = this.iconSize;
  this.com_unhurdle_spectrum_Button__iconElement.type = this.iconType;
};


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__flavor = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__quiet = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__invalid = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__selected = false;


/**
 * @type {com.unhurdle.spectrum.TextNode}
 */
com.unhurdle.spectrum.Button.prototype.textNode = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Button.prototype.getTag = function() {
  return "button";
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Button.prototype.createElement = function() {
  com.unhurdle.spectrum.Button.superClass_.createElement.apply(this);
  this.textNode = new com.unhurdle.spectrum.TextNode("span");
  this.textNode.className = this.appendSelector("-label");
  this.element.appendChild(this.textNode.element);
  return this.element;
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__keyboardFocused = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.com_unhurdle_spectrum_Button__focused = false;


/**
 * @override
 */
com.unhurdle.spectrum.Button.prototype.addedToParent = function() {
  com.unhurdle.spectrum.Button.superClass_.addedToParent.apply(this);
  if (this.tabFocusable) {
    this.addBead(new com.unhurdle.spectrum.beads.KeyboardFocusHandler());
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.submit;


com.unhurdle.spectrum.Button.prototype.get__submit = function() {
  return this.com_unhurdle_spectrum_Button__submit;
};


com.unhurdle.spectrum.Button.prototype.set__submit = function(value) {
  if (value) {
    this.removeAttribute("type");
  } else {
    this.setAttribute("type", "button");
  }
  this.com_unhurdle_spectrum_Button__submit = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.text;


com.unhurdle.spectrum.Button.prototype.get__text = function() {
  return this.com_unhurdle_spectrum_Button__text;
};


com.unhurdle.spectrum.Button.prototype.set__text = function(value) {
  if (value != this.com_unhurdle_spectrum_Button__text) {
    this.textNode.text = value;
  }
  this.com_unhurdle_spectrum_Button__text = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.icon;


com.unhurdle.spectrum.Button.prototype.get__icon = function() {
  return this.com_unhurdle_spectrum_Button__icon;
};


com.unhurdle.spectrum.Button.prototype.set__icon = function(value) {
  this.com_unhurdle_spectrum_Button__icon = value;
  this.createIcon(value);
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.iconClass;


com.unhurdle.spectrum.Button.prototype.get__iconClass = function() {
  return this.com_unhurdle_spectrum_Button__iconClass;
};


com.unhurdle.spectrum.Button.prototype.set__iconClass = function(value) {
  this.com_unhurdle_spectrum_Button__iconClass = value;
  if (this.iconElement) {
    this.iconElement.className = value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.iconSize;


com.unhurdle.spectrum.Button.prototype.get__iconSize = function() {
  return this.com_unhurdle_spectrum_Button__iconSize;
};


com.unhurdle.spectrum.Button.prototype.set__iconSize = function(value) {
  if (!com.unhurdle.spectrum.Icon.validateSize(value)) {
    return;
  }
  this.com_unhurdle_spectrum_Button__iconSize = value;
  if (this.iconElement) {
    this.iconElement.size = value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.iconType;


com.unhurdle.spectrum.Button.prototype.get__iconType = function() {
  return this.com_unhurdle_spectrum_Button__iconType;
};


com.unhurdle.spectrum.Button.prototype.set__iconType = function(value) {
  this.com_unhurdle_spectrum_Button__iconType = value;
  if (this.iconElement) {
    this.iconElement.type = value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {com.unhurdle.spectrum.Icon}
 */
com.unhurdle.spectrum.Button.prototype.iconElement;


com.unhurdle.spectrum.Button.prototype.get__iconElement = function() {
  return this.com_unhurdle_spectrum_Button__iconElement;
};


com.unhurdle.spectrum.Button.prototype.set__iconElement = function(value) {
  if (this.com_unhurdle_spectrum_Button__iconElement) {
    this.removeElement(this.com_unhurdle_spectrum_Button__iconElement);
  }
  this.com_unhurdle_spectrum_Button__iconElement = value;
  if (this.com_unhurdle_spectrum_Button__iconElement) {
    this.addElementAt(this.com_unhurdle_spectrum_Button__iconElement, 0);
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Button.prototype.flavor;


com.unhurdle.spectrum.Button.prototype.get__flavor = function() {
  return this.com_unhurdle_spectrum_Button__flavor;
};


com.unhurdle.spectrum.Button.prototype.set__flavor = function(value) {
  if (!value) {
    throw new Error("flavor must have a value!");
  }
  if (value != this.com_unhurdle_spectrum_Button__flavor) {
    switch (value) {
      case "cta":
      
      case "primary":
      
      case "secondary":
      
      case "warning":
      
      case "overBackground":
        break;
      default:
        throw new Error("Unexpected flavor: " + value);
    }
    if (this.com_unhurdle_spectrum_Button__flavor) {
      var /** @type {string} */ oldSelector = this.valueToSelector(this.com_unhurdle_spectrum_Button__flavor);
      this.toggle(oldSelector, false);
    }
    var /** @type {string} */ newSelector = this.valueToSelector(value);
    this.toggle(newSelector, true);
  }
  this.com_unhurdle_spectrum_Button__flavor = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.quiet;


com.unhurdle.spectrum.Button.prototype.get__quiet = function() {
  return this.com_unhurdle_spectrum_Button__quiet;
};


com.unhurdle.spectrum.Button.prototype.set__quiet = function(value) {
  if (this.com_unhurdle_spectrum_Button__quiet != value) {
    this.toggle(this.valueToSelector("quiet"), value);
  }
  this.com_unhurdle_spectrum_Button__quiet = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.disabled;


com.unhurdle.spectrum.Button.prototype.get__disabled = function() {
  return this.element.disabled;
};


com.unhurdle.spectrum.Button.prototype.set__disabled = function(value) {
  this.element.disabled = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.invalid;


com.unhurdle.spectrum.Button.prototype.get__invalid = function() {
  return this.com_unhurdle_spectrum_Button__invalid;
};


com.unhurdle.spectrum.Button.prototype.set__invalid = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Button__invalid) {
    this.toggle("is-invalid", value);
  }
  this.com_unhurdle_spectrum_Button__invalid = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.selected;


com.unhurdle.spectrum.Button.prototype.get__selected = function() {
  return this.com_unhurdle_spectrum_Button__selected;
};


com.unhurdle.spectrum.Button.prototype.set__selected = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Button__selected) {
    this.toggle("is-selected", value);
  }
  this.com_unhurdle_spectrum_Button__selected = value;
};


/**
 * @nocollapse
 * @export
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.Button.prototype.focusElement;


com.unhurdle.spectrum.Button.prototype.get__focusElement = function() {
  return this.element;
  
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.keyboardFocused;


com.unhurdle.spectrum.Button.prototype.get__keyboardFocused = function() {
  return this.com_unhurdle_spectrum_Button__keyboardFocused;
};


com.unhurdle.spectrum.Button.prototype.set__keyboardFocused = function(value) {
  if (value != this.com_unhurdle_spectrum_Button__keyboardFocused) {
    this.toggle("focus-ring", value);
  }
  this.com_unhurdle_spectrum_Button__keyboardFocused = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Button.prototype.focused;


com.unhurdle.spectrum.Button.prototype.get__focused = function() {
  return this.element == document.activeElement;
  
};


com.unhurdle.spectrum.Button.prototype.set__focused = function(value) {
  value ? this.element.focus() : this.element.blur();
};


com.unhurdle.spectrum.Button.prototype.set__tabFocusable = function(value) {
  this._tabFocusable = value;
  if (value) {
    this.removeAttribute("tabindex");
  } else {
    this.setAttribute("tabindex", -1);
  }
};


Object.defineProperties(com.unhurdle.spectrum.Button.prototype, /** @lends {com.unhurdle.spectrum.Button.prototype} */ {
/**
 * @type {boolean}
 */
submit: {
get: com.unhurdle.spectrum.Button.prototype.get__submit,
set: com.unhurdle.spectrum.Button.prototype.set__submit},
/**
 * @type {string}
 */
text: {
get: com.unhurdle.spectrum.Button.prototype.get__text,
set: com.unhurdle.spectrum.Button.prototype.set__text},
/**
 * @type {string}
 */
icon: {
get: com.unhurdle.spectrum.Button.prototype.get__icon,
set: com.unhurdle.spectrum.Button.prototype.set__icon},
/**
 * @type {string}
 */
iconClass: {
get: com.unhurdle.spectrum.Button.prototype.get__iconClass,
set: com.unhurdle.spectrum.Button.prototype.set__iconClass},
/**
 * @type {string}
 */
iconSize: {
get: com.unhurdle.spectrum.Button.prototype.get__iconSize,
set: com.unhurdle.spectrum.Button.prototype.set__iconSize},
/**
 * @type {string}
 */
iconType: {
get: com.unhurdle.spectrum.Button.prototype.get__iconType,
set: com.unhurdle.spectrum.Button.prototype.set__iconType},
/**
 * @type {com.unhurdle.spectrum.Icon}
 */
iconElement: {
get: com.unhurdle.spectrum.Button.prototype.get__iconElement,
set: com.unhurdle.spectrum.Button.prototype.set__iconElement},
/**
 * @type {string}
 */
flavor: {
get: com.unhurdle.spectrum.Button.prototype.get__flavor,
set: com.unhurdle.spectrum.Button.prototype.set__flavor},
/**
 * @type {boolean}
 */
quiet: {
get: com.unhurdle.spectrum.Button.prototype.get__quiet,
set: com.unhurdle.spectrum.Button.prototype.set__quiet},
/**
 * @type {boolean}
 */
disabled: {
get: com.unhurdle.spectrum.Button.prototype.get__disabled,
set: com.unhurdle.spectrum.Button.prototype.set__disabled},
/**
 * @type {boolean}
 */
invalid: {
get: com.unhurdle.spectrum.Button.prototype.get__invalid,
set: com.unhurdle.spectrum.Button.prototype.set__invalid},
/**
 * @type {boolean}
 */
selected: {
get: com.unhurdle.spectrum.Button.prototype.get__selected,
set: com.unhurdle.spectrum.Button.prototype.set__selected},
/**
 * @type {HTMLElement}
 */
focusElement: {
get: com.unhurdle.spectrum.Button.prototype.get__focusElement},
/**
 * @type {boolean}
 */
keyboardFocused: {
get: com.unhurdle.spectrum.Button.prototype.get__keyboardFocused,
set: com.unhurdle.spectrum.Button.prototype.set__keyboardFocused},
/**
 * @type {boolean}
 */
focused: {
get: com.unhurdle.spectrum.Button.prototype.get__focused,
set: com.unhurdle.spectrum.Button.prototype.set__focused},
/**
 * @type {boolean}
 */
tabFocusable: {
get: com.unhurdle.spectrum.SpectrumBase.prototype.get__tabFocusable,
set: com.unhurdle.spectrum.Button.prototype.set__tabFocusable}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Button.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Button', qName: 'com.unhurdle.spectrum.Button', kind: 'class' }], interfaces: [com.unhurdle.spectrum.interfaces.IKeyboardFocusable] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Button.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'textNode': { type: 'com.unhurdle.spectrum.TextNode', get_set: function (/** com.unhurdle.spectrum.Button */ inst, /** * */ v) {return v !== undefined ? inst.textNode = v : inst.textNode;}}
      };
    },
    accessors: function () {
      return {
        'submit': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'icon': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'iconClass': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'iconSize': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'iconType': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'iconElement': { type: 'com.unhurdle.spectrum.Icon', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'flavor': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'quiet': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'disabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'invalid': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'selected': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'focusElement': { type: 'HTMLElement', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Button'},
        'keyboardFocused': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'focused': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Button'},
        'tabFocusable': { type: 'Boolean', access: 'writeonly', declaredBy: 'com.unhurdle.spectrum.Button'}
      };
    },
    methods: function () {
      return {
        'Button': { type: '', declaredBy: 'com.unhurdle.spectrum.Button'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.Button'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Button.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.unhurdle.spectrum.Button.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.unhurdle.spectrum.Button);
