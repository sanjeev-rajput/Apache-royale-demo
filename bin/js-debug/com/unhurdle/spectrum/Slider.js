/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Slider.as
 * com.unhurdle.spectrum.Slider
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Slider');
/* Royale Dependency List: com.unhurdle.spectrum.TextNode,com.unhurdle.spectrum.newElement,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.Event,org.apache.royale.events.MouseEvent,org.apache.royale.geom.Point,org.apache.royale.utils.PointUtils,org.apache.royale.utils.number.getPercent,org.apache.royale.utils.number.pinValue,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.SliderBase');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.SliderBase}
 */
com.unhurdle.spectrum.Slider = function() {
  com.unhurdle.spectrum.Slider.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.Slider, com.unhurdle.spectrum.SliderBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.getSelector = function() {
  return "spectrum-Slider";
};


/**
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.addedToParent = function() {
  com.unhurdle.spectrum.Slider.superClass_.addedToParent.apply(this);
  this.positionElements();
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.positionElements = function() {
  var /** @type {number} */ percent = (this.value - this.min) / (this.max - this.min) * 100;
  this.com_unhurdle_spectrum_Slider_handle.style.left = percent + "%";
  this.com_unhurdle_spectrum_Slider_leftTrack.style.width = percent + '%';
  this.com_unhurdle_spectrum_Slider_rightTrack.style.width = (100 - percent) + '%';
  if (this.filledOffset) {
    this.com_unhurdle_spectrum_Slider_setFillTrack();
  }
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.enableDisableInput = function(value) {
  this.input.disabled = value;
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.getValue = function() {
  return this.input.value;
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider__filled = false;


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider__filledOffset = NaN;


/**
 * @private
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_setFillTrack = function() {
  var /** @type {string} */ len = this.com_unhurdle_spectrum_Slider_handle.style.left.slice(0, this.com_unhurdle_spectrum_Slider_handle.style.left.indexOf("%"));
  var /** @type {number} */ l = org.apache.royale.utils.Language._int(len) - this.filledOffset;
  if (l > 0) {
    if (this.com_unhurdle_spectrum_Slider_fillTrack.classList.contains(this.appendSelector("-right"))) {
      this.com_unhurdle_spectrum_Slider_fillTrack.classList.remove(this.appendSelector("-right"));
    }
    this.com_unhurdle_spectrum_Slider_fillTrack.style.left = this.filledOffset + "%";
    l -= 3;
  } else {
    if (!this.com_unhurdle_spectrum_Slider_fillTrack.classList.contains(this.appendSelector("-right"))) {
      this.com_unhurdle_spectrum_Slider_fillTrack.classList.add(this.appendSelector("-right"));
    }
    this.com_unhurdle_spectrum_Slider_fillTrack.style.left = (this.filledOffset + l) + "%";
    l *= -1;
  }
  this.com_unhurdle_spectrum_Slider_fillTrack.style.width = l + "%";
};


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider__ticks = 0;


/**
 * @private
 * @type {Array}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_tickArray = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider__showTickValues = false;


/**
 * @private
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_calculateTickValues = function() {
  if (!this.com_unhurdle_spectrum_Slider_tickArray || !this.com_unhurdle_spectrum_Slider_tickArray.length) {
    return;
  }
  if (this.com_unhurdle_spectrum_Slider__showTickValues) {
    this.toggle(this.valueToSelector("tick"), false);
    var /** @type {number} */ numTicks = this.com_unhurdle_spectrum_Slider_tickArray.length;
    var /** @type {number} */ minVal = this.min;
    var /** @type {number} */ maxVal = this.max;
    var /** @type {number} */ span = maxVal - minVal;
    var /** @type {number} */ increment = span / (numTicks - 1);
  }
  for (var /** @type {number} */ i = 0; i < numTicks; i++) {
    if (this.com_unhurdle_spectrum_Slider__showTickValues) {
      this.com_unhurdle_spectrum_Slider_tickArray[i]["text"] = "" + minVal;
      minVal = Math.round((minVal + increment) * 100) / 100;
    } else {
      this.com_unhurdle_spectrum_Slider_tickArray[i]["text"] = "";
    }
  }
};


/**
 * @private
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_tickContainer = null;


/**
 * @private
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_handle = null;


/**
 * @private
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_fillTrack = null;


/**
 * @private
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_leftTrack = null;


/**
 * @private
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.Slider.prototype.com_unhurdle_spectrum_Slider_rightTrack = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.Slider.superClass_.createElement.apply(this);
  this.controlsContainer = com.unhurdle.spectrum.newElement("div", this.appendSelector("-controls"));
  this.com_unhurdle_spectrum_Slider_leftTrack = com.unhurdle.spectrum.newElement("div", this.appendSelector("-track"));
  this.controlsContainer.appendChild(this.com_unhurdle_spectrum_Slider_leftTrack);
  this.com_unhurdle_spectrum_Slider_handle = com.unhurdle.spectrum.newElement("div", this.appendSelector("-handle"));
  this.input = com.unhurdle.spectrum.newElement("input", this.appendSelector("-input"));
  this.input.type = "range";
  this.input.step = "1";
  this.com_unhurdle_spectrum_Slider_handle.appendChild(this.input);
  this.controlsContainer.appendChild(this.com_unhurdle_spectrum_Slider_handle);
  this.com_unhurdle_spectrum_Slider_rightTrack = com.unhurdle.spectrum.newElement("div", this.appendSelector("-track"));
  this.controlsContainer.appendChild(this.com_unhurdle_spectrum_Slider_rightTrack);
  elem.appendChild(this.controlsContainer);
  this.element.addEventListener('mousedown', org.apache.royale.utils.Language.closure(this.onMouseDown, this, 'onMouseDown'));
  return elem;
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Slider.prototype.onMouseMove = function(e) {
  if (this.disabled) {
    return;
  }
  var /** @type {HTMLElement} */ elem = this.element;
  var /** @type {number} */ sliderOffsetWidth = elem.offsetWidth;
  var /** @type {number} */ localX = org.apache.royale.utils.PointUtils.globalToLocal(new org.apache.royale.geom.Point(e.clientX, e.clientY), this).x;
  var /** @type {number} */ x = org.apache.royale.utils.number.pinValue(localX, 0, sliderOffsetWidth);
  var /** @type {number} */ percent = org.apache.royale.utils.number.getPercent(x, sliderOffsetWidth);
  var /** @type {number} */ val = (this.max - this.min) / (100 / percent) + this.min;
  var /** @type {number} */ stepVal = this.step;
  var /** @type {number} */ rem = val % stepVal;
  val = val - rem;
  if (rem > (stepVal / 2)) {
    val += stepVal;
  }
  this.value = val;
  this.positionElements();
  this.dispatchEvent(new org.apache.royale.events.Event("change"));
};


com.unhurdle.spectrum.Slider.prototype.set__min = function(value) {
  com.unhurdle.spectrum.Slider.superClass_.set__min.apply(this, [value]);
  if (this.showTickValues) {
    this.com_unhurdle_spectrum_Slider_calculateTickValues();
  }
};


com.unhurdle.spectrum.Slider.prototype.set__max = function(value) {
  com.unhurdle.spectrum.Slider.superClass_.set__max.apply(this, [value]);
  if (this.showTickValues) {
    this.com_unhurdle_spectrum_Slider_calculateTickValues();
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Slider.prototype.value;


com.unhurdle.spectrum.Slider.prototype.get__value = function() {
  return Number(this.input.value);
};


com.unhurdle.spectrum.Slider.prototype.set__value = function(value) {
  this.input.value = "" + value;
  if (this.parent) {
    this.positionElements();
  }
  if (this.valueNode) {
    this.valueNode.text = "" + value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Slider.prototype.filled;


com.unhurdle.spectrum.Slider.prototype.get__filled = function() {
  return this.com_unhurdle_spectrum_Slider__filled;
};


com.unhurdle.spectrum.Slider.prototype.set__filled = function(value) {
  this.com_unhurdle_spectrum_Slider__filled = value;
  this.toggle(this.valueToSelector("filled"), value);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Slider.prototype.filledOffset;


com.unhurdle.spectrum.Slider.prototype.get__filledOffset = function() {
  return this.com_unhurdle_spectrum_Slider__filledOffset;
};


com.unhurdle.spectrum.Slider.prototype.set__filledOffset = function(value) {
  this.com_unhurdle_spectrum_Slider__filledOffset = value;
  if (value) {
    if (!this.com_unhurdle_spectrum_Slider_fillTrack) {
      this.com_unhurdle_spectrum_Slider_fillTrack = com.unhurdle.spectrum.newElement("div", this.appendSelector("-fill"));
    }
    this.com_unhurdle_spectrum_Slider_setFillTrack();
    this.controlsContainer.appendChild(this.com_unhurdle_spectrum_Slider_fillTrack);
  } else {
    if (this.controlsContainer.contains(this.com_unhurdle_spectrum_Slider_fillTrack)) {
      this.com_unhurdle_spectrum_Slider_fillTrack = null;
      this.controlsContainer.removeChild(this.com_unhurdle_spectrum_Slider_fillTrack);
    }
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Slider.prototype.ticks;


com.unhurdle.spectrum.Slider.prototype.get__ticks = function() {
  return this.com_unhurdle_spectrum_Slider__ticks;
};


com.unhurdle.spectrum.Slider.prototype.set__ticks = function(value) {
  if (value != this.com_unhurdle_spectrum_Slider__ticks) {
    this.toggle(this.valueToSelector("tick"), !!value);
    if (!!value) {
      this.com_unhurdle_spectrum_Slider_leftTrack.style.visibility = this.com_unhurdle_spectrum_Slider_rightTrack.style.visibility = "hidden";
    } else {
      this.com_unhurdle_spectrum_Slider_leftTrack.style.visibility = this.com_unhurdle_spectrum_Slider_rightTrack.style.visibility = "visible";
    }
    var /** @type {string} */ base = this.getSelector();
    this.com_unhurdle_spectrum_Slider__ticks = value;
    if (!this.com_unhurdle_spectrum_Slider_tickContainer) {
      this.com_unhurdle_spectrum_Slider_tickContainer = com.unhurdle.spectrum.newElement("div", base + "-ticks");
      this.controlsContainer.insertBefore(this.com_unhurdle_spectrum_Slider_tickContainer, this.com_unhurdle_spectrum_Slider_handle);
    } else {
      this.com_unhurdle_spectrum_Slider_tickContainer.innerHTML = "";
    }
    this.com_unhurdle_spectrum_Slider_tickArray = [];
    for (var /** @type {number} */ i = 0; i < value; i++) {
      var /** @type {HTMLElement} */ tick = com.unhurdle.spectrum.newElement("div", base + "-tick");
      var /** @type {com.unhurdle.spectrum.TextNode} */ node = new com.unhurdle.spectrum.TextNode("div");
      node.className = base + "-tickLabel";
      tick.appendChild(node.element);
      this.com_unhurdle_spectrum_Slider_tickArray.push(node);
      this.com_unhurdle_spectrum_Slider_tickContainer.appendChild(tick);
    }
    if (this.com_unhurdle_spectrum_Slider__showTickValues) {
      this.com_unhurdle_spectrum_Slider_calculateTickValues();
    }
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Slider.prototype.showTickValues;


com.unhurdle.spectrum.Slider.prototype.get__showTickValues = function() {
  return this.com_unhurdle_spectrum_Slider__showTickValues;
};


com.unhurdle.spectrum.Slider.prototype.set__showTickValues = function(value) {
  this.com_unhurdle_spectrum_Slider__showTickValues = value;
  this.com_unhurdle_spectrum_Slider_calculateTickValues();
};


Object.defineProperties(com.unhurdle.spectrum.Slider.prototype, /** @lends {com.unhurdle.spectrum.Slider.prototype} */ {
/**
 * @type {number}
 */
min: {
get: com.unhurdle.spectrum.SliderBase.prototype.get__min,
set: com.unhurdle.spectrum.Slider.prototype.set__min},
/**
 * @type {number}
 */
max: {
get: com.unhurdle.spectrum.SliderBase.prototype.get__max,
set: com.unhurdle.spectrum.Slider.prototype.set__max},
/**
 * @type {number}
 */
value: {
get: com.unhurdle.spectrum.Slider.prototype.get__value,
set: com.unhurdle.spectrum.Slider.prototype.set__value},
/**
 * @type {boolean}
 */
filled: {
get: com.unhurdle.spectrum.Slider.prototype.get__filled,
set: com.unhurdle.spectrum.Slider.prototype.set__filled},
/**
 * @type {number}
 */
filledOffset: {
get: com.unhurdle.spectrum.Slider.prototype.get__filledOffset,
set: com.unhurdle.spectrum.Slider.prototype.set__filledOffset},
/**
 * @type {number}
 */
ticks: {
get: com.unhurdle.spectrum.Slider.prototype.get__ticks,
set: com.unhurdle.spectrum.Slider.prototype.set__ticks},
/**
 * @type {boolean}
 */
showTickValues: {
get: com.unhurdle.spectrum.Slider.prototype.get__showTickValues,
set: com.unhurdle.spectrum.Slider.prototype.set__showTickValues}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Slider.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Slider', qName: 'com.unhurdle.spectrum.Slider', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Slider.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'min': { type: 'Number', access: 'writeonly', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'max': { type: 'Number', access: 'writeonly', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'value': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'filled': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'filledOffset': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'ticks': { type: 'int', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'showTickValues': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Slider'}
      };
    },
    methods: function () {
      return {
        'Slider': { type: '', declaredBy: 'com.unhurdle.spectrum.Slider'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.Slider'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Slider.prototype.ROYALE_COMPILE_FLAGS = 11;
