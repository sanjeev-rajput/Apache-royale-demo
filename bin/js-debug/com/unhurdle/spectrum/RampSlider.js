/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/RampSlider.as
 * com.unhurdle.spectrum.RampSlider
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.RampSlider');
/* Royale Dependency List: com.unhurdle.spectrum.newElement,com.unhurdle.spectrum.newIconSVG,com.unhurdle.spectrum.newSVGElement,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.MouseEvent,org.apache.royale.geom.Point,org.apache.royale.utils.PointUtils,org.apache.royale.utils.number.getPercent,org.apache.royale.utils.number.pinValue,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.SliderBase');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.SliderBase}
 */
com.unhurdle.spectrum.RampSlider = function() {
  com.unhurdle.spectrum.RampSlider.base(this, 'constructor');
  this.typeNames = this.getSelector() + " " + this.valueToSelector("ramp");
};
goog.inherits(com.unhurdle.spectrum.RampSlider, com.unhurdle.spectrum.SliderBase);


/**
 * @private
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.RampSlider.prototype.com_unhurdle_spectrum_RampSlider_handle = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RampSlider.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.RampSlider.superClass_.createElement.apply(this);
  this.controlsContainer = com.unhurdle.spectrum.newElement("div", this.appendSelector("-controls"));
  var /** @type {HTMLDivElement} */ ramp = com.unhurdle.spectrum.newElement("div");
  ramp.className = this.appendSelector("-ramp");
  var /** @type {SVGElement} */ svgElement = com.unhurdle.spectrum.newIconSVG("");
  var /** @type {SVGPathElement} */ pathElement = com.unhurdle.spectrum.newSVGElement("path", "");
  pathElement.setAttribute("d", "M240,4v8c0,2.3-1.9,4.1-4.2,4L1,9C0.4,9,0,8.5,0,8c0-0.5,0.4-1,1-1l234.8-7C238.1-0.1,240,1.7,240,4z");
  svgElement.setAttribute("viewBox", "0 0 240 16");
  svgElement.setAttribute("preserveAspectRatio", "none");
  svgElement.setAttribute("aria-hidden", true);
  svgElement.appendChild(pathElement);
  ramp.appendChild(svgElement);
  this.controlsContainer.appendChild(ramp);
  this.com_unhurdle_spectrum_RampSlider_handle = com.unhurdle.spectrum.newElement("div", this.appendSelector("-handle"));
  this.com_unhurdle_spectrum_RampSlider_handle.style.left = "40%";
  this.input = com.unhurdle.spectrum.newElement("input", this.appendSelector("-input"));
  this.input.type = "range";
  this.input.step = "1";
  this.max = 50;
  this.com_unhurdle_spectrum_RampSlider_handle.appendChild(this.input);
  this.controlsContainer.appendChild(this.com_unhurdle_spectrum_RampSlider_handle);
  elem.appendChild(this.controlsContainer);
  this.element.addEventListener('mousedown', org.apache.royale.utils.Language.closure(this.onMouseDown, this, 'onMouseDown'));
  return elem;
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RampSlider.prototype.positionElements = function() {
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RampSlider.prototype.getValue = function() {
  return this.input.value;
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RampSlider.prototype.enableDisableInput = function(value) {
  this.input.disabled = value;
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RampSlider.prototype.onMouseMove = function(e) {
  if (this.disabled) {
    return;
  }
  var /** @type {number} */ sliderOffsetWidth = this.element.offsetWidth;
  var /** @type {number} */ localX = org.apache.royale.utils.PointUtils.globalToLocal(new org.apache.royale.geom.Point(e.clientX, e.clientY), this).x;
  var /** @type {number} */ x = org.apache.royale.utils.number.pinValue(localX, 0, sliderOffsetWidth);
  var /** @type {number} */ percent = org.apache.royale.utils.number.getPercent(x, sliderOffsetWidth);
  var /** @type {number} */ val = (this.max - this.min) / (100 / percent) + this.min;
  var /** @type {number} */ stepVal = this.step;
  var /** @type {number} */ rem = val % stepVal;
  val = val - rem;
  if (rem > (stepVal / 2)) {
    val += stepVal;
  }
  this.value = val;
  this.com_unhurdle_spectrum_RampSlider_handle.style.left = percent + "%";
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.RampSlider.prototype.value;


com.unhurdle.spectrum.RampSlider.prototype.get__value = function() {
  return Number(this.input.value);
};


com.unhurdle.spectrum.RampSlider.prototype.set__value = function(value) {
  this.input.value = "" + value;
  if (this.parent) {
    this.positionElements();
  }
  if (this.valueNode) {
    this.valueNode.text = "" + value;
  }
};


Object.defineProperties(com.unhurdle.spectrum.RampSlider.prototype, /** @lends {com.unhurdle.spectrum.RampSlider.prototype} */ {
/**
 * @type {number}
 */
value: {
get: com.unhurdle.spectrum.RampSlider.prototype.get__value,
set: com.unhurdle.spectrum.RampSlider.prototype.set__value}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.RampSlider.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RampSlider', qName: 'com.unhurdle.spectrum.RampSlider', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.RampSlider.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'value': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.RampSlider'}
      };
    },
    methods: function () {
      return {
        'RampSlider': { type: '', declaredBy: 'com.unhurdle.spectrum.RampSlider'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.RampSlider.prototype.ROYALE_COMPILE_FLAGS = 11;
