/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/List.as
 * com.unhurdle.spectrum.List
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.List');
/* Royale Dependency List: com.unhurdle.spectrum.includes.SideNavInclude,org.apache.royale.core.CSSClassList,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.html.util.addElementToWrapper,org.apache.royale.utils.sendStrandEvent*/

goog.require('com.unhurdle.spectrum.ISpectrumElement');
goog.require('org.apache.royale.html.List');
goog.require('com.unhurdle.spectrum.interfaces.IKeyboardNavigateable');



/**
 * List is for basic selectable lists. The content of the list is provided by a dataProvider and the rendering is done by DataRendererers.
 * The basic ListDataRenderer accepts text and an optional icon.
 * If the dataProvider is a list of strings, the data will not be converted.
 * Use List for compact selectable lists. If you want check-able lists, use Menu.
 * For a more spaced styling with room for checkboxes, icons, etc. use AssetList.
 * List uses the styling for SideNav because it is more compact than AssetList and has background selection unlike Menu.
 * 
 * @constructor
 * @extends {org.apache.royale.html.List}
 * @implements {com.unhurdle.spectrum.ISpectrumElement}
 * @implements {com.unhurdle.spectrum.interfaces.IKeyboardNavigateable}
 */
com.unhurdle.spectrum.List = function() {
  com.unhurdle.spectrum.List.base(this, 'constructor');
  this.classList = new org.apache.royale.core.CSSClassList();
  this.typeNames = this.getSelector();
};
goog.inherits(com.unhurdle.spectrum.List, org.apache.royale.html.List);


/**
 * @protected
 * @return {string}
 */
com.unhurdle.spectrum.List.prototype.getSelector = function() {
  return com.unhurdle.spectrum.includes.SideNavInclude.getSelector();
};


/**
 * @protected
 * @param {string} value
 * @return {string}
 */
com.unhurdle.spectrum.List.prototype.appendSelector = function(value) {
  return this.getSelector() + value;
};


/**
 * @protected
 * @param {string} value
 * @return {string}
 */
com.unhurdle.spectrum.List.prototype.valueToSelector = function(value) {
  return this.getSelector() + "--" + value;
};


/**
 * @protected
 * @type {org.apache.royale.core.CSSClassList}
 */
com.unhurdle.spectrum.List.prototype.classList = null;


/**
 * @param {string} classNameVal
 * @param {boolean} add
 */
com.unhurdle.spectrum.List.prototype.toggle = function(classNameVal, add) {
  add ? this.classList.add(classNameVal) : this.classList.remove(classNameVal);
  this.setClassName(this.computeFinalClassNames());
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.List.prototype.computeFinalClassNames = function() {
  return (this.classList.compute() + com.unhurdle.spectrum.List.superClass_.computeFinalClassNames.apply(this)).trim();
};


/**
 * @protected
 * @return {string}
 */
com.unhurdle.spectrum.List.prototype.getTag = function() {
  return "ul";
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.List.prototype.createElement = function() {
  return org.apache.royale.html.util.addElementToWrapper(this, this.getTag());
};


/**
 * @param {string} property
 * @param {Object} value
 */
com.unhurdle.spectrum.List.prototype.setStyle = function(property, value) {
  this.element.style[property] = value;
};


/**
 * @param {string} name
 * @param {*} value
 */
com.unhurdle.spectrum.List.prototype.setAttribute = function(name, value) {
  this.element.setAttribute(name, value);
};


/**
 * @param {string} name
 * @return {*}
 */
com.unhurdle.spectrum.List.prototype.getAttribute = function(name) {
  return this.element.getAttribute(name);
  
};


/**
 * @param {string} name
 */
com.unhurdle.spectrum.List.prototype.removeAttribute = function(name) {
  this.element.removeAttribute(name);
};


/**
 * @protected
 * @type {boolean}
 */
com.unhurdle.spectrum.List.prototype._tabFocusable = false;


/**
 */
com.unhurdle.spectrum.List.prototype.focus = function() {
  org.apache.royale.utils.sendStrandEvent(this, "focusIn");
};


/**
 */
com.unhurdle.spectrum.List.prototype.blur = function() {
  org.apache.royale.utils.sendStrandEvent(this, "focusOut");
};


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.List.prototype.com_unhurdle_spectrum_List__flexGrow = -1;


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.List.prototype.tabFocusable;


com.unhurdle.spectrum.List.prototype.get__tabFocusable = function() {
  return this._tabFocusable;
};


com.unhurdle.spectrum.List.prototype.set__tabFocusable = function(value) {
  this._tabFocusable = value;
  if (value) {
    this.setAttribute("tabindex", 0);
  } else {
    this.removeAttribute("tabindex");
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.List.prototype.autofocus;


com.unhurdle.spectrum.List.prototype.get__autofocus = function() {
  
  return !!(this.element["autofocus"]);
};


com.unhurdle.spectrum.List.prototype.set__autofocus = function(value) {
  
  this.element["autofocus"] = value;
};


/**
 * @nocollapse
 * @export
 * @type {com.unhurdle.spectrum.ISpectrumElement}
 */
com.unhurdle.spectrum.List.prototype.focusParent;


com.unhurdle.spectrum.List.prototype.get__focusParent = function() {
  return this;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.List.prototype.flexGrow;


com.unhurdle.spectrum.List.prototype.get__flexGrow = function() {
  return this.com_unhurdle_spectrum_List__flexGrow;
};


com.unhurdle.spectrum.List.prototype.set__flexGrow = function(value) {
  this.com_unhurdle_spectrum_List__flexGrow = value;
  if (value < 0) {
    this.element.style.removeProperty("flex-grow");
  } else {
    this.element.style.flexGrow = value;
  }
};


Object.defineProperties(com.unhurdle.spectrum.List.prototype, /** @lends {com.unhurdle.spectrum.List.prototype} */ {
/**
 * @type {boolean}
 */
tabFocusable: {
get: com.unhurdle.spectrum.List.prototype.get__tabFocusable,
set: com.unhurdle.spectrum.List.prototype.set__tabFocusable},
/**
 * @type {boolean}
 */
autofocus: {
get: com.unhurdle.spectrum.List.prototype.get__autofocus,
set: com.unhurdle.spectrum.List.prototype.set__autofocus},
/**
 * @type {com.unhurdle.spectrum.ISpectrumElement}
 */
focusParent: {
get: com.unhurdle.spectrum.List.prototype.get__focusParent},
/**
 * @type {number}
 */
flexGrow: {
get: com.unhurdle.spectrum.List.prototype.get__flexGrow,
set: com.unhurdle.spectrum.List.prototype.set__flexGrow}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.List.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'List', qName: 'com.unhurdle.spectrum.List', kind: 'class' }], interfaces: [com.unhurdle.spectrum.ISpectrumElement, com.unhurdle.spectrum.interfaces.IKeyboardNavigateable] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.List.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'tabFocusable': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.List'},
        'autofocus': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.List'},
        'focusParent': { type: 'com.unhurdle.spectrum.ISpectrumElement', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.List'},
        'flexGrow': { type: 'int', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.List'}
      };
    },
    methods: function () {
      return {
        'List': { type: '', declaredBy: 'com.unhurdle.spectrum.List'},
        'toggle': { type: 'void', declaredBy: 'com.unhurdle.spectrum.List', parameters: function () { return [ 'String', false ,'Boolean', false ]; }},
        'setStyle': { type: 'void', declaredBy: 'com.unhurdle.spectrum.List', parameters: function () { return [ 'String', false ,'Object', false ]; }},
        'setAttribute': { type: 'void', declaredBy: 'com.unhurdle.spectrum.List', parameters: function () { return [ 'String', false ,'*', false ]; }},
        'getAttribute': { type: '*', declaredBy: 'com.unhurdle.spectrum.List', parameters: function () { return [ 'String', false ]; }},
        'removeAttribute': { type: 'void', declaredBy: 'com.unhurdle.spectrum.List', parameters: function () { return [ 'String', false ]; }},
        'focus': { type: 'void', declaredBy: 'com.unhurdle.spectrum.List'},
        'blur': { type: 'void', declaredBy: 'com.unhurdle.spectrum.List'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.List.prototype.ROYALE_COMPILE_FLAGS = 11;
