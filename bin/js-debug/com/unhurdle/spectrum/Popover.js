/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Popover.as
 * com.unhurdle.spectrum.Popover
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Popover');
/* Royale Dependency List: com.unhurdle.spectrum.Application,com.unhurdle.spectrum.newSVGElement,org.apache.royale.core.IPopUpHostParent,org.apache.royale.events.Event,org.apache.royale.geom.Point,org.apache.royale.geom.Rectangle,org.apache.royale.utils.DisplayUtils,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.Group');
goog.require('org.apache.royale.core.IPopUp');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/popover/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.Group}
 * @implements {org.apache.royale.core.IPopUp}
 */
com.unhurdle.spectrum.Popover = function() {
  com.unhurdle.spectrum.Popover.base(this, 'constructor');
  this.element.style.zIndex = 3;
  this.element.style.position = "absolute";
};
goog.inherits(com.unhurdle.spectrum.Popover, com.unhurdle.spectrum.Group);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Popover.prototype.getSelector = function() {
  return "spectrum-Popover";
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__floating = false;


/**
 * @private
 * @type {org.apache.royale.geom.Rectangle}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__anchor = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__open = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__quiet = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__relativePosition = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__dialog = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__tipDialog = true;


/**
 * @override
 */
com.unhurdle.spectrum.Popover.prototype.addedToParent = function() {
  com.unhurdle.spectrum.Popover.superClass_.addedToParent.apply(this);
  this.positionDialog();
  if (this.dialog && this.tipDialog) {
    if (!this.tipElement) {
      this.tipElement = com.unhurdle.spectrum.newSVGElement("svg", this.appendSelector("-tip"));
      this.tipElement.style.width = "22px";
      this.tipElement.style.height = "22px";
      this.tipPath = com.unhurdle.spectrum.newSVGElement("path", this.appendSelector("-tip-triangle"));
      this.tipElement.appendChild(this.tipPath);
    }
    this.element.appendChild(this.tipElement);
    requestAnimationFrame(org.apache.royale.utils.Language.closure(this.positionTip, this, 'positionTip'));
  } else {
    if (this.tipElement) {
      this.element.removeChild(this.tipElement);
      this.tipElement = null;
    }
  }
};


/**
 * @protected
 */
com.unhurdle.spectrum.Popover.prototype.positionDialog = function() {
  if (!this.dialog) {
    return;
  }
  var /** @type {org.apache.royale.geom.Rectangle} */ appBounds = org.apache.royale.utils.DisplayUtils.getScreenBoundingRect(com.unhurdle.spectrum.Application.current.initialView);
  var /** @type {org.apache.royale.geom.Rectangle} */ componentBounds = org.apache.royale.utils.DisplayUtils.getScreenBoundingRect(this);
  if (!this.anchor) {
    this.x = (appBounds.width - componentBounds.width) / 2;
    this.y = (appBounds.height - componentBounds.height) / 2;
    return;
  }
  var /** @type {string} */ pxStr = "px";
  switch (this.position) {
    case "top":
      this.com_unhurdle_spectrum_Popover_positionTop(appBounds, componentBounds);
      break;
    case "left":
      this.com_unhurdle_spectrum_Popover_positionLeft(appBounds, componentBounds);
      break;
    case "right":
      this.com_unhurdle_spectrum_Popover_positionRight(appBounds, componentBounds);
      break;
    case "bottom":
    
    default:
      this.com_unhurdle_spectrum_Popover_positionBottom(appBounds, componentBounds);
      break;
  }
};


/**
 * @private
 * @param {org.apache.royale.geom.Rectangle} appBounds
 * @param {org.apache.royale.geom.Rectangle} componentBounds
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover_positionTop = function(appBounds, componentBounds) {
  var /** @type {org.apache.royale.geom.Point} */ anchorCenter = new org.apache.royale.geom.Point((this.anchor.left + (this.anchor.width / 2)), this.anchor.top);
  anchorCenter.y -= componentBounds.height;
  this.com_unhurdle_spectrum_Popover_positionHorizontally(anchorCenter, appBounds, componentBounds);
};


/**
 * @private
 * @param {org.apache.royale.geom.Rectangle} appBounds
 * @param {org.apache.royale.geom.Rectangle} componentBounds
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover_positionBottom = function(appBounds, componentBounds) {
  var /** @type {org.apache.royale.geom.Point} */ anchorCenter = new org.apache.royale.geom.Point((this.anchor.left + (this.anchor.width / 2)), this.anchor.bottom);
  this.com_unhurdle_spectrum_Popover_positionHorizontally(anchorCenter, appBounds, componentBounds);
};


/**
 * @private
 * @param {org.apache.royale.geom.Point} point
 * @param {org.apache.royale.geom.Rectangle} appBounds
 * @param {org.apache.royale.geom.Rectangle} componentBounds
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover_positionHorizontally = function(point, appBounds, componentBounds) {
  var /** @type {number} */ top = point.y;
  var /** @type {number} */ left = point.x - (componentBounds.width / 2);
  var /** @type {number} */ right = point.x + (componentBounds.width / 2);
  this.y = top;
  var /** @type {number} */ pointPercent = componentBounds.width / 100;
  if (left < appBounds.left + 2) {
    var /** @type {number} */ diff = appBounds.left - left + 2;
    left += diff;
    this.tipPosition = 50 - (diff / pointPercent);
  } else if (right > appBounds.right - 2) {
    diff = (right - appBounds.right + 2);
    left -= diff;
    this.tipPosition = 50 + (diff / pointPercent);
  } else {
    this.tipPosition = 50;
  }
  this.x = left;
};


/**
 * @private
 * @param {org.apache.royale.geom.Rectangle} appBounds
 * @param {org.apache.royale.geom.Rectangle} componentBounds
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover_positionLeft = function(appBounds, componentBounds) {
  var /** @type {org.apache.royale.geom.Point} */ anchorCenter = new org.apache.royale.geom.Point(this.anchor.left, this.anchor.top + (this.anchor.height / 2));
  anchorCenter.x -= componentBounds.width;
  anchorCenter.x -= 14;
  this.com_unhurdle_spectrum_Popover_positionVertically(anchorCenter, appBounds, componentBounds);
};


/**
 * @private
 * @param {org.apache.royale.geom.Rectangle} appBounds
 * @param {org.apache.royale.geom.Rectangle} componentBounds
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover_positionRight = function(appBounds, componentBounds) {
  var /** @type {org.apache.royale.geom.Point} */ anchorCenter = new org.apache.royale.geom.Point(this.anchor.right, this.anchor.top + (this.anchor.height / 2));
  this.com_unhurdle_spectrum_Popover_positionVertically(anchorCenter, appBounds, componentBounds);
};


/**
 * @private
 * @param {org.apache.royale.geom.Point} point
 * @param {org.apache.royale.geom.Rectangle} appBounds
 * @param {org.apache.royale.geom.Rectangle} componentBounds
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover_positionVertically = function(point, appBounds, componentBounds) {
  var /** @type {number} */ left = point.x;
  var /** @type {number} */ top = point.y - (componentBounds.height / 2);
  var /** @type {number} */ bottom = point.y + (componentBounds.height / 2);
  this.x = left;
  var /** @type {number} */ pointPercent = componentBounds.height / 100;
  if (top < appBounds.top + 2) {
    var /** @type {number} */ diff = appBounds.top - top + 2;
    top += diff;
    this.tipPosition = 50 - (diff / pointPercent);
  } else if (bottom > appBounds.bottom - 2) {
    diff = (bottom - appBounds.bottom + 2);
    top -= diff;
    this.tipPosition = 50 + (diff / pointPercent);
  } else {
    this.tipPosition = 50;
  }
  this.y = top;
};


/**
 * @protected
 * @type {SVGElement}
 */
com.unhurdle.spectrum.Popover.prototype.tipElement = null;


/**
 * @protected
 * @type {SVGPathElement}
 */
com.unhurdle.spectrum.Popover.prototype.tipPath = null;


/**
 * @protected
 */
com.unhurdle.spectrum.Popover.prototype.setTipPath = function() {
  var /** @type {string} */ pathString = null;
  //var /** @type {string} */ pathString = null;
  switch (this.position) {
    case "top":
    
    case "bottom":
      pathString = "M 0.7071067811865476 0 L 11.414213562373096 10.707106781186548 L 22.121320343559645 0";
      break;
    default:
      pathString = "M 0 0.7071067811865476 L 10.707106781186548 11.414213562373096 L 0 22.121320343559645";
      break;
  }
  this.tipPath.setAttribute("d", pathString);
};


/**
 * @protected
 */
com.unhurdle.spectrum.Popover.prototype.positionTip = function() {
  var /** @type {number} */ percentSize = NaN;
  var /** @type {number} */ actualPosition = NaN;
  this.setTipPath();
  if (this.tipPosition == 50) {
    this.tipElement.style.top = "";
    this.tipElement.style.left = "";
    return;
  }
  //var /** @type {number} */ percentSize = NaN;
  //var /** @type {number} */ actualPosition = NaN;
  switch (this.position) {
    case "top":
    
    case "bottom":
      this.tipElement.style.top = "";
      var /** @type {number} */ width = this.width;
      percentSize = width / 100;
      actualPosition = this.tipPosition * percentSize;
      if (actualPosition < 13) {
        this.tipElement.style.left = "13px";
        return;
      }
      if (width - actualPosition < 13) {
        this.tipElement.style.left = (width - 13) + "px";
        return;
      }
      this.tipElement.style.left = this.tipPosition + "%";
      break;
    default:
      this.tipElement.style.left = "";
      var /** @type {number} */ height = this.height;
      percentSize = height / 100;
      actualPosition = this.tipPosition * percentSize;
      if (actualPosition < 13) {
        this.tipElement.style.top = "13px";
        return;
      }
      if (height - actualPosition < 13) {
        this.tipElement.style.top = (height - 13) + "px";
        return;
      }
      this.tipElement.style.top = this.tipPosition + "%";
      break;
  }
};


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__tipPosition = 50;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__error = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__success = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__top = false;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Popover.prototype.com_unhurdle_spectrum_Popover__position = null;


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.floating;


com.unhurdle.spectrum.Popover.prototype.get__floating = function() {
  return this.com_unhurdle_spectrum_Popover__floating;
};


com.unhurdle.spectrum.Popover.prototype.set__floating = function(value) {
  this.com_unhurdle_spectrum_Popover__floating = value;
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.geom.Rectangle}
 */
com.unhurdle.spectrum.Popover.prototype.anchor;


com.unhurdle.spectrum.Popover.prototype.get__anchor = function() {
  return this.com_unhurdle_spectrum_Popover__anchor;
};


com.unhurdle.spectrum.Popover.prototype.set__anchor = function(value) {
  this.com_unhurdle_spectrum_Popover__anchor = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.open;


com.unhurdle.spectrum.Popover.prototype.get__open = function() {
  return this.com_unhurdle_spectrum_Popover__open;
};


com.unhurdle.spectrum.Popover.prototype.set__open = function(value) {
  if (!!this.com_unhurdle_spectrum_Popover__open != value) {
    this.com_unhurdle_spectrum_Popover__open = value;
    this.toggle("is-open", value);
    if (this.floating) {
      if (this.dialog) {
        this.x = this.y = 0;
      }
      var /** @type {org.apache.royale.core.IPopUpHostParent} */ host = com.unhurdle.spectrum.Application.current.popUpParent;
      this.setAttribute("dir", com.unhurdle.spectrum.Application.current.dir);
      if (value) {
        host.addElement(this);
      } else {
        host.removeElement(this);
      }
    }
    this.dispatchEvent(new org.apache.royale.events.Event("openChanged"));
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.quiet;


com.unhurdle.spectrum.Popover.prototype.get__quiet = function() {
  return this.com_unhurdle_spectrum_Popover__quiet;
};


com.unhurdle.spectrum.Popover.prototype.set__quiet = function(value) {
  this.com_unhurdle_spectrum_Popover__quiet = value;
  this.toggle(this.valueToSelector("quiet"), value);
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.relativePosition;


com.unhurdle.spectrum.Popover.prototype.get__relativePosition = function() {
  return this.com_unhurdle_spectrum_Popover__relativePosition;
};


com.unhurdle.spectrum.Popover.prototype.set__relativePosition = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Popover__relativePosition) {
    this.com_unhurdle_spectrum_Popover__relativePosition = value;
    if (value) {
      this.element.style.position = "relative";
    } else {
      this.element.style.position = null;
    }
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.dialog;


com.unhurdle.spectrum.Popover.prototype.get__dialog = function() {
  return this.com_unhurdle_spectrum_Popover__dialog;
};


com.unhurdle.spectrum.Popover.prototype.set__dialog = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Popover__dialog) {
    this.com_unhurdle_spectrum_Popover__dialog = value;
    this.toggle(this.valueToSelector("dialog"), value);
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.tipDialog;


com.unhurdle.spectrum.Popover.prototype.get__tipDialog = function() {
  return this.com_unhurdle_spectrum_Popover__tipDialog;
};


com.unhurdle.spectrum.Popover.prototype.set__tipDialog = function(value) {
  this.com_unhurdle_spectrum_Popover__tipDialog = value;
  this.toggle(this.valueToSelector("withTip"), value);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Popover.prototype.tipPosition;


com.unhurdle.spectrum.Popover.prototype.get__tipPosition = function() {
  return this.com_unhurdle_spectrum_Popover__tipPosition;
};


com.unhurdle.spectrum.Popover.prototype.set__tipPosition = function(value) {
  this.com_unhurdle_spectrum_Popover__tipPosition = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.dialogError;


com.unhurdle.spectrum.Popover.prototype.get__dialogError = function() {
  return this.com_unhurdle_spectrum_Popover__error;
};


com.unhurdle.spectrum.Popover.prototype.set__dialogError = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Popover__error) {
    this.com_unhurdle_spectrum_Popover__error = value;
    this.toggle("spectrum-Dialog--error", value);
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.dialogSuccess;


com.unhurdle.spectrum.Popover.prototype.get__dialogSuccess = function() {
  return this.com_unhurdle_spectrum_Popover__success;
};


com.unhurdle.spectrum.Popover.prototype.set__dialogSuccess = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Popover__success) {
    this.com_unhurdle_spectrum_Popover__success = value;
    this.toggle("spectrum-Dialog--success", value);
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Popover.prototype.top;


com.unhurdle.spectrum.Popover.prototype.get__top = function() {
  return this.com_unhurdle_spectrum_Popover__top;
};


com.unhurdle.spectrum.Popover.prototype.set__top = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Popover__top) {
    this.com_unhurdle_spectrum_Popover__top = value;
    this.toggle(this.valueToSelector("top"), value);
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Popover.prototype.position;


com.unhurdle.spectrum.Popover.prototype.get__position = function() {
  return this.com_unhurdle_spectrum_Popover__position;
};


com.unhurdle.spectrum.Popover.prototype.set__position = function(value) {
  if (value != this.com_unhurdle_spectrum_Popover__position) {
    if (!value) {
      value = "bottom";
    }
    switch (value) {
      case "bottom":
      
      case "top":
      
      case "right":
      
      case "left":
        break;
      default:
        throw new Error("invalid position: " + value);
    }
    if (this.com_unhurdle_spectrum_Popover__position) {
      this.toggle(this.valueToSelector(this.com_unhurdle_spectrum_Popover__position), false);
    }
    this.toggle(this.valueToSelector(value), true);
    this.com_unhurdle_spectrum_Popover__position = value;
  }
};


Object.defineProperties(com.unhurdle.spectrum.Popover.prototype, /** @lends {com.unhurdle.spectrum.Popover.prototype} */ {
/**
 * @type {boolean}
 */
floating: {
get: com.unhurdle.spectrum.Popover.prototype.get__floating,
set: com.unhurdle.spectrum.Popover.prototype.set__floating},
/**
 * @type {org.apache.royale.geom.Rectangle}
 */
anchor: {
get: com.unhurdle.spectrum.Popover.prototype.get__anchor,
set: com.unhurdle.spectrum.Popover.prototype.set__anchor},
/**
 * @type {boolean}
 */
open: {
get: com.unhurdle.spectrum.Popover.prototype.get__open,
set: com.unhurdle.spectrum.Popover.prototype.set__open},
/**
 * @type {boolean}
 */
quiet: {
get: com.unhurdle.spectrum.Popover.prototype.get__quiet,
set: com.unhurdle.spectrum.Popover.prototype.set__quiet},
/**
 * @type {boolean}
 */
relativePosition: {
get: com.unhurdle.spectrum.Popover.prototype.get__relativePosition,
set: com.unhurdle.spectrum.Popover.prototype.set__relativePosition},
/**
 * @type {boolean}
 */
dialog: {
get: com.unhurdle.spectrum.Popover.prototype.get__dialog,
set: com.unhurdle.spectrum.Popover.prototype.set__dialog},
/**
 * @type {boolean}
 */
tipDialog: {
get: com.unhurdle.spectrum.Popover.prototype.get__tipDialog,
set: com.unhurdle.spectrum.Popover.prototype.set__tipDialog},
/**
 * @type {number}
 */
tipPosition: {
get: com.unhurdle.spectrum.Popover.prototype.get__tipPosition,
set: com.unhurdle.spectrum.Popover.prototype.set__tipPosition},
/**
 * @type {boolean}
 */
dialogError: {
get: com.unhurdle.spectrum.Popover.prototype.get__dialogError,
set: com.unhurdle.spectrum.Popover.prototype.set__dialogError},
/**
 * @type {boolean}
 */
dialogSuccess: {
get: com.unhurdle.spectrum.Popover.prototype.get__dialogSuccess,
set: com.unhurdle.spectrum.Popover.prototype.set__dialogSuccess},
/**
 * @type {boolean}
 */
top: {
get: com.unhurdle.spectrum.Popover.prototype.get__top,
set: com.unhurdle.spectrum.Popover.prototype.set__top},
/**
 * @type {string}
 */
position: {
get: com.unhurdle.spectrum.Popover.prototype.get__position,
set: com.unhurdle.spectrum.Popover.prototype.set__position}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Popover.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Popover', qName: 'com.unhurdle.spectrum.Popover', kind: 'class' }], interfaces: [org.apache.royale.core.IPopUp] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Popover.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'floating': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'anchor': { type: 'org.apache.royale.geom.Rectangle', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'open': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'quiet': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'relativePosition': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'dialog': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'tipDialog': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'tipPosition': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'dialogError': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'dialogSuccess': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'top': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'position': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Popover'}
      };
    },
    methods: function () {
      return {
        'Popover': { type: '', declaredBy: 'com.unhurdle.spectrum.Popover'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.Popover'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Popover.prototype.ROYALE_COMPILE_FLAGS = 11;
