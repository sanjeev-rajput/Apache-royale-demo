/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/ColorSlider.as
 * com.unhurdle.spectrum.ColorSlider
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.ColorSlider');
/* Royale Dependency List: com.unhurdle.spectrum.ColorHandle,com.unhurdle.spectrum.data.RGBColor,com.unhurdle.spectrum.interfaces.IRGBA,com.unhurdle.spectrum.newElement,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.MouseEvent,org.apache.royale.events.ValueEvent,org.apache.royale.geom.Point,org.apache.royale.utils.PointUtils,org.apache.royale.utils.number.getPercent,org.apache.royale.utils.number.pinValue,org.apache.royale.utils.rgbToHsv,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.ColorSlider = function() {
  com.unhurdle.spectrum.ColorSlider.base(this, 'constructor');
  this.colorStops = ["rgb(255, 0, 0)", "rgb(255, 255, 0)", "rgb(0, 255, 0)", "rgb(0, 255, 255)", "rgb(0, 0, 255)", "rgb(255, 0, 255)", "rgb(255, 0, 0)"];
  this.com_unhurdle_spectrum_ColorSlider_hueSlider = true;
};
goog.inherits(com.unhurdle.spectrum.ColorSlider, com.unhurdle.spectrum.SpectrumBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.ColorSlider.prototype.getSelector = function() {
  return "spectrum-ColorSlider";
};


/**
 * @protected
 * @type {com.unhurdle.spectrum.ColorHandle}
 */
com.unhurdle.spectrum.ColorSlider.prototype.handle = null;


/**
 * @protected
 * @type {HTMLElement}
 */
com.unhurdle.spectrum.ColorSlider.prototype.gradient = null;


/**
 * @private
 * @type {HTMLInputElement}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider_input = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.ColorSlider.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.ColorSlider.superClass_.createElement.apply(this);
  var /** @type {HTMLElement} */ checkerboardContainer = com.unhurdle.spectrum.newElement("div", this.appendSelector("-checkerboard"));
  checkerboardContainer.setAttribute("role", "presentation");
  this.gradient = com.unhurdle.spectrum.newElement("div", this.appendSelector("-gradient"));
  this.gradient.setAttribute("role", "presentation");
  checkerboardContainer.appendChild(this.gradient);
  elem.appendChild(checkerboardContainer);
  this.handle = new com.unhurdle.spectrum.ColorHandle();
  this.handle.className = this.appendSelector("-handle");
  this.handle.element.style.left = '0%';
  this.addElement(this.handle);
  this.com_unhurdle_spectrum_ColorSlider_input = com.unhurdle.spectrum.newElement("input", this.appendSelector("-slider"));
  this.com_unhurdle_spectrum_ColorSlider_input.type = "range";
  this.com_unhurdle_spectrum_ColorSlider_input.step = "1";
  this.com_unhurdle_spectrum_ColorSlider_input.min = "0";
  this.com_unhurdle_spectrum_ColorSlider_input.max = "100";
  elem.appendChild(this.com_unhurdle_spectrum_ColorSlider_input);
  return elem;
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider__disabled = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider__vertical = false;


/**
 * @private
 * @type {com.unhurdle.spectrum.interfaces.IRGBA}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider__appliedColor = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider_hueSlider = false;


/**
 * @private
 * @type {Array}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider__colorStops = null;


/**
 * @private
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider_getRGBColors = function() {
  this.com_unhurdle_spectrum_ColorSlider_rgbColors = [];
  for (var /** @type {number} */ i = 0; i < this.colorStops.length; i++) {
    this.com_unhurdle_spectrum_ColorSlider_rgbColors[i] = this.colorToRGBA(org.apache.royale.utils.Language.string(this.colorStops[i]));
  }
};


/**
 * @private
 * @type {Array}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider_rgbColors = null;


/**
 * @protected
 */
com.unhurdle.spectrum.ColorSlider.prototype.calculateHandlePosition = function() {
  if (!this.appliedColor) {
    this.setHandlePosition(0);
    return;
  }
  if (this.com_unhurdle_spectrum_ColorSlider_hueSlider) {
    var /** @type {com.unhurdle.spectrum.interfaces.IRGBA} */ c = this.appliedColor;
    var /** @type {number} */ hue = org.apache.royale.utils.rgbToHsv((c.r) >>> 0, (c.g) >>> 0, (c.b) >>> 0).h;
    this.setHandlePosition(hue / 3.6);
  } else {
  }
};


/**
 * @protected
 * @param {number} percent
 */
com.unhurdle.spectrum.ColorSlider.prototype.setHandlePosition = function(percent) {
  var /** @type {string} */ percentVal = percent + "%";
  if (this.vertical) {
    this.handle.setStyle("top", percentVal);
  } else {
    this.handle.setStyle("left", percentVal);
  }
};


/**
 * @protected
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.addedOnce = false;


/**
 * @override
 */
com.unhurdle.spectrum.ColorSlider.prototype.addedToParent = function() {
  com.unhurdle.spectrum.ColorSlider.superClass_.addedToParent.apply(this);
  if (!this.addedOnce) {
    this.addEventListener('mousedown', org.apache.royale.utils.Language.closure(this.onMouseDown, this, 'onMouseDown'));
  }
  this.com_unhurdle_spectrum_ColorSlider_getRGBColors();
  this.addedOnce = true;
  this.changeBackgroundColor();
  this.calculateHandlePosition();
};


/**
 * @protected
 * @param {org.apache.royale.events.MouseEvent} e
 */
com.unhurdle.spectrum.ColorSlider.prototype.onMouseDown = function(e) {
  if (this.disabled) {
    return;
  }
  this.handle.toggle("is-dragged", true);
  this.onMouseMove(e);
  window.addEventListener('mouseup', org.apache.royale.utils.Language.closure(this.onMouseUp, this, 'onMouseUp'));
  window.addEventListener('mousemove', org.apache.royale.utils.Language.closure(this.onMouseMove, this, 'onMouseMove'));
};


/**
 * @protected
 */
com.unhurdle.spectrum.ColorSlider.prototype.onMouseUp = function() {
  this.handle.toggle("is-dragged", false);
  window.removeEventListener('mouseup', org.apache.royale.utils.Language.closure(this.onMouseUp, this, 'onMouseUp'));
  window.removeEventListener('mousemove', org.apache.royale.utils.Language.closure(this.onMouseMove, this, 'onMouseMove'));
};


/**
 * @protected
 * @param {org.apache.royale.events.MouseEvent} e
 */
com.unhurdle.spectrum.ColorSlider.prototype.onMouseMove = function(e) {
  if (this.disabled) {
    return;
  }
  this.handle.visible = true;
  var /** @type {number} */ percent = this.getMousePercentagePosition(e);
  var /** @type {number} */ num = percent / (100 / (this.colorStops.length - 1));
  if (this.com_unhurdle_spectrum_ColorSlider_isInt(num)) {
    this.handle.appliedColor = this.colorToRGBA(org.apache.royale.utils.Language.string(this.colorStops[num]));
  } else {
    var /** @type {number} */ ind = (num - num % 1) >> 0;
    var /** @type {string} */ color1 = org.apache.royale.utils.Language.string(this.colorStops[ind]);
    var /** @type {string} */ color2 = org.apache.royale.utils.Language.string(this.colorStops[ind + 1]);
    var /** @type {com.unhurdle.spectrum.data.RGBColor} */ rgb1 = this.colorToRGBA(color1);
    var /** @type {com.unhurdle.spectrum.data.RGBColor} */ rgb2 = this.colorToRGBA(color2);
    this.handle.appliedColor = this.findColor(rgb1, rgb2, this.com_unhurdle_spectrum_ColorSlider_getWeightColor(ind + 1, ind, percent));
  }
  this.setHandlePosition(percent);
  this.dispatchEvent(new org.apache.royale.events.ValueEvent("colorChanged", this.appliedColor));
};


/**
 * @protected
 * @param {org.apache.royale.events.MouseEvent} event
 * @return {number}
 */
com.unhurdle.spectrum.ColorSlider.prototype.getMousePercentagePosition = function(event) {
  var /** @type {org.apache.royale.geom.Point} */ localPoint = org.apache.royale.utils.PointUtils.globalToLocal(new org.apache.royale.geom.Point(event.clientX, event.clientY), this);
  if (this.vertical) {
    var /** @type {number} */ sliderOffsetHeight = this.element.offsetHeight;
    var /** @type {number} */ y = org.apache.royale.utils.number.pinValue(localPoint.y, 0, sliderOffsetHeight);
    return org.apache.royale.utils.number.getPercent(y, sliderOffsetHeight);
  } else {
    var /** @type {number} */ sliderOffsetWidth = this.element.offsetWidth;
    var /** @type {number} */ x = org.apache.royale.utils.number.pinValue(localPoint.x, 0, sliderOffsetWidth);
    return org.apache.royale.utils.number.getPercent(x, sliderOffsetWidth);
  }
};


/**
 * @private
 * @param {number} n
 * @return {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider_isInt = function(n) {
  return Number(n) === n && n % 1 === 0;
};


/**
 * @private
 * @param {number} num1
 * @param {number} num2
 * @param {number} percent
 * @return {number}
 */
com.unhurdle.spectrum.ColorSlider.prototype.com_unhurdle_spectrum_ColorSlider_getWeightColor = function(num1, num2, percent) {
  var /** @type {number} */ w1 = num1 * (100 / (this.colorStops.length - 1));
  var /** @type {number} */ w2 = num2 * (100 / (this.colorStops.length - 1));
  var /** @type {number} */ weight = (percent - w1) / (w2 - w1);
  return weight;
};


/**
 * @protected
 * @param {com.unhurdle.spectrum.data.RGBColor} color1
 * @param {com.unhurdle.spectrum.data.RGBColor} color2
 * @param {number} weight
 * @return {com.unhurdle.spectrum.data.RGBColor}
 */
com.unhurdle.spectrum.ColorSlider.prototype.findColor = function(color1, color2, weight) {
  var /** @type {number} */ w1 = weight;
  var /** @type {number} */ w2 = 1 - w1;
  var /** @type {Array} */ rgb = [Math.round(color1.r * w1 + color2.r * w2), Math.round(color1.g * w1 + color2.g * w2), Math.round(color1.b * w1 + color2.b * w2)];
  return new com.unhurdle.spectrum.data.RGBColor(rgb);
};


/**
 * @private
 * @type {HTMLCanvasElement}
 */
com.unhurdle.spectrum.ColorSlider.canvas = null;


/**
 * @protected
 * @nocollapse
 * @return {HTMLCanvasElement}
 */
com.unhurdle.spectrum.ColorSlider.getCanvas = function() {
  if (!com.unhurdle.spectrum.ColorSlider.canvas) {
    com.unhurdle.spectrum.ColorSlider.canvas = com.unhurdle.spectrum.newElement('canvas');
  }
  return com.unhurdle.spectrum.ColorSlider.canvas;
};


/**
 * @protected
 * @param {string} color
 * @return {com.unhurdle.spectrum.data.RGBColor}
 */
com.unhurdle.spectrum.ColorSlider.prototype.colorToRGBA = function(color) {
  var /** @type {HTMLCanvasElement} */ cvs = com.unhurdle.spectrum.ColorSlider.getCanvas();
  cvs.height = 1;
  cvs.width = 1;
  var /** @type {CanvasRenderingContext2D} */ ctx = cvs.getContext('2d');
  ctx.fillStyle = color;
  ctx.fillRect(0, 0, 1, 1);
  return new com.unhurdle.spectrum.data.RGBColor(ctx.getImageData(0, 0, 1, 1).data);
};


/**
 * @protected
 */
com.unhurdle.spectrum.ColorSlider.prototype.changeBackgroundColor = function() {
  var /** @type {string} */ gradientDir = null;
  if (!this.addedOnce) {
    return;
  }
  //var /** @type {string} */ gradientDir = null;
  if (!!this.vertical) {
    gradientDir = "bottom";
  } else {
    gradientDir = "right";
  }
  var /** @type {string} */ startStr = "linear-gradient(to " + gradientDir + ", ";
  var foreachiter0_target = this.colorStops;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var c = foreachiter0_target[foreachiter0];
  {
    startStr += c + ", ";
  }}
  
  startStr = startStr.slice(0, startStr.length - 2);
  startStr += ")";
  this.gradient.style.background = startStr;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.disabled;


com.unhurdle.spectrum.ColorSlider.prototype.get__disabled = function() {
  return this.com_unhurdle_spectrum_ColorSlider__disabled;
};


com.unhurdle.spectrum.ColorSlider.prototype.set__disabled = function(value) {
  if (value != this.com_unhurdle_spectrum_ColorSlider__disabled) {
    this.com_unhurdle_spectrum_ColorSlider__disabled = value;
    this.handle.disabled = value;
    this.toggle("is-disabled", value);
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorSlider.prototype.vertical;


com.unhurdle.spectrum.ColorSlider.prototype.get__vertical = function() {
  return this.com_unhurdle_spectrum_ColorSlider__vertical;
};


com.unhurdle.spectrum.ColorSlider.prototype.set__vertical = function(value) {
  if (value != this.com_unhurdle_spectrum_ColorSlider__vertical) {
    this.com_unhurdle_spectrum_ColorSlider__vertical = value;
    this.toggle(this.valueToSelector("vertical"), value);
    this.changeBackgroundColor();
    this.handle.element.style.left = "50%";
  }
};


/**
 * @nocollapse
 * @export
 * @type {com.unhurdle.spectrum.interfaces.IRGBA}
 */
com.unhurdle.spectrum.ColorSlider.prototype.appliedColor;


com.unhurdle.spectrum.ColorSlider.prototype.get__appliedColor = function() {
  return this.handle.appliedColor;
};


com.unhurdle.spectrum.ColorSlider.prototype.set__appliedColor = function(value) {
  if (!value) {
    return;
  }
  this.handle.visible = value.isValid;
  if (this.com_unhurdle_spectrum_ColorSlider_hueSlider) {
    var /** @type {com.unhurdle.spectrum.interfaces.IRGBA} */ hueVal = value.clone();
    hueVal.alpha = 1;
    this.handle.appliedColor = hueVal;
  } else {
    this.handle.appliedColor = value.clone();
  }
  if (this.addedOnce) {
    this.calculateHandlePosition();
  }
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
com.unhurdle.spectrum.ColorSlider.prototype.colorStops;


com.unhurdle.spectrum.ColorSlider.prototype.get__colorStops = function() {
  return this.com_unhurdle_spectrum_ColorSlider__colorStops;
};


com.unhurdle.spectrum.ColorSlider.prototype.set__colorStops = function(value) {
  this.com_unhurdle_spectrum_ColorSlider_hueSlider = false;
  this.com_unhurdle_spectrum_ColorSlider__colorStops = value;
  this.changeBackgroundColor();
  if (this.addedOnce) {
    this.com_unhurdle_spectrum_ColorSlider_getRGBColors();
    if (!this.handle.appliedColor) {
      this.handle.appliedColor = this.com_unhurdle_spectrum_ColorSlider_rgbColors[0];
    }
    this.calculateHandlePosition();
  }
};


Object.defineProperties(com.unhurdle.spectrum.ColorSlider.prototype, /** @lends {com.unhurdle.spectrum.ColorSlider.prototype} */ {
/**
 * @type {boolean}
 */
disabled: {
get: com.unhurdle.spectrum.ColorSlider.prototype.get__disabled,
set: com.unhurdle.spectrum.ColorSlider.prototype.set__disabled},
/**
 * @type {boolean}
 */
vertical: {
get: com.unhurdle.spectrum.ColorSlider.prototype.get__vertical,
set: com.unhurdle.spectrum.ColorSlider.prototype.set__vertical},
/**
 * @type {com.unhurdle.spectrum.interfaces.IRGBA}
 */
appliedColor: {
get: com.unhurdle.spectrum.ColorSlider.prototype.get__appliedColor,
set: com.unhurdle.spectrum.ColorSlider.prototype.set__appliedColor},
/**
 * @type {Array}
 */
colorStops: {
get: com.unhurdle.spectrum.ColorSlider.prototype.get__colorStops,
set: com.unhurdle.spectrum.ColorSlider.prototype.set__colorStops}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.ColorSlider.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ColorSlider', qName: 'com.unhurdle.spectrum.ColorSlider', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.ColorSlider.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'disabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorSlider'},
        'vertical': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorSlider'},
        'appliedColor': { type: 'com.unhurdle.spectrum.interfaces.IRGBA', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorSlider'},
        'colorStops': { type: 'Array', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorSlider'}
      };
    },
    methods: function () {
      return {
        'ColorSlider': { type: '', declaredBy: 'com.unhurdle.spectrum.ColorSlider'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.ColorSlider'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.ColorSlider.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.unhurdle.spectrum.ColorSlider.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.unhurdle.spectrum.ColorSlider);
