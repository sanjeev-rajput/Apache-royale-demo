/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Divider.as
 * com.unhurdle.spectrum.Divider
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Divider');
/* Royale Dependency List: */

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/divider/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.Divider = function() {
  com.unhurdle.spectrum.Divider.base(this, 'constructor');
  this.size = "medium";
};
goog.inherits(com.unhurdle.spectrum.Divider, com.unhurdle.spectrum.SpectrumBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Divider.prototype.getSelector = function() {
  return "spectrum-Divider";
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Divider.prototype.com_unhurdle_spectrum_Divider__vertical = false;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Divider.prototype.com_unhurdle_spectrum_Divider__size = null;


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Divider.prototype.vertical;


com.unhurdle.spectrum.Divider.prototype.get__vertical = function() {
  return this.com_unhurdle_spectrum_Divider__vertical;
};


com.unhurdle.spectrum.Divider.prototype.set__vertical = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Divider__vertical) {
    this.toggle(this.valueToSelector("vertical"), value);
  }
  this.com_unhurdle_spectrum_Divider__vertical = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Divider.prototype.size;


com.unhurdle.spectrum.Divider.prototype.get__size = function() {
  return this.com_unhurdle_spectrum_Divider__size;
};


com.unhurdle.spectrum.Divider.prototype.set__size = function(value) {
  if (value != this.com_unhurdle_spectrum_Divider__size) {
    switch (value) {
      case "small":
      
      case "medium":
      
      case "large":
        break;
      default:
        throw new Error("Invalid size: " + value);
    }
    if (this.com_unhurdle_spectrum_Divider__size) {
      this.toggle(this.valueToSelector(this.com_unhurdle_spectrum_Divider__size), false);
    }
    this.toggle(this.valueToSelector(value), true);
    this.com_unhurdle_spectrum_Divider__size = value;
  }
};


Object.defineProperties(com.unhurdle.spectrum.Divider.prototype, /** @lends {com.unhurdle.spectrum.Divider.prototype} */ {
/**
 * @type {boolean}
 */
vertical: {
get: com.unhurdle.spectrum.Divider.prototype.get__vertical,
set: com.unhurdle.spectrum.Divider.prototype.set__vertical},
/**
 * @type {string}
 */
size: {
get: com.unhurdle.spectrum.Divider.prototype.get__size,
set: com.unhurdle.spectrum.Divider.prototype.set__size}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Divider.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Divider', qName: 'com.unhurdle.spectrum.Divider', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Divider.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'vertical': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Divider'},
        'size': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Divider'}
      };
    },
    methods: function () {
      return {
        'Divider': { type: '', declaredBy: 'com.unhurdle.spectrum.Divider'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Divider.prototype.ROYALE_COMPILE_FLAGS = 11;
