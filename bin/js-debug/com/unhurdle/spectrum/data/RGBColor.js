/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/data/RGBColor.as
 * com.unhurdle.spectrum.data.RGBColor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.data.RGBColor');
/* Royale Dependency List: org.apache.royale.utils.HSV,org.apache.royale.utils.number.pinValue*/

goog.require('com.unhurdle.spectrum.interfaces.IRGBA');



/**
 * @constructor
 * @implements {com.unhurdle.spectrum.interfaces.IRGBA}
 * @param {Object=} initialValue
 */
com.unhurdle.spectrum.data.RGBColor = function(initialValue) {
  initialValue = typeof initialValue !== 'undefined' ? initialValue : null;
  if (initialValue && initialValue["length"]) {
    if (!isNaN(initialValue[0])) {
      this.r = Number(initialValue[0]);
    }
    if (!isNaN(initialValue[1])) {
      this.g = Number(initialValue[1]);
    }
    if (!isNaN(initialValue[2])) {
      this.b = Number(initialValue[2]);
    }
    if (!isNaN(initialValue[3])) {
      this.alpha = Number(initialValue[3]);
    }
  }
};


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.com_unhurdle_spectrum_data_RGBColor__r = NaN;


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.com_unhurdle_spectrum_data_RGBColor__g = NaN;


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.com_unhurdle_spectrum_data_RGBColor__b = NaN;


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.com_unhurdle_spectrum_data_RGBColor__alpha = NaN;


/**
 * @return {com.unhurdle.spectrum.data.RGBColor}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.clone = function() {
  return new com.unhurdle.spectrum.data.RGBColor([this.r, this.g, this.b, this.alpha]);
};


/**
 * @nocollapse
 * @param {org.apache.royale.utils.HSV} hsv
 * @return {com.unhurdle.spectrum.data.RGBColor}
 */
com.unhurdle.spectrum.data.RGBColor.fromHSV = function(hsv) {
  var /** @type {number} */ r = NaN;
  var /** @type {number} */ b = NaN;
  var /** @type {number} */ g = NaN;
  var /** @type {number} */ h = hsv.h == 360 ? 1 : hsv.h / 360 * 6;
  var /** @type {number} */ s = hsv.s == 100 ? 1 : hsv.s / 100;
  var /** @type {number} */ v = hsv.v == 100 ? 1 : hsv.v / 100;
  var /** @type {number} */ i = Math.floor(h);
  var /** @type {number} */ f = h - i;
  var /** @type {number} */ p = v * (1 - s);
  var /** @type {number} */ q = v * (1 - f * s);
  var /** @type {number} */ t = v * (1 - (1 - f) * s);
  //var /** @type {number} */ r = NaN;
  //var /** @type {number} */ g = NaN;
  //var /** @type {number} */ b = NaN;
  switch (i % 6) {
    case 0:
      r = v, g = t, b = p;
      break;
    case 1:
      r = q, g = v, b = p;
      break;
    case 2:
      r = p, g = v, b = t;
      break;
    case 3:
      r = p, g = q, b = v;
      break;
    case 4:
      r = t, g = p, b = v;
      break;
    case 5:
      r = v, g = p, b = q;
      break;
  }
  return new com.unhurdle.spectrum.data.RGBColor([r * 255, g * 255, b * 255]);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.r;


com.unhurdle.spectrum.data.RGBColor.prototype.get__r = function() {
  return this.com_unhurdle_spectrum_data_RGBColor__r;
};


com.unhurdle.spectrum.data.RGBColor.prototype.set__r = function(value) {
  if (isNaN(value)) {
    this.com_unhurdle_spectrum_data_RGBColor__r = value;
  } else {
    this.com_unhurdle_spectrum_data_RGBColor__r = org.apache.royale.utils.number.pinValue(Math.round(value), 0, 255);
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.g;


com.unhurdle.spectrum.data.RGBColor.prototype.get__g = function() {
  return this.com_unhurdle_spectrum_data_RGBColor__g;
};


com.unhurdle.spectrum.data.RGBColor.prototype.set__g = function(value) {
  if (isNaN(value)) {
    this.com_unhurdle_spectrum_data_RGBColor__g = value;
  } else {
    this.com_unhurdle_spectrum_data_RGBColor__g = org.apache.royale.utils.number.pinValue(Math.round(value), 0, 255);
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.b;


com.unhurdle.spectrum.data.RGBColor.prototype.get__b = function() {
  return this.com_unhurdle_spectrum_data_RGBColor__b;
};


com.unhurdle.spectrum.data.RGBColor.prototype.set__b = function(value) {
  if (isNaN(value)) {
    this.com_unhurdle_spectrum_data_RGBColor__b = value;
  } else {
    this.com_unhurdle_spectrum_data_RGBColor__b = org.apache.royale.utils.number.pinValue(Math.round(value), 0, 255);
  }
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.alpha;


com.unhurdle.spectrum.data.RGBColor.prototype.get__alpha = function() {
  return this.com_unhurdle_spectrum_data_RGBColor__alpha;
};


com.unhurdle.spectrum.data.RGBColor.prototype.set__alpha = function(value) {
  this.com_unhurdle_spectrum_data_RGBColor__alpha = isNaN(value) ? value : org.apache.royale.utils.number.pinValue(value, 0, 1);
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.colorValue;


com.unhurdle.spectrum.data.RGBColor.prototype.get__colorValue = function() {
  if (isNaN(this.alpha) || this.alpha == 1) {
    return ((this.r << 16) | (this.g << 8) | (this.b << 0)) >>> 0;
  }
  var /** @type {number} */ a = ((this.alpha * 255) & 0xFF) >>> 0;
  return ((a << 24) | (this.r << 16) | (this.g << 8) | (this.b << 0)) >>> 0;
};


com.unhurdle.spectrum.data.RGBColor.prototype.set__colorValue = function(value) {
  if (value > 16777215) {
    this.alpha = org.apache.royale.utils.number.pinValue((value >> 24 & 255) / 255, 0, 1);
  }
  this.r = value >> 16 & 255;
  this.g = value >> 8 & 255;
  this.b = value >> 0 & 255;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.styleString;


com.unhurdle.spectrum.data.RGBColor.prototype.get__styleString = function() {
  if (isNaN(this.r) || isNaN(this.g) || isNaN(this.b)) {
    return "";
  }
  var /** @type {boolean} */ hasAlpha = !isNaN(this.alpha);
  var /** @type {string} */ prefix = hasAlpha ? "rgba(" : "rgb(";
  var /** @type {string} */ str = prefix + Math.round(this.r) + "," + Math.round(this.g) + "," + Math.round(this.b);
  if (hasAlpha) {
    return str + "," + (Math.round(this.alpha * 100) / 100) + ")";
  }
  return str + ")";
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.hexString;


com.unhurdle.spectrum.data.RGBColor.prototype.get__hexString = function() {
  if (!this.isValid) {
    return "";
  }
  return "#" + ((1 << 24) + ((this.r >> 0) << 16) + ((this.g >> 0) << 8) + (this.b >> 0)).toString(16).slice(1);
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.isValid;


com.unhurdle.spectrum.data.RGBColor.prototype.get__isValid = function() {
  if (isNaN(this.r) || isNaN(this.g) || isNaN(this.b)) {
    return false;
  }
  return true;
};


Object.defineProperties(com.unhurdle.spectrum.data.RGBColor.prototype, /** @lends {com.unhurdle.spectrum.data.RGBColor.prototype} */ {
/**
 * @type {number}
 */
r: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__r,
set: com.unhurdle.spectrum.data.RGBColor.prototype.set__r},
/**
 * @type {number}
 */
g: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__g,
set: com.unhurdle.spectrum.data.RGBColor.prototype.set__g},
/**
 * @type {number}
 */
b: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__b,
set: com.unhurdle.spectrum.data.RGBColor.prototype.set__b},
/**
 * @type {number}
 */
alpha: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__alpha,
set: com.unhurdle.spectrum.data.RGBColor.prototype.set__alpha},
/**
 * @type {number}
 */
colorValue: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__colorValue,
set: com.unhurdle.spectrum.data.RGBColor.prototype.set__colorValue},
/**
 * @type {string}
 */
styleString: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__styleString},
/**
 * @type {string}
 */
hexString: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__hexString},
/**
 * @type {boolean}
 */
isValid: {
get: com.unhurdle.spectrum.data.RGBColor.prototype.get__isValid}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RGBColor', qName: 'com.unhurdle.spectrum.data.RGBColor', kind: 'class' }], interfaces: [com.unhurdle.spectrum.interfaces.IRGBA] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'r': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'g': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'b': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'alpha': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'colorValue': { type: 'uint', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'styleString': { type: 'String', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'hexString': { type: 'String', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        'isValid': { type: 'Boolean', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'}
      };
    },
    methods: function () {
      return {
        'RGBColor': { type: '', declaredBy: 'com.unhurdle.spectrum.data.RGBColor', parameters: function () { return [ 'Object', true ]; }},
        'clone': { type: 'com.unhurdle.spectrum.data.RGBColor', declaredBy: 'com.unhurdle.spectrum.data.RGBColor'},
        '|fromHSV': { type: 'com.unhurdle.spectrum.data.RGBColor', declaredBy: 'com.unhurdle.spectrum.data.RGBColor', parameters: function () { return [ 'org.apache.royale.utils.HSV', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.unhurdle.spectrum.data.RGBColor.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.unhurdle.spectrum.data.RGBColor);
