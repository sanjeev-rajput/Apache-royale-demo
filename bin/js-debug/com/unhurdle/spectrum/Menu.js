/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Menu.as
 * com.unhurdle.spectrum.Menu
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Menu');
/* Royale Dependency List: com.unhurdle.spectrum.data.IMenuItem,com.unhurdle.spectrum.data.MenuItem,org.apache.royale.collections.IArrayList,org.apache.royale.html.util.getLabelFromData,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.List');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/menu/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.List}
 */
com.unhurdle.spectrum.Menu = function() {
  com.unhurdle.spectrum.Menu.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.Menu, com.unhurdle.spectrum.List);


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Menu.prototype.com_unhurdle_spectrum_Menu__labelField = "label";


/**
 * @private
 * @param {Object} value
 */
com.unhurdle.spectrum.Menu.prototype.com_unhurdle_spectrum_Menu_convertArray = function(value) {
  var /** @type {Array} */ newVal = null;
  //var /** @type {Array} */ newVal = null;
  var /** @type {number} */ len = (value["length"]) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    if (org.apache.royale.utils.Language.is(value[i], com.unhurdle.spectrum.data.IMenuItem)) {
    } else if (org.apache.royale.utils.Language.is(value[i], com.unhurdle.spectrum.Menu)) {
    } else {
      var /** @type {com.unhurdle.spectrum.data.MenuItem} */ item = new com.unhurdle.spectrum.data.MenuItem(org.apache.royale.html.util.getLabelFromData(this, value[i]));
      if (value[i]["hasOwnProperty"]("selected")) {
        item.selected = !!(value[i]["selected"]);
      }
      if (value[i]["hasOwnProperty"]("isDivider")) {
        item.isDivider = !!(value[i]["isDivider"]);
      }
      if (value[i]["hasOwnProperty"]("isOpen")) {
        item.isOpen = !!(value[i]["isOpen"]);
      }
      if (value[i]["hasOwnProperty"]("disabled")) {
        item.disabled = !!(value[i]["disabled"]);
      }
      if (value[i]["hasOwnProperty"]("isHeading")) {
        item.isHeading = !!(value[i]["isHeading"]);
      }
      if (value[i]["hasOwnProperty"]("icon")) {
        item.icon = org.apache.royale.utils.Language.string(value[i]["icon"]);
      }
      if (value[i]["hasOwnProperty"]("subMenu")) {
        item.subMenu = value[i]["subMenu"];
      }
      value[i] = item;
    }
  }
};


com.unhurdle.spectrum.Menu.prototype.set__dataProvider = function(value) {
  if (org.apache.royale.utils.Language.is(value, Array)) {
    this.com_unhurdle_spectrum_Menu_convertArray(value);
  } else if (org.apache.royale.utils.Language.is(value, org.apache.royale.collections.IArrayList)) {
    this.com_unhurdle_spectrum_Menu_convertArray(value["source"]);
  }
  com.unhurdle.spectrum.Menu.superClass_.set__dataProvider.apply(this, [value]);
};


com.unhurdle.spectrum.Menu.prototype.get__labelField = function() {
  return this.com_unhurdle_spectrum_Menu__labelField;
};


com.unhurdle.spectrum.Menu.prototype.set__labelField = function(value) {
  this.com_unhurdle_spectrum_Menu__labelField = value;
};


Object.defineProperties(com.unhurdle.spectrum.Menu.prototype, /** @lends {com.unhurdle.spectrum.Menu.prototype} */ {
/**
 * @type {Object}
 */
dataProvider: {
get: org.apache.royale.html.DataContainer.prototype.get__dataProvider,
set: com.unhurdle.spectrum.Menu.prototype.set__dataProvider},
/**
 * @type {string}
 */
labelField: {
get: com.unhurdle.spectrum.Menu.prototype.get__labelField,
set: com.unhurdle.spectrum.Menu.prototype.set__labelField}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Menu.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Menu', qName: 'com.unhurdle.spectrum.Menu', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Menu.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'dataProvider': { type: 'Object', access: 'writeonly', declaredBy: 'com.unhurdle.spectrum.Menu'},
        'labelField': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Menu'}
      };
    },
    methods: function () {
      return {
        'Menu': { type: '', declaredBy: 'com.unhurdle.spectrum.Menu'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Menu.prototype.ROYALE_COMPILE_FLAGS = 11;
