/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/ColorArea.as
 * com.unhurdle.spectrum.ColorArea
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.ColorArea');
/* Royale Dependency List: com.unhurdle.spectrum.ColorHandle,com.unhurdle.spectrum.data.RGBColor,com.unhurdle.spectrum.interfaces.IRGBA,com.unhurdle.spectrum.newElement,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.ValueEvent,org.apache.royale.geom.Point,org.apache.royale.utils.HSV,org.apache.royale.utils.number.getPercent,org.apache.royale.utils.number.pinValue,org.apache.royale.utils.rgbToHsv,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.ColorArea = function() {
  com.unhurdle.spectrum.ColorArea.base(this, 'constructor');
  this.width = this.height = this.size;
};
goog.inherits(com.unhurdle.spectrum.ColorArea, com.unhurdle.spectrum.SpectrumBase);


/**
 * @nocollapse
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.ColorArea.DEFAULT_SIZE = 192;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.ColorArea.prototype.getSelector = function() {
  return "spectrum-ColorArea";
};


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea__size = 192;


/**
 * @private
 * @type {org.apache.royale.utils.HSV}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea__hsv = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.ColorHandle}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_handle = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_addedOnce = false;


/**
 * @override
 */
com.unhurdle.spectrum.ColorArea.prototype.addedToParent = function() {
  com.unhurdle.spectrum.ColorArea.superClass_.addedToParent.apply(this);
  if (!this.com_unhurdle_spectrum_ColorArea_addedOnce) {
    this.addEventListener('mousedown', org.apache.royale.utils.Language.closure(this.onMouseDown, this, 'onMouseDown'));
  }
  this.com_unhurdle_spectrum_ColorArea_addedOnce = true;
  this.com_unhurdle_spectrum_ColorArea_drawCanvas();
};


/**
 * @private
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_positionHandle = function() {
  this.com_unhurdle_spectrum_ColorArea_handle.visible = true;
  this.com_unhurdle_spectrum_ColorArea_handle.x = (this.hsv.s / 100) * this.width;
  this.com_unhurdle_spectrum_ColorArea_handle.y = this.height - this.hsv.v * this.height / 100;
  this.com_unhurdle_spectrum_ColorArea_setHandleColor();
};


/**
 * @protected
 * @param {MouseEvent} e
 */
com.unhurdle.spectrum.ColorArea.prototype.onMouseDown = function(e) {
  this.com_unhurdle_spectrum_ColorArea_handle.toggle("is-dragged", true);
  this.onMouseMove(e);
  window.addEventListener('mouseup', org.apache.royale.utils.Language.closure(this.onMouseUp, this, 'onMouseUp'));
  window.addEventListener('mousemove', org.apache.royale.utils.Language.closure(this.onMouseMove, this, 'onMouseMove'));
};


/**
 * @protected
 */
com.unhurdle.spectrum.ColorArea.prototype.onMouseUp = function() {
  this.com_unhurdle_spectrum_ColorArea_handle.toggle("is-dragged", false);
  window.removeEventListener('mouseup', org.apache.royale.utils.Language.closure(this.onMouseUp, this, 'onMouseUp'));
  window.removeEventListener('mousemove', org.apache.royale.utils.Language.closure(this.onMouseMove, this, 'onMouseMove'));
};


/**
 * @protected
 * @param {MouseEvent} e
 */
com.unhurdle.spectrum.ColorArea.prototype.onMouseMove = function(e) {
  this.com_unhurdle_spectrum_ColorArea_calculateColor(this.com_unhurdle_spectrum_ColorArea_getClientOffset(e));
};


/**
 * @private
 * @param {org.apache.royale.geom.Point} point
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_calculateColor = function(point) {
  this.hsv.s = org.apache.royale.utils.number.getPercent(point.x, this.width);
  this.hsv.v = 100 - org.apache.royale.utils.number.getPercent(point.y, this.height);
  this.com_unhurdle_spectrum_ColorArea_positionHandle();
  this.dispatchEvent(new org.apache.royale.events.ValueEvent("colorChanged", this.appliedColor));
};


/**
 * @private
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_setHandleColor = function() {
  this.com_unhurdle_spectrum_ColorArea_handle.appliedColor = com.unhurdle.spectrum.data.RGBColor.fromHSV(this.hsv);
};


/**
 * @private
 * @param {MouseEvent} event
 * @return {org.apache.royale.geom.Point}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_getClientOffset = function(event) {
  if (event["touches"]) {
    event = event["touches"][0];
  }
  var /** @type {ClientRect} */ clientRect = this.com_unhurdle_spectrum_ColorArea_canvas.getBoundingClientRect();
  var /** @type {org.apache.royale.geom.Point} */ point = new org.apache.royale.geom.Point(event.clientX, event.clientY);
  point.x -= clientRect.left;
  point.x = org.apache.royale.utils.number.pinValue(point.x, 0, this.width);
  point.y -= clientRect.top;
  point.y = org.apache.royale.utils.number.pinValue(point.y, 0, this.height);
  return point;
};


/**
 * @private
 * @return {boolean}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_drawCanvas = function() {
  if (!this.com_unhurdle_spectrum_ColorArea_addedOnce) {
    return false;
  }
  this.com_unhurdle_spectrum_ColorArea_canvas.width = this.size;
  this.com_unhurdle_spectrum_ColorArea_canvas.height = this.size;
  var /** @type {CanvasRenderingContext2D} */ context = this.com_unhurdle_spectrum_ColorArea_canvas.getContext('2d');
  context.rect(0, 0, this.com_unhurdle_spectrum_ColorArea_canvas.width, this.com_unhurdle_spectrum_ColorArea_canvas.height);
  var /** @type {CanvasGradient} */ gradB = context.createLinearGradient(0, 0, 0, this.com_unhurdle_spectrum_ColorArea_canvas.height);
  gradB.addColorStop(0, 'white');
  gradB.addColorStop(1, 'black');
  var /** @type {org.apache.royale.utils.HSV} */ hueColor = new org.apache.royale.utils.HSV();
  hueColor.h = this.hue;
  hueColor.s = 100;
  hueColor.v = 100;
  var /** @type {com.unhurdle.spectrum.interfaces.IRGBA} */ colorToApply = com.unhurdle.spectrum.data.RGBColor.fromHSV(hueColor);
  if (!this.hsv) {
    this.hsv = hueColor;
    this.hsv.v = 0;
  }
  var /** @type {CanvasGradient} */ gradC = context.createLinearGradient(0, 0, this.com_unhurdle_spectrum_ColorArea_canvas.width, 0);
  colorToApply.alpha = 0;
  gradC.addColorStop(0, colorToApply.styleString);
  colorToApply.alpha = 1;
  gradC.addColorStop(1, colorToApply.styleString);
  context.fillStyle = gradB;
  context.fillRect(0, 0, this.com_unhurdle_spectrum_ColorArea_canvas.width, this.com_unhurdle_spectrum_ColorArea_canvas.height);
  context.fillStyle = gradC;
  context.globalCompositeOperation = 'multiply';
  context.fillRect(0, 0, this.com_unhurdle_spectrum_ColorArea_canvas.width, this.com_unhurdle_spectrum_ColorArea_canvas.height);
  context.globalCompositeOperation = 'source-over';
  return true;
};


/**
 * @private
 * @type {HTMLCanvasElement}
 */
com.unhurdle.spectrum.ColorArea.prototype.com_unhurdle_spectrum_ColorArea_canvas = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.ColorArea.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.ColorArea.superClass_.createElement.apply(this);
  this.com_unhurdle_spectrum_ColorArea_canvas = com.unhurdle.spectrum.newElement('canvas', this.appendSelector("-gradient"));
  elem.appendChild(this.com_unhurdle_spectrum_ColorArea_canvas);
  this.com_unhurdle_spectrum_ColorArea_handle = new com.unhurdle.spectrum.ColorHandle();
  this.addElement(this.com_unhurdle_spectrum_ColorArea_handle);
  return elem;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.ColorArea.prototype.size;


com.unhurdle.spectrum.ColorArea.prototype.get__size = function() {
  return this.com_unhurdle_spectrum_ColorArea__size;
};


com.unhurdle.spectrum.ColorArea.prototype.set__size = function(value) {
  this.com_unhurdle_spectrum_ColorArea__size = value;
  this.width = this.height = value;
  this.com_unhurdle_spectrum_ColorArea_drawCanvas();
};


/**
 * @nocollapse
 * @export
 * @type {com.unhurdle.spectrum.interfaces.IRGBA}
 */
com.unhurdle.spectrum.ColorArea.prototype.appliedColor;


com.unhurdle.spectrum.ColorArea.prototype.get__appliedColor = function() {
  return this.com_unhurdle_spectrum_ColorArea_handle.appliedColor;
};


com.unhurdle.spectrum.ColorArea.prototype.set__appliedColor = function(value) {
  if (!value) {
    return;
  }
  this.com_unhurdle_spectrum_ColorArea_handle.visible = value.isValid;
  if (value.isValid) {
    this.hsv = org.apache.royale.utils.rgbToHsv((value.r) >>> 0, (value.g) >>> 0, (value.b) >>> 0);
    this.com_unhurdle_spectrum_ColorArea_drawCanvas();
  }
};


/**
 * @nocollapse
 * @export
 * @type {org.apache.royale.utils.HSV}
 */
com.unhurdle.spectrum.ColorArea.prototype.hsv;


com.unhurdle.spectrum.ColorArea.prototype.get__hsv = function() {
  return this.com_unhurdle_spectrum_ColorArea__hsv;
};


com.unhurdle.spectrum.ColorArea.prototype.set__hsv = function(value) {
  this.com_unhurdle_spectrum_ColorArea__hsv = value;
  this.com_unhurdle_spectrum_ColorArea_positionHandle();
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.ColorArea.prototype.hue;


com.unhurdle.spectrum.ColorArea.prototype.get__hue = function() {
  return this.hsv ? this.hsv.h : 0;
};


com.unhurdle.spectrum.ColorArea.prototype.set__hue = function(value) {
  if (!this.hsv) {
    this.hsv = new org.apache.royale.utils.HSV();
    this.hsv.s = 100;
    this.hsv.v = 100;
  }
  if (this.hsv.s == 0) {
    this.hsv.s = 100;
  }
  if (this.hsv.v == 0) {
    this.hsv.v = 100;
  }
  this.hsv.h = value;
  this.com_unhurdle_spectrum_ColorArea_positionHandle();
  this.com_unhurdle_spectrum_ColorArea_drawCanvas();
};


Object.defineProperties(com.unhurdle.spectrum.ColorArea.prototype, /** @lends {com.unhurdle.spectrum.ColorArea.prototype} */ {
/**
 * @type {number}
 */
size: {
get: com.unhurdle.spectrum.ColorArea.prototype.get__size,
set: com.unhurdle.spectrum.ColorArea.prototype.set__size},
/**
 * @type {com.unhurdle.spectrum.interfaces.IRGBA}
 */
appliedColor: {
get: com.unhurdle.spectrum.ColorArea.prototype.get__appliedColor,
set: com.unhurdle.spectrum.ColorArea.prototype.set__appliedColor},
/**
 * @type {org.apache.royale.utils.HSV}
 */
hsv: {
get: com.unhurdle.spectrum.ColorArea.prototype.get__hsv,
set: com.unhurdle.spectrum.ColorArea.prototype.set__hsv},
/**
 * @type {number}
 */
hue: {
get: com.unhurdle.spectrum.ColorArea.prototype.get__hue,
set: com.unhurdle.spectrum.ColorArea.prototype.set__hue}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.ColorArea.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ColorArea', qName: 'com.unhurdle.spectrum.ColorArea', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.ColorArea.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'size': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorArea'},
        'appliedColor': { type: 'com.unhurdle.spectrum.interfaces.IRGBA', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorArea'},
        'hsv': { type: 'org.apache.royale.utils.HSV', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorArea'},
        'hue': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ColorArea'}
      };
    },
    methods: function () {
      return {
        'ColorArea': { type: '', declaredBy: 'com.unhurdle.spectrum.ColorArea'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.ColorArea'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.ColorArea.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.unhurdle.spectrum.ColorArea.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.unhurdle.spectrum.ColorArea);
