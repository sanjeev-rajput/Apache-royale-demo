/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/typography/Typography.as
 * com.unhurdle.spectrum.typography.Typography
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.typography.Typography');
/* Royale Dependency List: */

goog.require('com.unhurdle.spectrum.typography.TypographyBase');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.typography.TypographyBase}
 */
com.unhurdle.spectrum.typography.Typography = function() {
  
  this.com_unhurdle_spectrum_typography_Typography_numLookup = ["", "XL", "L", "M", "S", "XS", "XXS"];
  com.unhurdle.spectrum.typography.Typography.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.typography.Typography, com.unhurdle.spectrum.typography.TypographyBase);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.typography.Typography.STRONG = "strong;";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.typography.Typography.QUIET = "quiet;";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.typography.Typography.NORMAL = "normal;";


/**
 * @protected
 * @return {string}
 */
com.unhurdle.spectrum.typography.Typography.prototype.getTypographySelector = function() {
  return "";
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.typography.Typography.prototype.getSelector = function() {
  var /** @type {string} */ retVal = '';
  var /** @type {Array} */ suffix = this.getSuffix();
  if (!suffix.length) {
    return this.getTypographySelector();
  }
  for (var /** @type {number} */ i = 0; i < suffix.length; i++) {
    retVal += this.getTypographySelector() + suffix[i] + ' ';
  }
  return retVal.trim();
};


/**
 * @protected
 * @return {Array}
 */
com.unhurdle.spectrum.typography.Typography.prototype.getSuffix = function() {
  return [];
};


/**
 * @protected
 * @return {number}
 */
com.unhurdle.spectrum.typography.Typography.prototype.getDefaultSize = function() {
  return 1;
};


/**
 * @protected
 * @type {string}
 */
com.unhurdle.spectrum.typography.Typography.prototype._size = null;


/**
 * @protected
 * @return {Array}
 */
com.unhurdle.spectrum.typography.Typography.prototype.getSizes = function() {
  return ["XXS", "XS", "S", "M", "L", "XL", "XXL", "XXXL"];
};


/**
 * @private
 * @type {Array}
 */
com.unhurdle.spectrum.typography.Typography.prototype.com_unhurdle_spectrum_typography_Typography_numLookup = null;


/**
 * @param {string} value
 * @return {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.validateSize = function(value) {
  if (this.getSizes().indexOf(value) != -1) {
    return true;
  }
  return false;
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.com_unhurdle_spectrum_typography_Typography__italic = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.com_unhurdle_spectrum_typography_Typography__serif = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.com_unhurdle_spectrum_typography_Typography__secondary = false;


/**
 * @protected
 */
com.unhurdle.spectrum.typography.Typography.prototype.setTypeNames = function() {
  this.typeNames = this.getSelector();
  this.setClassName(this.computeFinalClassNames());
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.typography.Typography.prototype.size;


com.unhurdle.spectrum.typography.Typography.prototype.get__size = function() {
  return this._size;
};


com.unhurdle.spectrum.typography.Typography.prototype.set__size = function(value) {
  if (!value || value == this._size) {
    return;
  }
  var /** @type {number} */ numVal = Number(value);
  if (!isNaN(numVal)) {
    value = org.apache.royale.utils.Language.string(this.com_unhurdle_spectrum_typography_Typography_numLookup[numVal]);
  }
  if (!this.validateSize(value)) {
    throw new Error("invalid size: " + value);
  }
  if (this._size) {
    this.toggle(this.valueToSelector(this._size), false);
  }
  this._size = value;
  this.toggle(this.valueToSelector(value), true);
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.italic;


com.unhurdle.spectrum.typography.Typography.prototype.get__italic = function() {
  return this.com_unhurdle_spectrum_typography_Typography__italic;
};


com.unhurdle.spectrum.typography.Typography.prototype.set__italic = function(value) {
  if (value != !!this.com_unhurdle_spectrum_typography_Typography__italic) {
    this.toggle(this.valueToSelector("italic"), value);
  }
  this.com_unhurdle_spectrum_typography_Typography__italic = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.serif;


com.unhurdle.spectrum.typography.Typography.prototype.get__serif = function() {
  return this.com_unhurdle_spectrum_typography_Typography__serif;
};


com.unhurdle.spectrum.typography.Typography.prototype.set__serif = function(value) {
  if (value != !!this.com_unhurdle_spectrum_typography_Typography__serif) {
    this.toggle(this.valueToSelector("serif"), value);
  }
  this.com_unhurdle_spectrum_typography_Typography__serif = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.typography.Typography.prototype.secondary;


com.unhurdle.spectrum.typography.Typography.prototype.get__secondary = function() {
  return this.com_unhurdle_spectrum_typography_Typography__secondary;
};


com.unhurdle.spectrum.typography.Typography.prototype.set__secondary = function(value) {
  if (value != !!this.com_unhurdle_spectrum_typography_Typography__secondary) {
    this.toggle(this.valueToSelector("secondary"), value);
  }
  this.com_unhurdle_spectrum_typography_Typography__secondary = value;
};


Object.defineProperties(com.unhurdle.spectrum.typography.Typography.prototype, /** @lends {com.unhurdle.spectrum.typography.Typography.prototype} */ {
/**
 * @type {string}
 */
size: {
get: com.unhurdle.spectrum.typography.Typography.prototype.get__size,
set: com.unhurdle.spectrum.typography.Typography.prototype.set__size},
/**
 * @type {boolean}
 */
italic: {
get: com.unhurdle.spectrum.typography.Typography.prototype.get__italic,
set: com.unhurdle.spectrum.typography.Typography.prototype.set__italic},
/**
 * @type {boolean}
 */
serif: {
get: com.unhurdle.spectrum.typography.Typography.prototype.get__serif,
set: com.unhurdle.spectrum.typography.Typography.prototype.set__serif},
/**
 * @type {boolean}
 */
secondary: {
get: com.unhurdle.spectrum.typography.Typography.prototype.get__secondary,
set: com.unhurdle.spectrum.typography.Typography.prototype.set__secondary}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.typography.Typography.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Typography', qName: 'com.unhurdle.spectrum.typography.Typography', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.typography.Typography.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'size': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.typography.Typography'},
        'italic': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.typography.Typography'},
        'serif': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.typography.Typography'},
        'secondary': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.typography.Typography'}
      };
    },
    methods: function () {
      return {
        'Typography': { type: '', declaredBy: 'com.unhurdle.spectrum.typography.Typography'},
        'validateSize': { type: 'Boolean', declaredBy: 'com.unhurdle.spectrum.typography.Typography', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.typography.Typography.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.unhurdle.spectrum.typography.Typography.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.unhurdle.spectrum.typography.Typography);
