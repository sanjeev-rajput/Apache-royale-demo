/**
 * Generated by Apache Royale Compiler from com/util/DsUtil.as
 * com.util.DsUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.util.DsUtil');
/* Royale Dependency List: XML,org.apache.royale.utils.Language*/



/**
 * @constructor
 */
com.util.DsUtil = function() {
};


/**
 * @private
 * @type {Object}
 */
com.util.DsUtil.urlQueryVars = null;


/**
 * @private
 * @type {string}
 */
com.util.DsUtil.mPath = null;


/**
 * @private
 */
com.util.DsUtil.setQueryString = function() {
  com.util.DsUtil.urlQueryVars = {};
  var /** @type {string} */ query = location.search.substring(1);
  if (query) {
    var /** @type {Array} */ vars = query.split("&");
    for (var /** @type {number} */ i = 0; i < vars.length; i++) {
      var /** @type {Array} */ pair = /* implicit cast */ org.apache.royale.utils.Language.as(vars[i]["split"]("="), Array, true);
      com.util.DsUtil.urlQueryVars[pair[0]] = decodeURIComponent(org.apache.royale.utils.Language.string(pair[1]));
    }
  }
};


/**
 * @nocollapse
 * @param {string} parameter
 * @return {string}
 */
com.util.DsUtil.getQueryString = function(parameter) {
  if (com.util.DsUtil.urlQueryVars == null)
    com.util.DsUtil.setQueryString();
  return org.apache.royale.utils.Language.string(com.util.DsUtil.urlQueryVars[parameter]);
};


/**
 * @nocollapse
 * @return {boolean}
 */
com.util.DsUtil.isMobile = function() {
  var /** @type {boolean} */ ontouch = "ontouchstart" in window;
  return ontouch;
};


/**
 * @nocollapse
 * @param {string} urlStr
 * @return {boolean}
 */
com.util.DsUtil.isValidUrl = function(urlStr) {
  var /** @type {boolean} */ isValid = false;
  var /** @type {RegExp} */ pattern = new RegExp('^([a-zA-Z]+:\\/\\/)?' + '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + '((\\d{1,3}\\.){3}\\d{1,3}))' + '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + '(\\?[;&a-z\\d%_.~+=-]*)?' + '(\\#[-a-z\\d_]*)?$', 'i');
  var /** @type {boolean} */ isRelativeUrl = (urlStr.trim().length > 3 && urlStr.indexOf("/") > 0) ? true : false;
  var /** @type {boolean} */ isExternalUrl = pattern.test(urlStr);
  (isRelativeUrl || isExternalUrl) ? isValid = true : isValid = false;
  return isValid;
};


/**
 * @nocollapse
 * @param {Object} rawData
 * @return {Array}
 */
com.util.DsUtil.csvFileToJsonObj = function(rawData) {
  var /** @type {Array} */ jsonData = [];
  var /** @type {Array} */ headers = [];
  var /** @type {Array} */ rows = /* implicit cast */ org.apache.royale.utils.Language.as(rawData["split"](/\u000d?\u000a/), Array, true);
  for (var /** @type {number} */ i = 0; i < rows.length; i++) {
    var /** @type {Array} */ cells = /* implicit cast */ org.apache.royale.utils.Language.as(rows[i]["split"](","), Array, true);
    var /** @type {Object} */ rowData = {};
    for (var /** @type {number} */ j = 0; j < cells.length; j++) {
      if (i == 0) {
        var /** @type {string} */ headerName = org.apache.royale.utils.Language.string(cells[j]["trim"]());
        headers.push(headerName);
      } else {
        var /** @type {Object} */ key = headers[j];
        if (key) {
          rowData[key] = (cells[j])["trim"]();
        }
      }
    }
    if (i != 0) {
      jsonData.push(rowData);
    }
  }
  return jsonData;
};


/**
 * @nocollapse
 * @param {Object} rawData
 * @return {Array}
 */
com.util.DsUtil.csvFileToArrayObj = function(rawData) {
  var /** @type {Array} */ allTextLines = /* implicit cast */ org.apache.royale.utils.Language.as(rawData["split"](/\u000d\u000a|\u000a/), Array, true);
  var /** @type {Array} */ headers = /* implicit cast */ org.apache.royale.utils.Language.as(allTextLines[0]["split"](','), Array, true);
  var /** @type {Array} */ lines = [];
  for (var /** @type {number} */ i = 1; i < allTextLines.length; i++) {
    var /** @type {Array} */ data = /* implicit cast */ org.apache.royale.utils.Language.as(allTextLines[i]["split"](','), Array, true);
    if (data.length == headers.length) {
      var /** @type {Array} */ tarr = [];
      for (var /** @type {number} */ j = 0; j < headers.length; j++) {
        tarr.push(headers[j] + ":" + data[j]);
      }
      lines.push(tarr);
    }
  }
  return lines;
};


/**
 * remove \n\r from the string
 * @nocollapse
 * @param {string} i
 * @return {string}
 */
com.util.DsUtil.remvoeNewlineAndTab = function(i) {
  var /** @type {string} */ result = null;
  //var /** @type {string} */ result = null;
  result = i.replace(/(\u000d\u000a|\u000a|\u000d)/gm, "");
  return result;
};


/**
 * @nocollapse
 * @param {string} str
 * @param {number=} num
 * @return {string}
 */
com.util.DsUtil.truncateString = function(str, num) {
  num = typeof num !== 'undefined' ? num : 25;
  if (str.length > num) {
    return str.slice(0, num) + "...";
  } else {
    return str;
  }
};


/**
 * @nocollapse
 * @param {string} utcString
 * @return {string}
 */
com.util.DsUtil.formatDateTime = function(utcString) {
  function pad(n) {
    return (n < 10 ? "0" + n : "" + n);
  };
  var /** @type {*} */ jsDate = new Date(utcString);
  var /** @type {number} */ year = (jsDate["getFullYear"]()) >> 0;
  var /** @type {number} */ month = (jsDate["getMonth"]() + 1) >> 0;
  var /** @type {number} */ day = (jsDate["getDate"]()) >> 0;
  var /** @type {number} */ hours = (jsDate["getHours"]()) >> 0;
  var /** @type {number} */ minutes = (jsDate["getMinutes"]()) >> 0;
  var /** @type {number} */ seconds = (jsDate["getSeconds"]()) >> 0;
  return year + "-" + pad(month) + "-" + pad(day) + " ; " + pad(hours) + "." + pad(minutes) + ":" + pad(seconds);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.util.DsUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DsUtil', qName: 'com.util.DsUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.util.DsUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|getQueryString': { type: 'String', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'String', false ]; }},
        '|isMobile': { type: 'Boolean', declaredBy: 'com.util.DsUtil'},
        '|isValidUrl': { type: 'Boolean', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'String', false ]; }},
        '|csvFileToJsonObj': { type: 'Array', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'Object', false ]; }},
        '|csvFileToArrayObj': { type: 'Array', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'Object', false ]; }},
        '|remvoeNewlineAndTab': { type: 'String', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'String', false ]; }},
        '|truncateString': { type: 'String', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'String', false ,'int', true ]; }},
        '|formatDateTime': { type: 'String', declaredBy: 'com.util.DsUtil', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.util.DsUtil.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.util.DsUtil.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.util.DsUtil);

//# sourceMappingURL=./DsUtil.js.map
