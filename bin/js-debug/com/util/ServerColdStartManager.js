/**
 * Generated by Apache Royale Compiler from com/util/ServerColdStartManager.as
 * com.util.ServerColdStartManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.util.ServerColdStartManager');
/* Royale Dependency List: com.unhurdle.spectrum.Toast,org.apache.royale.events.Event,org.apache.royale.utils.Timer,XML*/




/**
 * @constructor
 */
com.util.ServerColdStartManager = function() {
};


/**
 * @private
 * @type {com.unhurdle.spectrum.Toast}
 */
com.util.ServerColdStartManager.toast = null;


/**
 * @private
 * @type {org.apache.royale.utils.Timer}
 */
com.util.ServerColdStartManager.timer = null;


/**
 * @private
 * @type {number}
 */
com.util.ServerColdStartManager.countdown = 60;


/**
 * @private
 * @type {boolean}
 */
com.util.ServerColdStartManager.isNodeStarted = false;


/**
 * @nocollapse
 */
com.util.ServerColdStartManager.showWakeUpMessage = function() {
  if (com.util.ServerColdStartManager.toast || com.util.ServerColdStartManager.isNodeStarted)
    return;
  com.util.ServerColdStartManager.toast = new com.unhurdle.spectrum.Toast();
  com.util.ServerColdStartManager.toast.text = "Waking up server... please wait (60s)";
  com.util.ServerColdStartManager.toast.flavor = com.unhurdle.spectrum.Toast.INFO;
  com.util.ServerColdStartManager.toast.show();
  com.util.ServerColdStartManager.countdown = 60;
  com.util.ServerColdStartManager.timer = new org.apache.royale.utils.Timer(1000);
  com.util.ServerColdStartManager.timer.addEventListener(org.apache.royale.utils.Timer.TIMER, com.util.ServerColdStartManager.updateCountdown);
  com.util.ServerColdStartManager.timer.start();
};


/**
 * @private
 * @param {org.apache.royale.events.Event} e
 */
com.util.ServerColdStartManager.updateCountdown = function(e) {
  com.util.ServerColdStartManager.countdown--;
  if (com.util.ServerColdStartManager.toast)
    com.util.ServerColdStartManager.toast.text = "Waking up server... please wait (" + com.util.ServerColdStartManager.countdown + "s)";
  if (com.util.ServerColdStartManager.countdown <= 0)
    com.util.ServerColdStartManager.stopCountdown();
};


/**
 * @nocollapse
 */
com.util.ServerColdStartManager.showConnectedMessage = function() {
  if (com.util.ServerColdStartManager.isNodeStarted)
    return;
  com.util.ServerColdStartManager.stopCountdown();
  com.util.ServerColdStartManager.isNodeStarted = true;
  if (com.util.ServerColdStartManager.toast) {
    com.util.ServerColdStartManager.toast.text = "âœ… Connected successfully.";
    com.util.ServerColdStartManager.toast.flavor = com.unhurdle.spectrum.Toast.SUCCESS;
    setTimeout(function() {
      com.util.ServerColdStartManager.toast.hide();
      com.util.ServerColdStartManager.toast = null;
    }, 2000);
  }
};


/**
 * @private
 */
com.util.ServerColdStartManager.stopCountdown = function() {
  if (com.util.ServerColdStartManager.timer) {
    com.util.ServerColdStartManager.timer.stop();
    com.util.ServerColdStartManager.timer = null;
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.util.ServerColdStartManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ServerColdStartManager', qName: 'com.util.ServerColdStartManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.util.ServerColdStartManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|showWakeUpMessage': { type: 'void', declaredBy: 'com.util.ServerColdStartManager'},
        '|showConnectedMessage': { type: 'void', declaredBy: 'com.util.ServerColdStartManager'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.util.ServerColdStartManager.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.util.ServerColdStartManager.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.util.ServerColdStartManager);

//# sourceMappingURL=./ServerColdStartManager.js.map
