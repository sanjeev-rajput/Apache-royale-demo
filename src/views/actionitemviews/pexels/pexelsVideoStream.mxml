<j:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:html="library://ns.apache.org/royale/html"
    xmlns:sp="library://ns.unhurdle.com/spectrum"
    width="100%" height="100%"
    initComplete="fetchVideos()">
    


    <fx:Script>
        <![CDATA[
            import com.model.ServiceLoader;
            import org.apache.royale.jewel.VideoPlayer;

            private var httpService:ServiceLoader;
            private var query:String = "nature"; // Default search query
            private var perPage:int = 10; // Number of videos to fetch per page
            private var videoUrls:Array = [];
            private var currentIndex:int = 0;
            private var videoElement:HTMLVideoElement;

            private function onUp():void {
                if (currentIndex > 0) {
                    currentIndex--;
                    showVideo(currentIndex);
                }
            }

            private function onDown():void {
                if (currentIndex < videoUrls.length - 1) {
                    currentIndex++;
                    showVideo(currentIndex);

                    // Preload next batch if nearing end
                    if (currentIndex >= videoUrls.length - 2) {
                        fetchVideos();
                    }
                }
            }

            private function fetchVideos():void {
                //if (httpService) httpService = null;
                var url:String = "http://localhost:3000/api/pexels/videoStream?q=" + encodeURIComponent(query) + "&per_page=" + perPage;

                var httpService:ServiceLoader = new ServiceLoader();
                httpService.reqMethod = "GET";
                httpService.contentType = "application/json";
                httpService.loadJData(url, onVideosLoaded, ServiceLoader.DATA_TYPE_JSON, onError, false);
            }

            private function onVideosLoaded(d:Object):void {
                var response:Array = d as Array;
                for each (var video:Object in response) {
                    videoUrls.push(video.video_files[0].link); // Use lowest resolution or pick best quality
                }
                showVideo(currentIndex);
            }

            private function onError(event:Event):void {
                trace("Error loading videos: " + event);
            }

            private function showVideo(index:int):void {
                if (index >= 0 && index < videoUrls.length) {
                    videoPlayer.src = videoUrls[index];
                    videoPlayer.play();
                }
            }

            private function searchHandler():void {
                query = search.text; // Get search query from input
                videoUrls = []; // Clear previous videos
                currentIndex = 0; // Reset index
                fetchVideos(); // Fetch new videos based on search query
                searchInput.text = "Showing videos for: " + query; // Update placeholder text
            }


        ]]>
    </fx:Script>
    <j:HGroup  width="100%" height="600" gap="10"  itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter">
       <j:VideoPlayer id="videoPlayer" height="400" autoplay="true" loop="true"  controls="true" scaleMode="zoom" />
       <j:VGroup>
        <html:I class="fa fa-sort-up"  click="onUp()" style="font-size:48px"/>
        <html:I class="fa fa-sort-down"  click="onDown()" style="font-size:48px"/>
       </j:VGroup>
    </j:HGroup>
    
    <j:VGroup gap="1"  width="100%" itemsHorizontalAlign="itemsCenter" className="pexelSearchContainer">
        <sp:Search id="search" search="searchHandler()" quiet="true"/>
        <sp:TextField placeholder="Showing technology videos..." width="300" id="searchInput" disabled="true" quiet="true"/>
    </j:VGroup>

</j:Group>