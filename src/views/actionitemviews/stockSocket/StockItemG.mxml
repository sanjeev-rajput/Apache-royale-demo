<j:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:js="library://ns.apache.org/royale/basic"
        xmlns:j="library://ns.apache.org/royale/jewel" xmlns:html="library://ns.apache.org/royale/html"
        width="100%" initComplete="init()" gap="10" itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsSpaceAround" className="stockItemG"
        click="clickEventHandler()">
        <j:beads>
            <js:ContainerDataBinding/>
        </j:beads>

    <fx:Script>
        <![CDATA[
            import com.util.DsUtil;
            import com.controller.PopupManager;
            import views.actionitemviews.stockSocket.SocketHistory;
            import org.apache.royale.core.UIBase;
            import com.event.DsEvent;
            import com.util.AsJsUtil;
            import com.extjavascript.charts.ChartToJs;

            
            private var _sData:Object = null;
            private var _isInitlized:Boolean = false;

            private var _dataHistory:Array = new Array();
            private var _tCounter:Array = new Array();
            
            private var _canvHisDataUi:* = null;
            private var _chart:*;

            private var _sId:String = null;
            [Bindable]
            private var _symbol:String;
            [Bindable]
            private var _price:String;
            [Bindable]
            private var _time:String;
            [Bindable]
            private var _iIndex:String;
            


            private function init():void {
                _isInitlized = true;
                createHistoricDataCanvas();
                DsEvent.instance.addEventListener(DsEvent.HISTORIC_DATA, historicDataEventHandler);
            }

            public function set sData(d:Object):void {
                // Skip update if values haven't changed
                if (_sData && _sData.price == d.price && _sData.timestamp == d.timestamp) return;

                _sData = d;
                _sId = _sData.symbol;

                // Update UI-bound properties
                _symbol = _sData.symbol;
                _time = DsUtil.formatDateTime(_sData.timestamp);
                _price = _sData.price;
                
                _dataHistory.push(_price);
                _tCounter.push(_dataHistory.length);
                

                // Highlight class animation
                if (!_isInitlized) return;
                _chart.data.datasets.data=_dataHistory
                _chart.data.labels=_tCounter;
                _chart.update();

                this.addClass("stockItemHighlight");
                setTimeout(function():void {
                    removeClass("stockItemHighlight");
                }, 200);
            }

            public function get sData():Object {
                return _sData;
            }


            public function get sId():String {
                return _sId;
            }

            public function set iIndex(i:int):void{
                _iIndex = i.toString() + ".";
            }

            private function clickEventHandler():void {
                var p:SocketHistory = new SocketHistory();
                p.data = _dataHistory;
                p.title = _symbol;
                PopupManager.getInstance().createPopup(p, this.parent as UIBase )
            }

            private function historicDataEventHandler(e:Object):void {
                chartContainer.visible = Boolean(e.data);
                Boolean(e.data) ? chartContainer.percentWidth = 100 : chartContainer.percentWidth = 1;
                
            }

            private function createHistoricDataCanvas():void {
                if(_canvHisDataUi == null){
                    _canvHisDataUi = AsJsUtil.createCanvas();
                    chartContainer.element.appendChild(_canvHisDataUi);
                }
                _chart = new ChartToJs.chartObj(_canvHisDataUi, {
                    type: "line",
                    data: {
                        datasets: [{
                        data: _dataHistory,
                        borderWidth: .5
                        }],
                        labels: _tCounter
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // Allows the chart to fill the container without maintaining aspect ratio
                        scales: {
                            y: {
                                display: false
                            },
                            x: {
                                display: false
                            }
                        },
                    plugins: {
                        legend: {
                            display: false // Hides the legend entirely
                        },
                        datalabels: {
                            display: false
                         }
                    }
            }});
            }

            
        ]]>
    </fx:Script>
        <j:Label text="{_iIndex}" style="font-weight: bolder;"/>
        <j:Label text="{_symbol}" />
        <j:Label text="{_price}" />
        <j:Label text="{_time}" />
        <html:Div id="chartContainer" height="50" visible="false" />
</j:HGroup>
